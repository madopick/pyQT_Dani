
Project_23_03_14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009674  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  08009844  08009844  00019844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bb8  08009bb8  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08009bb8  08009bb8  00019bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bc0  08009bc0  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bc0  08009bc0  00019bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bc4  08009bc4  00019bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08009bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ec  20000100  08009cc8  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  08009cc8  000207ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f461  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002447  00000000  00000000  0002f591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  000319d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  000325d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023594  00000000  00000000  000330f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012361  00000000  00000000  0005668c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccdc5  00000000  00000000  000689ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001357b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003898  00000000  00000000  00135804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000100 	.word	0x20000100
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800982c 	.word	0x0800982c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000104 	.word	0x20000104
 800020c:	0800982c 	.word	0x0800982c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <Buffercmp>:
  * @param  pBuffer1, pBuffer2: buffers to be compared.
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */
uint16_t Buffercmp(int32_t pBuffer1[], int32_t pBuffer2[], uint8_t length){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	4613      	mov	r3, r2
 80005c0:	71fb      	strb	r3, [r7, #7]
	printf("Compare process...\r\n");
 80005c2:	4813      	ldr	r0, [pc, #76]	; (8000610 <Buffercmp+0x5c>)
 80005c4:	f008 f9b4 	bl	8008930 <puts>
	for (uint8_t i = 0; i < length; i++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	75fb      	strb	r3, [r7, #23]
 80005cc:	e014      	b.n	80005f8 <Buffercmp+0x44>
		if (pBuffer1[i]!=pBuffer2[i]){
 80005ce:	7dfb      	ldrb	r3, [r7, #23]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	4413      	add	r3, r2
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	7dfb      	ldrb	r3, [r7, #23]
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	440b      	add	r3, r1
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d005      	beq.n	80005f2 <Buffercmp+0x3e>
			printf("Buffer different!!!\r\n");
 80005e6:	480b      	ldr	r0, [pc, #44]	; (8000614 <Buffercmp+0x60>)
 80005e8:	f008 f9a2 	bl	8008930 <puts>
			return i;
 80005ec:	7dfb      	ldrb	r3, [r7, #23]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	e00a      	b.n	8000608 <Buffercmp+0x54>
	for (uint8_t i = 0; i < length; i++){
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfa      	ldrb	r2, [r7, #23]
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d3e6      	bcc.n	80005ce <Buffercmp+0x1a>
		}
	}
	printf("Buffer same!!!\r\n");
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <Buffercmp+0x64>)
 8000602:	f008 f995 	bl	8008930 <puts>
	return 0;
 8000606:	2300      	movs	r3, #0
}
 8000608:	4618      	mov	r0, r3
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	08009844 	.word	0x08009844
 8000614:	08009858 	.word	0x08009858
 8000618:	08009870 	.word	0x08009870

0800061c <Buffercmp_Byte>:

uint16_t Buffercmp_Byte(int32_t pBuffer1[], int32_t pBuffer2[], uint8_t length){
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b096      	sub	sp, #88	; 0x58
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	4613      	mov	r3, r2
 8000628:	71fb      	strb	r3, [r7, #7]
	char send[] = {0x14, 0x15,
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <Buffercmp_Byte+0xc4>)
 800062c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000630:	461d      	mov	r5, r3
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	e895 0003 	ldmia.w	r5, {r0, r1}
 800063a:	6020      	str	r0, [r4, #0]
 800063c:	3404      	adds	r4, #4
 800063e:	7021      	strb	r1, [r4, #0]
			'C','o','m','p','a','r','e',' ','p','r','o','c','e','s','s','.','.',0x0d,0x0a};
	HAL_UART_Transmit(&huart2, (uint8_t *)send, 21, 0xFFFF);
 8000640:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000648:	2215      	movs	r2, #21
 800064a:	4826      	ldr	r0, [pc, #152]	; (80006e4 <Buffercmp_Byte+0xc8>)
 800064c:	f006 fe83 	bl	8007356 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < length; i++){
 8000650:	2300      	movs	r3, #0
 8000652:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000656:	e029      	b.n	80006ac <Buffercmp_Byte+0x90>
		if (pBuffer1[i]!=pBuffer2[i]){
 8000658:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	68b9      	ldr	r1, [r7, #8]
 800066c:	440b      	add	r3, r1
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	429a      	cmp	r2, r3
 8000672:	d016      	beq.n	80006a2 <Buffercmp_Byte+0x86>
			char comp[] = {0x14, 0x15,
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <Buffercmp_Byte+0xcc>)
 8000676:	f107 0414 	add.w	r4, r7, #20
 800067a:	461d      	mov	r5, r3
 800067c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000680:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000684:	6020      	str	r0, [r4, #0]
 8000686:	3404      	adds	r4, #4
 8000688:	8021      	strh	r1, [r4, #0]
					'B','u','f','f','e','r',' ','D','i','f','f','e','r','e','n','t','!','!',0x0d,0x0a};
			HAL_UART_Transmit(&huart2, (uint8_t *)comp, 22, 0xFFFF);
 800068a:	f107 0114 	add.w	r1, r7, #20
 800068e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000692:	2216      	movs	r2, #22
 8000694:	4813      	ldr	r0, [pc, #76]	; (80006e4 <Buffercmp_Byte+0xc8>)
 8000696:	f006 fe5e 	bl	8007356 <HAL_UART_Transmit>
			return i;
 800069a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800069e:	b29b      	uxth	r3, r3
 80006a0:	e01a      	b.n	80006d8 <Buffercmp_Byte+0xbc>
	for (uint8_t i = 0; i < length; i++){
 80006a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80006a6:	3301      	adds	r3, #1
 80006a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80006ac:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d3d0      	bcc.n	8000658 <Buffercmp_Byte+0x3c>
		}
	}

	char comp[] = {0x14, 0x15,
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <Buffercmp_Byte+0xd0>)
 80006b8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80006bc:	461d      	mov	r5, r3
 80006be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c2:	682b      	ldr	r3, [r5, #0]
 80006c4:	7023      	strb	r3, [r4, #0]
		'B','u','f','f','e','r',' ','s','a','m','e','!','!',0x0d,0x0a};
	HAL_UART_Transmit(&huart2, (uint8_t *)comp, 17, 0xFFFF);
 80006c6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80006ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ce:	2211      	movs	r2, #17
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <Buffercmp_Byte+0xc8>)
 80006d2:	f006 fe40 	bl	8007356 <HAL_UART_Transmit>
	return 0;
 80006d6:	2300      	movs	r3, #0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3758      	adds	r7, #88	; 0x58
 80006dc:	46bd      	mov	sp, r7
 80006de:	bdb0      	pop	{r4, r5, r7, pc}
 80006e0:	08009880 	.word	0x08009880
 80006e4:	2000011c 	.word	0x2000011c
 80006e8:	08009898 	.word	0x08009898
 80006ec:	080098b0 	.word	0x080098b0

080006f0 <I2C_Master_Transmit>:

void I2C_Master_Transmit() {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	do
	{
		if(HAL_I2C_Master_Transmit_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 80006f4:	2364      	movs	r3, #100	; 0x64
 80006f6:	4a0d      	ldr	r2, [pc, #52]	; (800072c <I2C_Master_Transmit+0x3c>)
 80006f8:	f240 310f 	movw	r1, #783	; 0x30f
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <I2C_Master_Transmit+0x40>)
 80006fe:	f004 f9ef 	bl	8004ae0 <HAL_I2C_Master_Transmit_IT>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <I2C_Master_Transmit+0x1c>
		{Error_Handler();}
 8000708:	f000 fe48 	bl	800139c <Error_Handler>

		// Wait transfer data successful
		while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 800070c:	bf00      	nop
 800070e:	4808      	ldr	r0, [pc, #32]	; (8000730 <I2C_Master_Transmit+0x40>)
 8000710:	f004 fd98 	bl	8005244 <HAL_I2C_GetState>
 8000714:	4603      	mov	r3, r0
 8000716:	2b20      	cmp	r3, #32
 8000718:	d1f9      	bne.n	800070e <I2C_Master_Transmit+0x1e>
		{}
	} while(HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <I2C_Master_Transmit+0x40>)
 800071c:	f004 fda0 	bl	8005260 <HAL_I2C_GetError>
 8000720:	4603      	mov	r3, r0
 8000722:	2b04      	cmp	r3, #4
 8000724:	d0e6      	beq.n	80006f4 <I2C_Master_Transmit+0x4>
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000000 	.word	0x20000000
 8000730:	200001c0 	.word	0x200001c0

08000734 <I2C_Master_Receive>:

void I2C_Master_Receive() {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	do
	{
		if(HAL_I2C_Master_Receive_IT(&I2cHandle, (uint16_t)I2C_ADDRESS, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK) {Error_Handler();}
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <I2C_Master_Receive+0x3c>)
 800073c:	f240 310f 	movw	r1, #783	; 0x30f
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <I2C_Master_Receive+0x40>)
 8000742:	f004 fa73 	bl	8004c2c <HAL_I2C_Master_Receive_IT>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <I2C_Master_Receive+0x1c>
 800074c:	f000 fe26 	bl	800139c <Error_Handler>

		/* Saat Acknowledge failure (Slave tidak mengakui alamatnya) Master memulai ulang komunikasi */
	} while (HAL_I2C_GetError(&I2cHandle) == HAL_I2C_ERROR_AF);
 8000750:	4808      	ldr	r0, [pc, #32]	; (8000774 <I2C_Master_Receive+0x40>)
 8000752:	f004 fd85 	bl	8005260 <HAL_I2C_GetError>
 8000756:	4603      	mov	r3, r0
 8000758:	2b04      	cmp	r3, #4
 800075a:	d0ed      	beq.n	8000738 <I2C_Master_Receive+0x4>

	// Wait transfer data successful
	while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 800075c:	bf00      	nop
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <I2C_Master_Receive+0x40>)
 8000760:	f004 fd70 	bl	8005244 <HAL_I2C_GetState>
 8000764:	4603      	mov	r3, r0
 8000766:	2b20      	cmp	r3, #32
 8000768:	d1f9      	bne.n	800075e <I2C_Master_Receive+0x2a>
	{}
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000051c 	.word	0x2000051c
 8000774:	200001c0 	.word	0x200001c0

08000778 <Set_aTxBuffer>:
	// Wait for the end of the transfer
	while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
	{}
}

void Set_aTxBuffer(int16_t idx0, int32_t target[], uint16_t idx_target, uint16_t size){
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	4611      	mov	r1, r2
 8000782:	461a      	mov	r2, r3
 8000784:	4603      	mov	r3, r0
 8000786:	81fb      	strh	r3, [r7, #14]
 8000788:	460b      	mov	r3, r1
 800078a:	81bb      	strh	r3, [r7, #12]
 800078c:	4613      	mov	r3, r2
 800078e:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i=0; i<10; i++){
 8000790:	2300      	movs	r3, #0
 8000792:	75fb      	strb	r3, [r7, #23]
 8000794:	e008      	b.n	80007a8 <Set_aTxBuffer+0x30>
		aTxBuffer[i+1] = 0;
 8000796:	7dfb      	ldrb	r3, [r7, #23]
 8000798:	3301      	adds	r3, #1
 800079a:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <Set_aTxBuffer+0x58>)
 800079c:	2100      	movs	r1, #0
 800079e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i=0; i<10; i++){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	3301      	adds	r3, #1
 80007a6:	75fb      	strb	r3, [r7, #23]
 80007a8:	7dfb      	ldrb	r3, [r7, #23]
 80007aa:	2b09      	cmp	r3, #9
 80007ac:	d9f3      	bls.n	8000796 <Set_aTxBuffer+0x1e>
	}
	memcpy(&aTxBuffer[1], &target[idx_target], size);
 80007ae:	89bb      	ldrh	r3, [r7, #12]
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	4413      	add	r3, r2
 80007b6:	88fa      	ldrh	r2, [r7, #6]
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <Set_aTxBuffer+0x5c>)
 80007bc:	f008 f81c 	bl	80087f8 <memcpy>
	aTxBuffer[0]=idx0;
 80007c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007c4:	4a02      	ldr	r2, [pc, #8]	; (80007d0 <Set_aTxBuffer+0x58>)
 80007c6:	6013      	str	r3, [r2, #0]
}
 80007c8:	bf00      	nop
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000004 	.word	0x20000004

080007d8 <__io_putchar>:

static uint16_t u16_oldPos = 0;
static uint16_t u16_lenCnt = 0;

/* @brief  Retargets the C library printf function to the USART. */
PUTCHAR_PROTOTYPE {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80007e0:	1d39      	adds	r1, r7, #4
 80007e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e6:	2201      	movs	r2, #1
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <__io_putchar+0x20>)
 80007ea:	f006 fdb4 	bl	8007356 <HAL_UART_Transmit>
  return ch;
 80007ee:	687b      	ldr	r3, [r7, #4]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000011c 	.word	0x2000011c

080007fc <main>:

int32_t temp[30];


int main(void)
{
 80007fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fe:	b0ad      	sub	sp, #180	; 0xb4
 8000800:	af08      	add	r7, sp, #32
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f003 f8a9 	bl	8003958 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 fbf1 	bl	8000fec <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f000 fcaf 	bl	800116c <MX_GPIO_Init>
  MX_DMA_Init();
 800080e:	f000 fc8d 	bl	800112c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000812:	f000 fc59 	bl	80010c8 <MX_USART2_UART_Init>

  /*##-1- Configure the I2C peripheral ######################################*/
  I2cHandle.Instance             = I2Cx;
 8000816:	4b5e      	ldr	r3, [pc, #376]	; (8000990 <main+0x194>)
 8000818:	4a5e      	ldr	r2, [pc, #376]	; (8000994 <main+0x198>)
 800081a:	601a      	str	r2, [r3, #0]
  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_10BIT;
 800081c:	4b5c      	ldr	r3, [pc, #368]	; (8000990 <main+0x194>)
 800081e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000822:	611a      	str	r2, [r3, #16]
  I2cHandle.Init.ClockSpeed      = 400000;
 8000824:	4b5a      	ldr	r3, [pc, #360]	; (8000990 <main+0x194>)
 8000826:	4a5c      	ldr	r2, [pc, #368]	; (8000998 <main+0x19c>)
 8000828:	605a      	str	r2, [r3, #4]
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082a:	4b59      	ldr	r3, [pc, #356]	; (8000990 <main+0x194>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_16_9;
 8000830:	4b57      	ldr	r3, [pc, #348]	; (8000990 <main+0x194>)
 8000832:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000836:	609a      	str	r2, [r3, #8]
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000838:	4b55      	ldr	r3, [pc, #340]	; (8000990 <main+0x194>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 800083e:	4b54      	ldr	r3, [pc, #336]	; (8000990 <main+0x194>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 8000844:	4b52      	ldr	r3, [pc, #328]	; (8000990 <main+0x194>)
 8000846:	f240 320f 	movw	r2, #783	; 0x30f
 800084a:	60da      	str	r2, [r3, #12]
  I2cHandle.Init.OwnAddress2     = 0xFE;
 800084c:	4b50      	ldr	r3, [pc, #320]	; (8000990 <main+0x194>)
 800084e:	22fe      	movs	r2, #254	; 0xfe
 8000850:	619a      	str	r2, [r3, #24]

  if(HAL_I2C_Init(&I2cHandle) != HAL_OK){ Error_Handler(); }
 8000852:	484f      	ldr	r0, [pc, #316]	; (8000990 <main+0x194>)
 8000854:	f004 f800 	bl	8004858 <HAL_I2C_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <main+0x66>
 800085e:	f000 fd9d 	bl	800139c <Error_Handler>

  serial_init();
 8000862:	f000 fdaf 	bl	80013c4 <serial_init>
  #ifdef MASTER_BOARD
  	  printf("Init OK\r\n");
 8000866:	484d      	ldr	r0, [pc, #308]	; (800099c <main+0x1a0>)
 8000868:	f008 f862 	bl	8008930 <puts>
  #endif

  /****************** MAIN **********************/
  while (1)
  {
  	  if (bitFlag & BFLAG_UART_RCV) {			/* UART Processing*/
 800086c:	4b4c      	ldr	r3, [pc, #304]	; (80009a0 <main+0x1a4>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	2b00      	cmp	r3, #0
 8000876:	d017      	beq.n	80008a8 <main+0xac>
  		  uartProcessing (u8arr_uartEvent, u16_lenCnt - 2); // remove \r & \n
 8000878:	4b4a      	ldr	r3, [pc, #296]	; (80009a4 <main+0x1a8>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	3b02      	subs	r3, #2
 800087e:	b29b      	uxth	r3, r3
 8000880:	4619      	mov	r1, r3
 8000882:	4849      	ldr	r0, [pc, #292]	; (80009a8 <main+0x1ac>)
 8000884:	f000 fce0 	bl	8001248 <uartProcessing>
  		  memset(u8arr_uartEvent, 0, UART_BUF_SZ);
 8000888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800088c:	2100      	movs	r1, #0
 800088e:	4846      	ldr	r0, [pc, #280]	; (80009a8 <main+0x1ac>)
 8000890:	f007 ffc0 	bl	8008814 <memset>
  		  u16_lenCnt = 0;
 8000894:	4b43      	ldr	r3, [pc, #268]	; (80009a4 <main+0x1a8>)
 8000896:	2200      	movs	r2, #0
 8000898:	801a      	strh	r2, [r3, #0]

  		  bitFlag 	&= ~BFLAG_UART_RCV;
 800089a:	4b41      	ldr	r3, [pc, #260]	; (80009a0 <main+0x1a4>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	f023 0301 	bic.w	r3, r3, #1
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b3e      	ldr	r3, [pc, #248]	; (80009a0 <main+0x1a4>)
 80008a6:	801a      	strh	r2, [r3, #0]
  	  }

  	  // Trigger default input at form
  	  if (bitFlag & BFLAG_I2C_RBA) {			//Read Byte All (Trigger once at the first time)
 80008a8:	4b3d      	ldr	r3, [pc, #244]	; (80009a0 <main+0x1a4>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d04b      	beq.n	800094c <main+0x150>
	  	  #ifdef MASTER_BOARD
  		  memset (sendStr, 0, STRLENMAX);
 80008b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b8:	2100      	movs	r1, #0
 80008ba:	483c      	ldr	r0, [pc, #240]	; (80009ac <main+0x1b0>)
 80008bc:	f007 ffaa 	bl	8008814 <memset>
		  sendStr[0] = 0x10;
 80008c0:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <main+0x1b0>)
 80008c2:	2210      	movs	r2, #16
 80008c4:	701a      	strb	r2, [r3, #0]
		  sendStr[1] = 0x11;
 80008c6:	4b39      	ldr	r3, [pc, #228]	; (80009ac <main+0x1b0>)
 80008c8:	2211      	movs	r2, #17
 80008ca:	705a      	strb	r2, [r3, #1]
		  for (uint8_t i=4; i<=6; i++){
 80008cc:	2304      	movs	r3, #4
 80008ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80008d2:	e029      	b.n	8000928 <main+0x12c>
			  aTxBuffer[0] = i;
 80008d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80008d8:	4a35      	ldr	r2, [pc, #212]	; (80009b0 <main+0x1b4>)
 80008da:	6013      	str	r3, [r2, #0]

			  I2C_Master_Transmit();
 80008dc:	f7ff ff08 	bl	80006f0 <I2C_Master_Transmit>

			  I2C_Master_Receive();
 80008e0:	f7ff ff28 	bl	8000734 <I2C_Master_Receive>

			  if (aRxBuffer[0]==4){
 80008e4:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <main+0x1b8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b04      	cmp	r3, #4
 80008ea:	d105      	bne.n	80008f8 <main+0xfc>
				  memcpy(&sendStr[2], &aRxBuffer[1], CFG_LENGTH * sizeof(&aRxBuffer[1]));
 80008ec:	2228      	movs	r2, #40	; 0x28
 80008ee:	4932      	ldr	r1, [pc, #200]	; (80009b8 <main+0x1bc>)
 80008f0:	4832      	ldr	r0, [pc, #200]	; (80009bc <main+0x1c0>)
 80008f2:	f007 ff81 	bl	80087f8 <memcpy>
 80008f6:	e012      	b.n	800091e <main+0x122>
			  }
			  else if (aRxBuffer[0]==5){
 80008f8:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <main+0x1b8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b05      	cmp	r3, #5
 80008fe:	d105      	bne.n	800090c <main+0x110>
				  memcpy(&sendStr[42], &aRxBuffer[1], CFG_LENGTH * sizeof(&aRxBuffer[1]));
 8000900:	2228      	movs	r2, #40	; 0x28
 8000902:	492d      	ldr	r1, [pc, #180]	; (80009b8 <main+0x1bc>)
 8000904:	482e      	ldr	r0, [pc, #184]	; (80009c0 <main+0x1c4>)
 8000906:	f007 ff77 	bl	80087f8 <memcpy>
 800090a:	e008      	b.n	800091e <main+0x122>
			  }
			  else if (aRxBuffer[0]==6){
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <main+0x1b8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b06      	cmp	r3, #6
 8000912:	d104      	bne.n	800091e <main+0x122>
				  memcpy(&sendStr[82], &aRxBuffer[1], CFG_LENGTH * sizeof(&aRxBuffer[1]));
 8000914:	2228      	movs	r2, #40	; 0x28
 8000916:	4928      	ldr	r1, [pc, #160]	; (80009b8 <main+0x1bc>)
 8000918:	482a      	ldr	r0, [pc, #168]	; (80009c4 <main+0x1c8>)
 800091a:	f007 ff6d 	bl	80087f8 <memcpy>
		  for (uint8_t i=4; i<=6; i++){
 800091e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000922:	3301      	adds	r3, #1
 8000924:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000928:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800092c:	2b06      	cmp	r3, #6
 800092e:	d9d1      	bls.n	80008d4 <main+0xd8>
			  }
		  }

		  HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, 122, 0xFFFF);
 8000930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000934:	227a      	movs	r2, #122	; 0x7a
 8000936:	491d      	ldr	r1, [pc, #116]	; (80009ac <main+0x1b0>)
 8000938:	4823      	ldr	r0, [pc, #140]	; (80009c8 <main+0x1cc>)
 800093a:	f006 fd0c 	bl	8007356 <HAL_UART_Transmit>

		  bitFlag &= ~BFLAG_I2C_RBA;
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <main+0x1a4>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000946:	b29a      	uxth	r2, r3
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <main+0x1a4>)
 800094a:	801a      	strh	r2, [r3, #0]
		  #endif
  	  }

  	  if (bitFlag & BFLAG_I2C_RAA) {
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <main+0x1a4>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	f003 0302 	and.w	r3, r3, #2
 8000954:	2b00      	cmp	r3, #0
 8000956:	d07b      	beq.n	8000a50 <main+0x254>
		  #ifdef MASTER_BOARD
		  for (uint8_t i=4; i<=6; i++){
 8000958:	2304      	movs	r3, #4
 800095a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800095e:	e069      	b.n	8000a34 <main+0x238>
			  aTxBuffer[0] = i;
 8000960:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000964:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <main+0x1b4>)
 8000966:	6013      	str	r3, [r2, #0]

			  I2C_Master_Transmit();
 8000968:	f7ff fec2 	bl	80006f0 <I2C_Master_Transmit>


			  I2C_Master_Receive();
 800096c:	f7ff fee2 	bl	8000734 <I2C_Master_Receive>

			  if (aRxBuffer[0]==4){
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <main+0x1b8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b04      	cmp	r3, #4
 8000976:	d103      	bne.n	8000980 <main+0x184>
				  printf("R1: ");
 8000978:	4814      	ldr	r0, [pc, #80]	; (80009cc <main+0x1d0>)
 800097a:	f007 ff53 	bl	8008824 <iprintf>
 800097e:	e030      	b.n	80009e2 <main+0x1e6>
			  }
			  else if (aRxBuffer[0]==5){
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <main+0x1b8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b05      	cmp	r3, #5
 8000986:	d125      	bne.n	80009d4 <main+0x1d8>
				  printf("R2: ");
 8000988:	4811      	ldr	r0, [pc, #68]	; (80009d0 <main+0x1d4>)
 800098a:	f007 ff4b 	bl	8008824 <iprintf>
 800098e:	e028      	b.n	80009e2 <main+0x1e6>
 8000990:	200001c0 	.word	0x200001c0
 8000994:	40005400 	.word	0x40005400
 8000998:	00061a80 	.word	0x00061a80
 800099c:	080098c4 	.word	0x080098c4
 80009a0:	20000518 	.word	0x20000518
 80009a4:	20000416 	.word	0x20000416
 80009a8:	20000314 	.word	0x20000314
 80009ac:	20000418 	.word	0x20000418
 80009b0:	20000000 	.word	0x20000000
 80009b4:	2000051c 	.word	0x2000051c
 80009b8:	20000520 	.word	0x20000520
 80009bc:	2000041a 	.word	0x2000041a
 80009c0:	20000442 	.word	0x20000442
 80009c4:	2000046a 	.word	0x2000046a
 80009c8:	2000011c 	.word	0x2000011c
 80009cc:	080098d0 	.word	0x080098d0
 80009d0:	080098d8 	.word	0x080098d8
			  }
			  else if (aRxBuffer[0]==6){
 80009d4:	4b8e      	ldr	r3, [pc, #568]	; (8000c10 <main+0x414>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b06      	cmp	r3, #6
 80009da:	d102      	bne.n	80009e2 <main+0x1e6>
				  printf("R3: ");
 80009dc:	488d      	ldr	r0, [pc, #564]	; (8000c14 <main+0x418>)
 80009de:	f007 ff21 	bl	8008824 <iprintf>
			  }
			  printf("%ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld;\r\n",
 80009e2:	4b8b      	ldr	r3, [pc, #556]	; (8000c10 <main+0x414>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	4b89      	ldr	r3, [pc, #548]	; (8000c10 <main+0x414>)
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	60ba      	str	r2, [r7, #8]
 80009ee:	4b88      	ldr	r3, [pc, #544]	; (8000c10 <main+0x414>)
 80009f0:	68d8      	ldr	r0, [r3, #12]
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	4b86      	ldr	r3, [pc, #536]	; (8000c10 <main+0x414>)
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	4a85      	ldr	r2, [pc, #532]	; (8000c10 <main+0x414>)
 80009fa:	6952      	ldr	r2, [r2, #20]
 80009fc:	4984      	ldr	r1, [pc, #528]	; (8000c10 <main+0x414>)
 80009fe:	6989      	ldr	r1, [r1, #24]
 8000a00:	4883      	ldr	r0, [pc, #524]	; (8000c10 <main+0x414>)
 8000a02:	69c0      	ldr	r0, [r0, #28]
 8000a04:	4c82      	ldr	r4, [pc, #520]	; (8000c10 <main+0x414>)
 8000a06:	6a24      	ldr	r4, [r4, #32]
 8000a08:	4d81      	ldr	r5, [pc, #516]	; (8000c10 <main+0x414>)
 8000a0a:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8000a0c:	4e80      	ldr	r6, [pc, #512]	; (8000c10 <main+0x414>)
 8000a0e:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8000a10:	9606      	str	r6, [sp, #24]
 8000a12:	9505      	str	r5, [sp, #20]
 8000a14:	9404      	str	r4, [sp, #16]
 8000a16:	9003      	str	r0, [sp, #12]
 8000a18:	9102      	str	r1, [sp, #8]
 8000a1a:	9201      	str	r2, [sp, #4]
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	68f9      	ldr	r1, [r7, #12]
 8000a24:	487c      	ldr	r0, [pc, #496]	; (8000c18 <main+0x41c>)
 8000a26:	f007 fefd 	bl	8008824 <iprintf>
		  for (uint8_t i=4; i<=6; i++){
 8000a2a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000a2e:	3301      	adds	r3, #1
 8000a30:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8000a34:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000a38:	2b06      	cmp	r3, #6
 8000a3a:	d991      	bls.n	8000960 <main+0x164>
					 aRxBuffer[1], aRxBuffer[2], aRxBuffer[3],
					 aRxBuffer[4], aRxBuffer[5], aRxBuffer[6],
					 aRxBuffer[7], aRxBuffer[8], aRxBuffer[9], aRxBuffer[10]);
		  }
		  printf("END\r\n");
 8000a3c:	4877      	ldr	r0, [pc, #476]	; (8000c1c <main+0x420>)
 8000a3e:	f007 ff77 	bl	8008930 <puts>
		  bitFlag &= ~BFLAG_I2C_RAA;
 8000a42:	4b77      	ldr	r3, [pc, #476]	; (8000c20 <main+0x424>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	f023 0302 	bic.w	r3, r3, #2
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	4b74      	ldr	r3, [pc, #464]	; (8000c20 <main+0x424>)
 8000a4e:	801a      	strh	r2, [r3, #0]
		  #endif
  	  }

  	  /* Command to receive from I2C */
  	  if (bitFlag & BFLAG_I2C_RAS)			//Read ASCII Slave
 8000a50:	4b73      	ldr	r3, [pc, #460]	; (8000c20 <main+0x424>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	f000 80c3 	beq.w	8000be4 <main+0x3e8>
  	  {
			#ifdef MASTER_BOARD

			I2C_Master_Receive();
 8000a5e:	f7ff fe69 	bl	8000734 <I2C_Master_Receive>

			// BFLAG_I2C_WAS		WRITE SLAVE
			if (aRxBuffer[0]==1)				//WR1
 8000a62:	4b6b      	ldr	r3, [pc, #428]	; (8000c10 <main+0x414>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d102      	bne.n	8000a70 <main+0x274>
			{
				printf("Send RES1: \r\n");
 8000a6a:	486e      	ldr	r0, [pc, #440]	; (8000c24 <main+0x428>)
 8000a6c:	f007 ff60 	bl	8008930 <puts>
			}
			if (aRxBuffer[0]==2)				//WR2
 8000a70:	4b67      	ldr	r3, [pc, #412]	; (8000c10 <main+0x414>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d102      	bne.n	8000a7e <main+0x282>
			{
				printf("Send RES2: \r\n");
 8000a78:	486b      	ldr	r0, [pc, #428]	; (8000c28 <main+0x42c>)
 8000a7a:	f007 ff59 	bl	8008930 <puts>
			}
			if (aRxBuffer[0]==3)				//WR3
 8000a7e:	4b64      	ldr	r3, [pc, #400]	; (8000c10 <main+0x414>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d102      	bne.n	8000a8c <main+0x290>
			{
				printf("Send RES3: \r\n");
 8000a86:	4869      	ldr	r0, [pc, #420]	; (8000c2c <main+0x430>)
 8000a88:	f007 ff52 	bl	8008930 <puts>
			}

			if (aRxBuffer[0]<4)				// Compare TxBuffer and Rx Buffer
 8000a8c:	4b60      	ldr	r3, [pc, #384]	; (8000c10 <main+0x414>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	dc11      	bgt.n	8000ab8 <main+0x2bc>
			{
				/*##-6- Compare the sent and received buffers ##############################*/
				if(Buffercmp(aTxBuffer,aRxBuffer, 11)){
 8000a94:	220b      	movs	r2, #11
 8000a96:	495e      	ldr	r1, [pc, #376]	; (8000c10 <main+0x414>)
 8000a98:	4865      	ldr	r0, [pc, #404]	; (8000c30 <main+0x434>)
 8000a9a:	f7ff fd8b 	bl	80005b4 <Buffercmp>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d002      	beq.n	8000aaa <main+0x2ae>
					printf("Buffer compare Fail!!!\r\n\n");
 8000aa4:	4863      	ldr	r0, [pc, #396]	; (8000c34 <main+0x438>)
 8000aa6:	f007 ff43 	bl	8008930 <puts>
				}
				bitFlag 	&= ~BFLAG_I2C_WAS;
 8000aaa:	4b5d      	ldr	r3, [pc, #372]	; (8000c20 <main+0x424>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	f023 0320 	bic.w	r3, r3, #32
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	4b5a      	ldr	r3, [pc, #360]	; (8000c20 <main+0x424>)
 8000ab6:	801a      	strh	r2, [r3, #0]
			}


			// BFLAG_I2C_RAS		READ SLAVE
			if (aRxBuffer[0]==4)				//RD1
 8000ab8:	4b55      	ldr	r3, [pc, #340]	; (8000c10 <main+0x414>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d102      	bne.n	8000ac6 <main+0x2ca>
			{
				printf("Read RES1: ");
 8000ac0:	485d      	ldr	r0, [pc, #372]	; (8000c38 <main+0x43c>)
 8000ac2:	f007 feaf 	bl	8008824 <iprintf>
			}
			if (aRxBuffer[0]==5)				//RD2
 8000ac6:	4b52      	ldr	r3, [pc, #328]	; (8000c10 <main+0x414>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b05      	cmp	r3, #5
 8000acc:	d102      	bne.n	8000ad4 <main+0x2d8>
			{
				printf("READ RES2: ");
 8000ace:	485b      	ldr	r0, [pc, #364]	; (8000c3c <main+0x440>)
 8000ad0:	f007 fea8 	bl	8008824 <iprintf>
			}
			if (aRxBuffer[0]==6)				//RD3
 8000ad4:	4b4e      	ldr	r3, [pc, #312]	; (8000c10 <main+0x414>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b06      	cmp	r3, #6
 8000ada:	d102      	bne.n	8000ae2 <main+0x2e6>
			{
				printf("READ RES3: ");
 8000adc:	4858      	ldr	r0, [pc, #352]	; (8000c40 <main+0x444>)
 8000ade:	f007 fea1 	bl	8008824 <iprintf>
			}

			if ((aRxBuffer[0]>=4) && (aRxBuffer[0]<=6)){				// Print the variable value
 8000ae2:	4b4b      	ldr	r3, [pc, #300]	; (8000c10 <main+0x414>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	dd2e      	ble.n	8000b48 <main+0x34c>
 8000aea:	4b49      	ldr	r3, [pc, #292]	; (8000c10 <main+0x414>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	dc2a      	bgt.n	8000b48 <main+0x34c>
				printf("%ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld\r\n\n",
 8000af2:	4b47      	ldr	r3, [pc, #284]	; (8000c10 <main+0x414>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b45      	ldr	r3, [pc, #276]	; (8000c10 <main+0x414>)
 8000afa:	689a      	ldr	r2, [r3, #8]
 8000afc:	60ba      	str	r2, [r7, #8]
 8000afe:	4b44      	ldr	r3, [pc, #272]	; (8000c10 <main+0x414>)
 8000b00:	68d8      	ldr	r0, [r3, #12]
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	4b42      	ldr	r3, [pc, #264]	; (8000c10 <main+0x414>)
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	4a41      	ldr	r2, [pc, #260]	; (8000c10 <main+0x414>)
 8000b0a:	6952      	ldr	r2, [r2, #20]
 8000b0c:	4940      	ldr	r1, [pc, #256]	; (8000c10 <main+0x414>)
 8000b0e:	6989      	ldr	r1, [r1, #24]
 8000b10:	483f      	ldr	r0, [pc, #252]	; (8000c10 <main+0x414>)
 8000b12:	69c0      	ldr	r0, [r0, #28]
 8000b14:	4c3e      	ldr	r4, [pc, #248]	; (8000c10 <main+0x414>)
 8000b16:	6a24      	ldr	r4, [r4, #32]
 8000b18:	4d3d      	ldr	r5, [pc, #244]	; (8000c10 <main+0x414>)
 8000b1a:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8000b1c:	4e3c      	ldr	r6, [pc, #240]	; (8000c10 <main+0x414>)
 8000b1e:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8000b20:	9606      	str	r6, [sp, #24]
 8000b22:	9505      	str	r5, [sp, #20]
 8000b24:	9404      	str	r4, [sp, #16]
 8000b26:	9003      	str	r0, [sp, #12]
 8000b28:	9102      	str	r1, [sp, #8]
 8000b2a:	9201      	str	r2, [sp, #4]
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	68f9      	ldr	r1, [r7, #12]
 8000b34:	4843      	ldr	r0, [pc, #268]	; (8000c44 <main+0x448>)
 8000b36:	f007 fe75 	bl	8008824 <iprintf>
						aRxBuffer[1], aRxBuffer[2], aRxBuffer[3],
						aRxBuffer[4], aRxBuffer[5], aRxBuffer[6],
						aRxBuffer[7], aRxBuffer[8], aRxBuffer[9], aRxBuffer[10]);
				bitFlag 	&= ~BFLAG_I2C_WAS;
 8000b3a:	4b39      	ldr	r3, [pc, #228]	; (8000c20 <main+0x424>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	f023 0320 	bic.w	r3, r3, #32
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	4b36      	ldr	r3, [pc, #216]	; (8000c20 <main+0x424>)
 8000b46:	801a      	strh	r2, [r3, #0]
			}

			// BFLAG_I2C_RAA			Trigger default input at form
			if (aRxBuffer[0]==7)				//WRA
 8000b48:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <main+0x414>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b07      	cmp	r3, #7
 8000b4e:	d105      	bne.n	8000b5c <main+0x360>
			{
				Set_aTxBuffer(8, temp, 10, CFG_LENGTH*sizeof(temp[0]));
 8000b50:	2328      	movs	r3, #40	; 0x28
 8000b52:	220a      	movs	r2, #10
 8000b54:	493c      	ldr	r1, [pc, #240]	; (8000c48 <main+0x44c>)
 8000b56:	2008      	movs	r0, #8
 8000b58:	f7ff fe0e 	bl	8000778 <Set_aTxBuffer>
			}
			if (aRxBuffer[0]==8)
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <main+0x414>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b08      	cmp	r3, #8
 8000b62:	d105      	bne.n	8000b70 <main+0x374>
			{
				Set_aTxBuffer(9, temp, 20, CFG_LENGTH*sizeof(temp[0]));
 8000b64:	2328      	movs	r3, #40	; 0x28
 8000b66:	2214      	movs	r2, #20
 8000b68:	4937      	ldr	r1, [pc, #220]	; (8000c48 <main+0x44c>)
 8000b6a:	2009      	movs	r0, #9
 8000b6c:	f7ff fe04 	bl	8000778 <Set_aTxBuffer>
			}
			if (aRxBuffer[0]==9)
 8000b70:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <main+0x414>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b09      	cmp	r3, #9
 8000b76:	d106      	bne.n	8000b86 <main+0x38a>
			{
				bitFlag &= ~BFLAG_I2C_WAA;
 8000b78:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <main+0x424>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	f023 0310 	bic.w	r3, r3, #16
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <main+0x424>)
 8000b84:	801a      	strh	r2, [r3, #0]
			}

			if (aRxBuffer[0]>=7)				// Print the variable value
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <main+0x414>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	dd23      	ble.n	8000bd6 <main+0x3da>
			{
				printf("%ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld\r\n\n",
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <main+0x414>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <main+0x414>)
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	60ba      	str	r2, [r7, #8]
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <main+0x414>)
 8000b9c:	68d8      	ldr	r0, [r3, #12]
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <main+0x414>)
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	4a1a      	ldr	r2, [pc, #104]	; (8000c10 <main+0x414>)
 8000ba6:	6952      	ldr	r2, [r2, #20]
 8000ba8:	4919      	ldr	r1, [pc, #100]	; (8000c10 <main+0x414>)
 8000baa:	6989      	ldr	r1, [r1, #24]
 8000bac:	4818      	ldr	r0, [pc, #96]	; (8000c10 <main+0x414>)
 8000bae:	69c0      	ldr	r0, [r0, #28]
 8000bb0:	4c17      	ldr	r4, [pc, #92]	; (8000c10 <main+0x414>)
 8000bb2:	6a24      	ldr	r4, [r4, #32]
 8000bb4:	4d16      	ldr	r5, [pc, #88]	; (8000c10 <main+0x414>)
 8000bb6:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8000bb8:	4e15      	ldr	r6, [pc, #84]	; (8000c10 <main+0x414>)
 8000bba:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8000bbc:	9606      	str	r6, [sp, #24]
 8000bbe:	9505      	str	r5, [sp, #20]
 8000bc0:	9404      	str	r4, [sp, #16]
 8000bc2:	9003      	str	r0, [sp, #12]
 8000bc4:	9102      	str	r1, [sp, #8]
 8000bc6:	9201      	str	r2, [sp, #4]
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	68f9      	ldr	r1, [r7, #12]
 8000bd0:	481c      	ldr	r0, [pc, #112]	; (8000c44 <main+0x448>)
 8000bd2:	f007 fe27 	bl	8008824 <iprintf>
						aRxBuffer[4], aRxBuffer[5], aRxBuffer[6],
						aRxBuffer[7], aRxBuffer[8], aRxBuffer[9], aRxBuffer[10]);
			}

			/* Reset bit 1 bitflag */
			bitFlag 	&= ~BFLAG_I2C_RAS;
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <main+0x424>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	f023 0308 	bic.w	r3, r3, #8
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <main+0x424>)
 8000be2:	801a      	strh	r2, [r3, #0]
			#endif
	 }

	 if (bitFlag & BFLAG_I2C_RDB)
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <main+0x424>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d077      	beq.n	8000ce0 <main+0x4e4>
	 {
		 #ifdef MASTER_BOARD

			 printf("Code: %ld\nTX integer: %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld\r\n",
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <main+0x434>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <main+0x434>)
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	60ba      	str	r2, [r7, #8]
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <main+0x434>)
 8000bfe:	6898      	ldr	r0, [r3, #8]
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <main+0x434>)
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <main+0x434>)
 8000c08:	6912      	ldr	r2, [r2, #16]
 8000c0a:	4909      	ldr	r1, [pc, #36]	; (8000c30 <main+0x434>)
 8000c0c:	6949      	ldr	r1, [r1, #20]
 8000c0e:	e01d      	b.n	8000c4c <main+0x450>
 8000c10:	2000051c 	.word	0x2000051c
 8000c14:	080098e0 	.word	0x080098e0
 8000c18:	080098e8 	.word	0x080098e8
 8000c1c:	0800991c 	.word	0x0800991c
 8000c20:	20000518 	.word	0x20000518
 8000c24:	08009924 	.word	0x08009924
 8000c28:	08009934 	.word	0x08009934
 8000c2c:	08009944 	.word	0x08009944
 8000c30:	20000000 	.word	0x20000000
 8000c34:	08009954 	.word	0x08009954
 8000c38:	08009970 	.word	0x08009970
 8000c3c:	0800997c 	.word	0x0800997c
 8000c40:	08009988 	.word	0x08009988
 8000c44:	08009994 	.word	0x08009994
 8000c48:	20000548 	.word	0x20000548
 8000c4c:	489e      	ldr	r0, [pc, #632]	; (8000ec8 <main+0x6cc>)
 8000c4e:	6980      	ldr	r0, [r0, #24]
 8000c50:	4c9d      	ldr	r4, [pc, #628]	; (8000ec8 <main+0x6cc>)
 8000c52:	69e4      	ldr	r4, [r4, #28]
 8000c54:	603c      	str	r4, [r7, #0]
 8000c56:	4d9c      	ldr	r5, [pc, #624]	; (8000ec8 <main+0x6cc>)
 8000c58:	6a2d      	ldr	r5, [r5, #32]
 8000c5a:	4e9b      	ldr	r6, [pc, #620]	; (8000ec8 <main+0x6cc>)
 8000c5c:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8000c5e:	4c9a      	ldr	r4, [pc, #616]	; (8000ec8 <main+0x6cc>)
 8000c60:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8000c62:	9407      	str	r4, [sp, #28]
 8000c64:	9606      	str	r6, [sp, #24]
 8000c66:	9505      	str	r5, [sp, #20]
 8000c68:	683c      	ldr	r4, [r7, #0]
 8000c6a:	9404      	str	r4, [sp, #16]
 8000c6c:	9003      	str	r0, [sp, #12]
 8000c6e:	9102      	str	r1, [sp, #8]
 8000c70:	9201      	str	r2, [sp, #4]
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	68f9      	ldr	r1, [r7, #12]
 8000c7a:	4894      	ldr	r0, [pc, #592]	; (8000ecc <main+0x6d0>)
 8000c7c:	f007 fdd2 	bl	8008824 <iprintf>
					 aTxBuffer[0], aTxBuffer[1], aTxBuffer[2], aTxBuffer[3],
					 aTxBuffer[4], aTxBuffer[5], aTxBuffer[6],
					 aTxBuffer[7], aTxBuffer[8], aTxBuffer[9], aTxBuffer[10]);
			 printf("Code: %ld\nRX integer: %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld; %ld\r\n\n",
 8000c80:	4b93      	ldr	r3, [pc, #588]	; (8000ed0 <main+0x6d4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b92      	ldr	r3, [pc, #584]	; (8000ed0 <main+0x6d4>)
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	60ba      	str	r2, [r7, #8]
 8000c8c:	4b90      	ldr	r3, [pc, #576]	; (8000ed0 <main+0x6d4>)
 8000c8e:	6898      	ldr	r0, [r3, #8]
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	4b8f      	ldr	r3, [pc, #572]	; (8000ed0 <main+0x6d4>)
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	4a8e      	ldr	r2, [pc, #568]	; (8000ed0 <main+0x6d4>)
 8000c98:	6912      	ldr	r2, [r2, #16]
 8000c9a:	498d      	ldr	r1, [pc, #564]	; (8000ed0 <main+0x6d4>)
 8000c9c:	6949      	ldr	r1, [r1, #20]
 8000c9e:	488c      	ldr	r0, [pc, #560]	; (8000ed0 <main+0x6d4>)
 8000ca0:	6980      	ldr	r0, [r0, #24]
 8000ca2:	4c8b      	ldr	r4, [pc, #556]	; (8000ed0 <main+0x6d4>)
 8000ca4:	69e4      	ldr	r4, [r4, #28]
 8000ca6:	603c      	str	r4, [r7, #0]
 8000ca8:	4d89      	ldr	r5, [pc, #548]	; (8000ed0 <main+0x6d4>)
 8000caa:	6a2d      	ldr	r5, [r5, #32]
 8000cac:	4e88      	ldr	r6, [pc, #544]	; (8000ed0 <main+0x6d4>)
 8000cae:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8000cb0:	4c87      	ldr	r4, [pc, #540]	; (8000ed0 <main+0x6d4>)
 8000cb2:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8000cb4:	9407      	str	r4, [sp, #28]
 8000cb6:	9606      	str	r6, [sp, #24]
 8000cb8:	9505      	str	r5, [sp, #20]
 8000cba:	683c      	ldr	r4, [r7, #0]
 8000cbc:	9404      	str	r4, [sp, #16]
 8000cbe:	9003      	str	r0, [sp, #12]
 8000cc0:	9102      	str	r1, [sp, #8]
 8000cc2:	9201      	str	r2, [sp, #4]
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	68f9      	ldr	r1, [r7, #12]
 8000ccc:	4881      	ldr	r0, [pc, #516]	; (8000ed4 <main+0x6d8>)
 8000cce:	f007 fda9 	bl	8008824 <iprintf>
					 aRxBuffer[0], aRxBuffer[1], aRxBuffer[2], aRxBuffer[3],
					 aRxBuffer[4], aRxBuffer[5], aRxBuffer[6],
					 aRxBuffer[7], aRxBuffer[8], aRxBuffer[9], aRxBuffer[10]);

			 bitFlag 	&= ~BFLAG_I2C_RDB;
 8000cd2:	4b81      	ldr	r3, [pc, #516]	; (8000ed8 <main+0x6dc>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	f023 0304 	bic.w	r3, r3, #4
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b7e      	ldr	r3, [pc, #504]	; (8000ed8 <main+0x6dc>)
 8000cde:	801a      	strh	r2, [r3, #0]
		 #endif
	 }

  	  /* Command to WRITE or sending I2C */
  	  if ((bitFlag & BFLAG_I2C_WAS) || (bitFlag & BFLAG_I2C_WAA)) {
 8000ce0:	4b7d      	ldr	r3, [pc, #500]	; (8000ed8 <main+0x6dc>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	f003 0320 	and.w	r3, r3, #32
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d105      	bne.n	8000cf8 <main+0x4fc>
 8000cec:	4b7a      	ldr	r3, [pc, #488]	; (8000ed8 <main+0x6dc>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	f003 0310 	and.w	r3, r3, #16
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d008      	beq.n	8000d0a <main+0x50e>
	  	  #ifdef MASTER_BOARD

  		  I2C_Master_Transmit();
 8000cf8:	f7ff fcfa 	bl	80006f0 <I2C_Master_Transmit>

		  bitFlag |= BFLAG_I2C_RAS;
 8000cfc:	4b76      	ldr	r3, [pc, #472]	; (8000ed8 <main+0x6dc>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	f043 0308 	orr.w	r3, r3, #8
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b74      	ldr	r3, [pc, #464]	; (8000ed8 <main+0x6dc>)
 8000d08:	801a      	strh	r2, [r3, #0]
		  /* Reset bit 2 bitflag ada di bagian BFLAG_I2C_RD0 */
	  	  #endif
  	 }

  	 if((bitFlag & BFLAG_I2C_WBS) || (bitFlag & BFLAG_I2C_WBA))
 8000d0a:	4b73      	ldr	r3, [pc, #460]	; (8000ed8 <main+0x6dc>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d105      	bne.n	8000d22 <main+0x526>
 8000d16:	4b70      	ldr	r3, [pc, #448]	; (8000ed8 <main+0x6dc>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d008      	beq.n	8000d34 <main+0x538>
  	 {
		 #ifdef MASTER_BOARD

  		 I2C_Master_Transmit();
 8000d22:	f7ff fce5 	bl	80006f0 <I2C_Master_Transmit>

  		 bitFlag |= BFLAG_I2C_RBS;
 8000d26:	4b6c      	ldr	r3, [pc, #432]	; (8000ed8 <main+0x6dc>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	4b69      	ldr	r3, [pc, #420]	; (8000ed8 <main+0x6dc>)
 8000d32:	801a      	strh	r2, [r3, #0]
 	 	 #endif
  	 }

  	 if (bitFlag & BFLAG_I2C_RBS)
 8000d34:	4b68      	ldr	r3, [pc, #416]	; (8000ed8 <main+0x6dc>)
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f43f ad95 	beq.w	800086c <main+0x70>
	 {
  		 #ifdef MASTER_BOARD

  		 I2C_Master_Receive();
 8000d42:	f7ff fcf7 	bl	8000734 <I2C_Master_Receive>


		 // BFLAG_I2C_WAS		WRITE SLAVE
		 if (aRxBuffer[0]==1)				//WR1
 8000d46:	4b62      	ldr	r3, [pc, #392]	; (8000ed0 <main+0x6d4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d10d      	bne.n	8000d6a <main+0x56e>
		 {
			 char send[] = {0x14, 0x15,
 8000d4e:	4b63      	ldr	r3, [pc, #396]	; (8000edc <main+0x6e0>)
 8000d50:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000d54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d56:	c407      	stmia	r4!, {r0, r1, r2}
 8000d58:	8023      	strh	r3, [r4, #0]
				  'S', 'E', 'N', 'D', ' ', 'R', 'E', 'S', '1', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 8000d5a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d62:	220e      	movs	r2, #14
 8000d64:	485e      	ldr	r0, [pc, #376]	; (8000ee0 <main+0x6e4>)
 8000d66:	f006 faf6 	bl	8007356 <HAL_UART_Transmit>
		 }
		 if (aRxBuffer[0]==2)				//WR2
 8000d6a:	4b59      	ldr	r3, [pc, #356]	; (8000ed0 <main+0x6d4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d10d      	bne.n	8000d8e <main+0x592>
		 {
			 char send[] = {0x14, 0x15,
 8000d72:	4b5c      	ldr	r3, [pc, #368]	; (8000ee4 <main+0x6e8>)
 8000d74:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000d78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d7a:	c407      	stmia	r4!, {r0, r1, r2}
 8000d7c:	8023      	strh	r3, [r4, #0]
				  'S', 'E', 'N', 'D', ' ', 'R', 'E', 'S', '2', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 8000d7e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d86:	220e      	movs	r2, #14
 8000d88:	4855      	ldr	r0, [pc, #340]	; (8000ee0 <main+0x6e4>)
 8000d8a:	f006 fae4 	bl	8007356 <HAL_UART_Transmit>
		 }
		 if (aRxBuffer[0]==3)				//WR3
 8000d8e:	4b50      	ldr	r3, [pc, #320]	; (8000ed0 <main+0x6d4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d10d      	bne.n	8000db2 <main+0x5b6>
		 {
			 char send[] = {0x14, 0x15,
 8000d96:	4b54      	ldr	r3, [pc, #336]	; (8000ee8 <main+0x6ec>)
 8000d98:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000d9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d9e:	c407      	stmia	r4!, {r0, r1, r2}
 8000da0:	8023      	strh	r3, [r4, #0]
				  'S', 'E', 'N', 'D', ' ', 'R', 'E', 'S', '3', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 8000da2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000da6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000daa:	220e      	movs	r2, #14
 8000dac:	484c      	ldr	r0, [pc, #304]	; (8000ee0 <main+0x6e4>)
 8000dae:	f006 fad2 	bl	8007356 <HAL_UART_Transmit>
		 }

		 if (aRxBuffer[0]<4)				// Compare TxBuffer and Rx Buffer
 8000db2:	4b47      	ldr	r3, [pc, #284]	; (8000ed0 <main+0x6d4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	dc20      	bgt.n	8000dfc <main+0x600>
		 {
			 //##-6- Compare the sent and received buffers ##############################
			 if(Buffercmp_Byte(aTxBuffer,aRxBuffer, 11)){
 8000dba:	220b      	movs	r2, #11
 8000dbc:	4944      	ldr	r1, [pc, #272]	; (8000ed0 <main+0x6d4>)
 8000dbe:	4842      	ldr	r0, [pc, #264]	; (8000ec8 <main+0x6cc>)
 8000dc0:	f7ff fc2c 	bl	800061c <Buffercmp_Byte>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d011      	beq.n	8000dee <main+0x5f2>
				 char send[] = {0x14, 0x15,
 8000dca:	4b48      	ldr	r3, [pc, #288]	; (8000eec <main+0x6f0>)
 8000dcc:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000dd0:	461d      	mov	r5, r3
 8000dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dda:	c403      	stmia	r4!, {r0, r1}
 8000ddc:	7022      	strb	r2, [r4, #0]
						 'B','u','f','f','e','r',' ','C','o','m','p','a','r','e',' ','F','a','i','l','!','!',0x0d, 0x0a};
				 HAL_UART_Transmit(&huart2, (uint8_t *)send, 25, 0xFFFF);
 8000dde:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000de6:	2219      	movs	r2, #25
 8000de8:	483d      	ldr	r0, [pc, #244]	; (8000ee0 <main+0x6e4>)
 8000dea:	f006 fab4 	bl	8007356 <HAL_UART_Transmit>
			 }
			 bitFlag 	&= ~BFLAG_I2C_WBS;
 8000dee:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <main+0x6dc>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b37      	ldr	r3, [pc, #220]	; (8000ed8 <main+0x6dc>)
 8000dfa:	801a      	strh	r2, [r3, #0]
		 }


		 // BFLAG_I2C_RAS		READ SLAVE
		 if (aRxBuffer[0]==4)				//RD1
 8000dfc:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <main+0x6d4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d10d      	bne.n	8000e20 <main+0x624>
		 {
			 char send[] = {0x14, 0x15,
 8000e04:	4b3a      	ldr	r3, [pc, #232]	; (8000ef0 <main+0x6f4>)
 8000e06:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e0c:	c407      	stmia	r4!, {r0, r1, r2}
 8000e0e:	8023      	strh	r3, [r4, #0]
				  'R', 'E', 'A', 'D', ' ', 'R', 'E', 'S', '1', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 8000e10:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000e14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e18:	220e      	movs	r2, #14
 8000e1a:	4831      	ldr	r0, [pc, #196]	; (8000ee0 <main+0x6e4>)
 8000e1c:	f006 fa9b 	bl	8007356 <HAL_UART_Transmit>
		 }
		 if (aRxBuffer[0]==5)				//RD2
 8000e20:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <main+0x6d4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	d10d      	bne.n	8000e44 <main+0x648>
		 {
			 char send[] = {0x14, 0x15,
 8000e28:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <main+0x6f8>)
 8000e2a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000e2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e30:	c407      	stmia	r4!, {r0, r1, r2}
 8000e32:	8023      	strh	r3, [r4, #0]
				  'R', 'E', 'A', 'D', ' ', 'R', 'E', 'S', '2', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 8000e34:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e3c:	220e      	movs	r2, #14
 8000e3e:	4828      	ldr	r0, [pc, #160]	; (8000ee0 <main+0x6e4>)
 8000e40:	f006 fa89 	bl	8007356 <HAL_UART_Transmit>
		 }
		 if (aRxBuffer[0]==6)				//RD3
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <main+0x6d4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b06      	cmp	r3, #6
 8000e4a:	d10d      	bne.n	8000e68 <main+0x66c>
		 {
			 char send[] = {0x14, 0x15,
 8000e4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <main+0x6fc>)
 8000e4e:	f107 0414 	add.w	r4, r7, #20
 8000e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e54:	c407      	stmia	r4!, {r0, r1, r2}
 8000e56:	8023      	strh	r3, [r4, #0]
				  'R', 'E', 'A', 'D', ' ', 'R', 'E', 'S', '3', ':', 0x0d, 0x0a};
			 HAL_UART_Transmit(&huart2, (uint8_t *)send, 14, 0xFFFF);
 8000e58:	f107 0114 	add.w	r1, r7, #20
 8000e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e60:	220e      	movs	r2, #14
 8000e62:	481f      	ldr	r0, [pc, #124]	; (8000ee0 <main+0x6e4>)
 8000e64:	f006 fa77 	bl	8007356 <HAL_UART_Transmit>
		 }

		 if ((aRxBuffer[0]>=4) && (aRxBuffer[0]<=6)){				// Print the variable value
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <main+0x6d4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	dd4b      	ble.n	8000f08 <main+0x70c>
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <main+0x6d4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b06      	cmp	r3, #6
 8000e76:	dc47      	bgt.n	8000f08 <main+0x70c>
			 memset (sendStr, 0, STRLENMAX);
 8000e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	481f      	ldr	r0, [pc, #124]	; (8000efc <main+0x700>)
 8000e80:	f007 fcc8 	bl	8008814 <memset>
			 sendStr[0] = 0x12;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <main+0x700>)
 8000e86:	2212      	movs	r2, #18
 8000e88:	701a      	strb	r2, [r3, #0]
			 sendStr[1] = 0x13;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <main+0x700>)
 8000e8c:	2213      	movs	r2, #19
 8000e8e:	705a      	strb	r2, [r3, #1]

			 memcpy(&sendStr[2], &aRxBuffer[1], CFG_LENGTH * sizeof(aRxBuffer[0]));
 8000e90:	2228      	movs	r2, #40	; 0x28
 8000e92:	491b      	ldr	r1, [pc, #108]	; (8000f00 <main+0x704>)
 8000e94:	481b      	ldr	r0, [pc, #108]	; (8000f04 <main+0x708>)
 8000e96:	f007 fcaf 	bl	80087f8 <memcpy>

			 sendStr[42] = 0x0d;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <main+0x700>)
 8000e9c:	220d      	movs	r2, #13
 8000e9e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			 sendStr[43] = 0x0a;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <main+0x700>)
 8000ea4:	220a      	movs	r2, #10
 8000ea6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

			 HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, 44, 0xFFFF);
 8000eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eae:	222c      	movs	r2, #44	; 0x2c
 8000eb0:	4912      	ldr	r1, [pc, #72]	; (8000efc <main+0x700>)
 8000eb2:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <main+0x6e4>)
 8000eb4:	f006 fa4f 	bl	8007356 <HAL_UART_Transmit>

			 bitFlag 	&= ~BFLAG_I2C_WBS;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <main+0x6dc>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <main+0x6dc>)
 8000ec4:	801a      	strh	r2, [r3, #0]
 8000ec6:	e01f      	b.n	8000f08 <main+0x70c>
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	080099c8 	.word	0x080099c8
 8000ed0:	2000051c 	.word	0x2000051c
 8000ed4:	08009a14 	.word	0x08009a14
 8000ed8:	20000518 	.word	0x20000518
 8000edc:	08009a60 	.word	0x08009a60
 8000ee0:	2000011c 	.word	0x2000011c
 8000ee4:	08009a70 	.word	0x08009a70
 8000ee8:	08009a80 	.word	0x08009a80
 8000eec:	08009a90 	.word	0x08009a90
 8000ef0:	08009aac 	.word	0x08009aac
 8000ef4:	08009abc 	.word	0x08009abc
 8000ef8:	08009acc 	.word	0x08009acc
 8000efc:	20000418 	.word	0x20000418
 8000f00:	20000520 	.word	0x20000520
 8000f04:	2000041a 	.word	0x2000041a
		 }

		 // BFLAG_I2C_RBA			Trigger default input at form
		 if (aRxBuffer[0]==7)				//WRA
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <main+0x774>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b07      	cmp	r3, #7
 8000f0e:	d105      	bne.n	8000f1c <main+0x720>
		 {
			 Set_aTxBuffer(8, temp, 10, CFG_LENGTH*sizeof(temp[0]));
 8000f10:	2328      	movs	r3, #40	; 0x28
 8000f12:	220a      	movs	r2, #10
 8000f14:	4917      	ldr	r1, [pc, #92]	; (8000f74 <main+0x778>)
 8000f16:	2008      	movs	r0, #8
 8000f18:	f7ff fc2e 	bl	8000778 <Set_aTxBuffer>
		 }
		 if (aRxBuffer[0]==8)
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <main+0x774>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d105      	bne.n	8000f30 <main+0x734>
		 {
			 Set_aTxBuffer(9, temp, 20, CFG_LENGTH*sizeof(temp[0]));
 8000f24:	2328      	movs	r3, #40	; 0x28
 8000f26:	2214      	movs	r2, #20
 8000f28:	4912      	ldr	r1, [pc, #72]	; (8000f74 <main+0x778>)
 8000f2a:	2009      	movs	r0, #9
 8000f2c:	f7ff fc24 	bl	8000778 <Set_aTxBuffer>
		 }
		 if (aRxBuffer[0]==9)
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <main+0x774>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b09      	cmp	r3, #9
 8000f36:	d113      	bne.n	8000f60 <main+0x764>
		 {
			 sendStr[0] = 0x10;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <main+0x77c>)
 8000f3a:	2210      	movs	r2, #16
 8000f3c:	701a      	strb	r2, [r3, #0]
			 sendStr[1] = 0x12;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <main+0x77c>)
 8000f40:	2212      	movs	r2, #18
 8000f42:	705a      	strb	r2, [r3, #1]

			 HAL_UART_Transmit(&huart2, (uint8_t *)sendStr, 2, 0xFFFF);
 8000f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f48:	2202      	movs	r2, #2
 8000f4a:	490b      	ldr	r1, [pc, #44]	; (8000f78 <main+0x77c>)
 8000f4c:	480b      	ldr	r0, [pc, #44]	; (8000f7c <main+0x780>)
 8000f4e:	f006 fa02 	bl	8007356 <HAL_UART_Transmit>
			 bitFlag &= ~BFLAG_I2C_WBA;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <main+0x784>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <main+0x784>)
 8000f5e:	801a      	strh	r2, [r3, #0]
		 }

		 /* Reset bit 1 bitflag */
		 bitFlag 	&= ~BFLAG_I2C_RBS;
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <main+0x784>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <main+0x784>)
 8000f6c:	801a      	strh	r2, [r3, #0]
  	  if (bitFlag & BFLAG_UART_RCV) {			/* UART Processing*/
 8000f6e:	e47d      	b.n	800086c <main+0x70>
 8000f70:	2000051c 	.word	0x2000051c
 8000f74:	20000548 	.word	0x20000548
 8000f78:	20000418 	.word	0x20000418
 8000f7c:	2000011c 	.word	0x2000011c
 8000f80:	20000518 	.word	0x20000518

08000f84 <HAL_I2C_MasterTxCpltCallback>:
  * @brief  Tx Transfer completed callback / Mengirim data.
  * @param  I2cHandle: I2C handle
  * @note	Turn LED2 on: Jika kirim data berhasil
  ***********************************************************************************/
#ifdef MASTER_BOARD
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 8000f92:	f003 fc2d 	bl	80047f0 <HAL_GPIO_WritePin>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <HAL_I2C_MasterRxCpltCallback>:
  * @brief  Rx Transfer completed callback / Menerima data.
  * @param  I2cHandle: I2C handle
  * @note	Turn LED2 on: Jika menerima data berhasil
  ************************************************************************************/
#ifdef MASTER_BOARD
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2120      	movs	r1, #32
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8000fb2:	f003 fc1d 	bl	80047f0 <HAL_GPIO_WritePin>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <HAL_I2C_ErrorCallback>:



/* @brief  I2C error callbacks
   @param  I2cHandle: I2C handle */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	printf("\r\nI2C ERROR \r\n\n");
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <HAL_I2C_ErrorCallback+0x20>)
 8000fce:	f007 fcaf 	bl	8008930 <puts>
	while(1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <HAL_I2C_ErrorCallback+0x24>)
 8000fd6:	f003 fc24 	bl	8004822 <HAL_GPIO_TogglePin>
		HAL_Delay(20);
 8000fda:	2014      	movs	r0, #20
 8000fdc:	f002 fd2e 	bl	8003a3c <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fe0:	e7f7      	b.n	8000fd2 <HAL_I2C_ErrorCallback+0xe>
 8000fe2:	bf00      	nop
 8000fe4:	08009adc 	.word	0x08009adc
 8000fe8:	40020000 	.word	0x40020000

08000fec <SystemClock_Config>:
	}
}

/* @brief System Clock Configuration */
void SystemClock_Config(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b094      	sub	sp, #80	; 0x50
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	2234      	movs	r2, #52	; 0x34
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f007 fc0a 	bl	8008814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <SystemClock_Config+0xd4>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	4a29      	ldr	r2, [pc, #164]	; (80010c0 <SystemClock_Config+0xd4>)
 800101a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101e:	6413      	str	r3, [r2, #64]	; 0x40
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <SystemClock_Config+0xd4>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800102c:	2300      	movs	r3, #0
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <SystemClock_Config+0xd8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001038:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <SystemClock_Config+0xd8>)
 800103a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <SystemClock_Config+0xd8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.*/
  RCC_OscInitStruct.OscillatorType 		= RCC_OSCILLATORTYPE_HSI;
 800104c:	2302      	movs	r3, #2
 800104e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState 			= RCC_HSI_ON;
 8001050:	2301      	movs	r3, #1
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001054:	2310      	movs	r3, #16
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState 		= RCC_PLL_ON;
 8001058:	2302      	movs	r3, #2
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource 		= RCC_PLLSOURCE_HSI;
 800105c:	2300      	movs	r3, #0
 800105e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM 			= 16;
 8001060:	2310      	movs	r3, #16
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN 			= 336;
 8001064:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001068:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP 			= RCC_PLLP_DIV4;
 800106a:	2304      	movs	r3, #4
 800106c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ 			= 2;
 800106e:	2302      	movs	r3, #2
 8001070:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR 			= 2;
 8001072:	2302      	movs	r3, #2
 8001074:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4618      	mov	r0, r3
 800107c:	f005 fe80 	bl	8006d80 <HAL_RCC_OscConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001086:	f000 f989 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108a:	230f      	movs	r3, #15
 800108c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108e:	2302      	movs	r3, #2
 8001090:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001096:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800109a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	2105      	movs	r1, #5
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 fb20 	bl	80066ec <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0xca>
    Error_Handler();
 80010b2:	f000 f973 	bl	800139c <Error_Handler>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3750      	adds	r7, #80	; 0x50
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000

080010c8 <MX_USART2_UART_Init>:

/* @brief USART2 Initialization Function*/
static void MX_USART2_UART_Init(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  huart2.Instance 			= USART2;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010ce:	4a15      	ldr	r2, [pc, #84]	; (8001124 <MX_USART2_UART_Init+0x5c>)
 80010d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate 		= 115200;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength 	= UART_WORDLENGTH_8B;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits 		= UART_STOPBITS_1;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity 		= UART_PARITY_NONE;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode 			= UART_MODE_TX_RX;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling 	= UART_OVERSAMPLING_16;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_USART2_UART_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK){
 80010fe:	4808      	ldr	r0, [pc, #32]	; (8001120 <MX_USART2_UART_Init+0x58>)
 8001100:	f006 f8dc 	bl	80072bc <HAL_UART_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_USART2_UART_Init+0x46>
    Error_Handler();
 800110a:	f000 f947 	bl	800139c <Error_Handler>
  }

  #ifdef RX_EVENT_CB
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 800110e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001112:	4905      	ldr	r1, [pc, #20]	; (8001128 <MX_USART2_UART_Init+0x60>)
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <MX_USART2_UART_Init+0x58>)
 8001116:	f006 f9e0 	bl	80074da <HAL_UARTEx_ReceiveToIdle_DMA>
  #else
	serial_init();
  #endif
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000011c 	.word	0x2000011c
 8001124:	40004400 	.word	0x40004400
 8001128:	20000214 	.word	0x20000214

0800112c <MX_DMA_Init>:


static void MX_DMA_Init(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_DMA_Init+0x3c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <MX_DMA_Init+0x3c>)
 800113c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_DMA_Init+0x3c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2010      	movs	r0, #16
 8001154:	f002 fd71 	bl	8003c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001158:	2010      	movs	r0, #16
 800115a:	f002 fd8a 	bl	8003c72 <HAL_NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <MX_GPIO_Init>:

/* @brief GPIO Initialization Function*/
static void MX_GPIO_Init(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	4b2d      	ldr	r3, [pc, #180]	; (800123c <MX_GPIO_Init+0xd0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a2c      	ldr	r2, [pc, #176]	; (800123c <MX_GPIO_Init+0xd0>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <MX_GPIO_Init+0xd0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a25      	ldr	r2, [pc, #148]	; (800123c <MX_GPIO_Init+0xd0>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a1e      	ldr	r2, [pc, #120]	; (800123c <MX_GPIO_Init+0xd0>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_GPIO_Init+0xd0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a17      	ldr	r2, [pc, #92]	; (800123c <MX_GPIO_Init+0xd0>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_GPIO_Init+0xd0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2120      	movs	r1, #32
 80011f6:	4812      	ldr	r0, [pc, #72]	; (8001240 <MX_GPIO_Init+0xd4>)
 80011f8:	f003 fafa 	bl	80047f0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin 		= B1_Pin;
 80011fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8001202:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	480c      	ldr	r0, [pc, #48]	; (8001244 <MX_GPIO_Init+0xd8>)
 8001214:	f003 f958 	bl	80044c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin 		= LD2_Pin;
 8001218:	2320      	movs	r3, #32
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_GPIO_Init+0xd4>)
 8001230:	f003 f94a 	bl	80044c8 <HAL_GPIO_Init>
}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020800 	.word	0x40020800

08001248 <uartProcessing>:


void uartProcessing (uint8_t *u8p_buffer, uint16_t u16_size){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
	vShell_cmdParse((char*)u8p_buffer);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f001 ff63 	bl	8003120 <vShell_cmdParse>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <vUAFE_uart_handle>:
/*****************************************************************
 * @name 	vUAFE_uart_handle
 * @brief	handle afe uart data copy
 ****************************************************************/
static void vUAFE_uart_handle(uint16_t Size)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
	uint16_t u16_numData;

	/* Check if number of received data in reception buffer has changed */
	if (Size != u16_oldPos)
 800126e:	4b36      	ldr	r3, [pc, #216]	; (8001348 <vUAFE_uart_handle+0xe4>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	88fa      	ldrh	r2, [r7, #6]
 8001274:	429a      	cmp	r2, r3
 8001276:	d05f      	beq.n	8001338 <vUAFE_uart_handle+0xd4>
	{
		if (Size > u16_oldPos)
 8001278:	4b33      	ldr	r3, [pc, #204]	; (8001348 <vUAFE_uart_handle+0xe4>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	88fa      	ldrh	r2, [r7, #6]
 800127e:	429a      	cmp	r2, r3
 8001280:	d91a      	bls.n	80012b8 <vUAFE_uart_handle+0x54>
		{
			/* Current position is higher than previous one */
			u16_numData = Size - u16_oldPos;
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <vUAFE_uart_handle+0xe4>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	88fa      	ldrh	r2, [r7, #6]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	81fb      	strh	r3, [r7, #14]
			memcpy(&u8arr_uartEvent[u16_lenCnt],&u8arr_eventBuff[u16_oldPos],u16_numData);
 800128c:	4b2f      	ldr	r3, [pc, #188]	; (800134c <vUAFE_uart_handle+0xe8>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <vUAFE_uart_handle+0xec>)
 8001294:	4413      	add	r3, r2
 8001296:	4a2c      	ldr	r2, [pc, #176]	; (8001348 <vUAFE_uart_handle+0xe4>)
 8001298:	8812      	ldrh	r2, [r2, #0]
 800129a:	4611      	mov	r1, r2
 800129c:	4a2d      	ldr	r2, [pc, #180]	; (8001354 <vUAFE_uart_handle+0xf0>)
 800129e:	4411      	add	r1, r2
 80012a0:	89fa      	ldrh	r2, [r7, #14]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f007 faa8 	bl	80087f8 <memcpy>
			u16_lenCnt += u16_numData;
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <vUAFE_uart_handle+0xe8>)
 80012aa:	881a      	ldrh	r2, [r3, #0]
 80012ac:	89fb      	ldrh	r3, [r7, #14]
 80012ae:	4413      	add	r3, r2
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <vUAFE_uart_handle+0xe8>)
 80012b4:	801a      	strh	r2, [r3, #0]
 80012b6:	e02a      	b.n	800130e <vUAFE_uart_handle+0xaa>
		}
		else
		{
			/* End of buffer has been reached */
			u16_numData = UART_BUF_SZ - u16_oldPos;
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <vUAFE_uart_handle+0xe4>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80012c0:	81fb      	strh	r3, [r7, #14]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <vUAFE_uart_handle+0xe8>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b21      	ldr	r3, [pc, #132]	; (8001350 <vUAFE_uart_handle+0xec>)
 80012ca:	4413      	add	r3, r2
					&u8arr_eventBuff[u16_oldPos],
 80012cc:	4a1e      	ldr	r2, [pc, #120]	; (8001348 <vUAFE_uart_handle+0xe4>)
 80012ce:	8812      	ldrh	r2, [r2, #0]
 80012d0:	4611      	mov	r1, r2
 80012d2:	4a20      	ldr	r2, [pc, #128]	; (8001354 <vUAFE_uart_handle+0xf0>)
 80012d4:	4411      	add	r1, r2
			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy data in that remaining space
 80012d6:	89fa      	ldrh	r2, [r7, #14]
 80012d8:	4618      	mov	r0, r3
 80012da:	f007 fa8d 	bl	80087f8 <memcpy>
					u16_numData);

			u16_lenCnt += u16_numData;
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <vUAFE_uart_handle+0xe8>)
 80012e0:	881a      	ldrh	r2, [r3, #0]
 80012e2:	89fb      	ldrh	r3, [r7, #14]
 80012e4:	4413      	add	r3, r2
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <vUAFE_uart_handle+0xe8>)
 80012ea:	801a      	strh	r2, [r3, #0]

			memcpy (&u8arr_uartEvent[u16_lenCnt], 			// copy the remaining data
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <vUAFE_uart_handle+0xe8>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <vUAFE_uart_handle+0xec>)
 80012f4:	4413      	add	r3, r2
 80012f6:	88fa      	ldrh	r2, [r7, #6]
 80012f8:	4916      	ldr	r1, [pc, #88]	; (8001354 <vUAFE_uart_handle+0xf0>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f007 fa7c 	bl	80087f8 <memcpy>
					&u8arr_eventBuff[0],
					Size);

			u16_lenCnt += Size;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <vUAFE_uart_handle+0xe8>)
 8001302:	881a      	ldrh	r2, [r3, #0]
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	4413      	add	r3, r2
 8001308:	b29a      	uxth	r2, r3
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <vUAFE_uart_handle+0xe8>)
 800130c:	801a      	strh	r2, [r3, #0]
		}

		/* Check for ready to process */
		if((u8arr_uartEvent[u16_lenCnt - 1] == '\n')&&(u8arr_uartEvent[u16_lenCnt - 2]== '\r'))
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <vUAFE_uart_handle+0xe8>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	3b01      	subs	r3, #1
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <vUAFE_uart_handle+0xec>)
 8001316:	5cd3      	ldrb	r3, [r2, r3]
 8001318:	2b0a      	cmp	r3, #10
 800131a:	d10d      	bne.n	8001338 <vUAFE_uart_handle+0xd4>
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <vUAFE_uart_handle+0xe8>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	3b02      	subs	r3, #2
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <vUAFE_uart_handle+0xec>)
 8001324:	5cd3      	ldrb	r3, [r2, r3]
 8001326:	2b0d      	cmp	r3, #13
 8001328:	d106      	bne.n	8001338 <vUAFE_uart_handle+0xd4>
		{
			bitFlag |= BFLAG_UART_RCV;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <vUAFE_uart_handle+0xf4>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <vUAFE_uart_handle+0xf4>)
 8001336:	801a      	strh	r2, [r3, #0]
		}

	}

	u16_oldPos = Size;
 8001338:	4a03      	ldr	r2, [pc, #12]	; (8001348 <vUAFE_uart_handle+0xe4>)
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	8013      	strh	r3, [r2, #0]
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000414 	.word	0x20000414
 800134c:	20000416 	.word	0x20000416
 8001350:	20000314 	.word	0x20000314
 8001354:	20000214 	.word	0x20000214
 8001358:	20000518 	.word	0x20000518

0800135c <HAL_UARTEx_RxEventCallback>:
/*****************************************************************
 * @name HAL_UARTEx_RxEventCallback
 * @brief
 ****************************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
	#ifdef RX_EVENT_CB
		if (huart->Instance == USART2)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HAL_UARTEx_RxEventCallback+0x34>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d109      	bne.n	8001386 <HAL_UARTEx_RxEventCallback+0x2a>
		{
			vUAFE_uart_handle(Size);
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff75 	bl	8001264 <vUAFE_uart_handle>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u8arr_eventBuff, UART_BUF_SZ);
 800137a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137e:	4905      	ldr	r1, [pc, #20]	; (8001394 <HAL_UARTEx_RxEventCallback+0x38>)
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001382:	f006 f8aa 	bl	80074da <HAL_UARTEx_ReceiveToIdle_DMA>
		}
	#endif
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40004400 	.word	0x40004400
 8001394:	20000214 	.word	0x20000214
 8001398:	2000011c 	.word	0x2000011c

0800139c <Error_Handler>:


/*******************************************************************
  * @brief  This function is executed in case of error occurrence.
  ******************************************************************/
void Error_Handler(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  printf("\r\nerror handler!!!\r\n");
 80013a0:	4806      	ldr	r0, [pc, #24]	; (80013bc <Error_Handler+0x20>)
 80013a2:	f007 fac5 	bl	8008930 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a6:	b672      	cpsid	i
}
 80013a8:	bf00      	nop
  __disable_irq();

  while (1) {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013aa:	2120      	movs	r1, #32
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <Error_Handler+0x24>)
 80013ae:	f003 fa38 	bl	8004822 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80013b2:	2032      	movs	r0, #50	; 0x32
 80013b4:	f002 fb42 	bl	8003a3c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013b8:	e7f7      	b.n	80013aa <Error_Handler+0xe>
 80013ba:	bf00      	nop
 80013bc:	08009aec 	.word	0x08009aec
 80013c0:	40020000 	.word	0x40020000

080013c4 <serial_init>:
static uint8_t u8arr_uart[UART_BUF_SZ];
static uint8_t u8idx;

/* Public functions definitions */
void serial_init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* initialize serial */
  stdin_init(&hstdin, &huart2, u8arr_buffer, UART_BUF_SZ);
 80013c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013cc:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <serial_init+0x24>)
 80013ce:	4907      	ldr	r1, [pc, #28]	; (80013ec <serial_init+0x28>)
 80013d0:	4807      	ldr	r0, [pc, #28]	; (80013f0 <serial_init+0x2c>)
 80013d2:	f000 f865 	bl	80014a0 <stdin_init>
  stdin_set_callback(&hstdin, stdin_callback);
 80013d6:	4907      	ldr	r1, [pc, #28]	; (80013f4 <serial_init+0x30>)
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <serial_init+0x2c>)
 80013da:	f000 f878 	bl	80014ce <stdin_set_callback>
  stdin_start(&hstdin);
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <serial_init+0x2c>)
 80013e0:	f000 f896 	bl	8001510 <stdin_start>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200005d0 	.word	0x200005d0
 80013ec:	2000011c 	.word	0x2000011c
 80013f0:	200005c0 	.word	0x200005c0
 80013f4:	08001421 	.word	0x08001421

080013f8 <serial_handlerUART>:

void serial_handlerUART(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  stdin_irq_uart(&hstdin);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <serial_handlerUART+0x10>)
 80013fe:	f001 fbf5 	bl	8002bec <stdin_irq_uart>
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200005c0 	.word	0x200005c0

0800140c <serial_handlerDMA>:

void serial_handlerDMA(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  stdin_irq_dma(&hstdin);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <serial_handlerDMA+0x10>)
 8001412:	f000 f8b3 	bl	800157c <stdin_irq_dma>
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200005c0 	.word	0x200005c0

08001420 <stdin_callback>:

/* Private function definitions */
static void stdin_callback(uint8_t *u8p_buffer, uint16_t u16_size)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
	//printf("UART RX Handler\r\n\n");

	memcpy(&u8arr_uart[u8idx], u8p_buffer, u16_size);
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <stdin_callback+0x78>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <stdin_callback+0x7c>)
 8001434:	4413      	add	r3, r2
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4618      	mov	r0, r3
 800143c:	f007 f9dc 	bl	80087f8 <memcpy>
	u8idx += u16_size;
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <stdin_callback+0x78>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4413      	add	r3, r2
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <stdin_callback+0x78>)
 800144e:	701a      	strb	r2, [r3, #0]

	if((u8p_buffer[u16_size - 1] == '\n')&&(u8p_buffer[u16_size - 2]== '\r'))
 8001450:	887b      	ldrh	r3, [r7, #2]
 8001452:	3b01      	subs	r3, #1
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b0a      	cmp	r3, #10
 800145c:	d118      	bne.n	8001490 <stdin_callback+0x70>
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	3b02      	subs	r3, #2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b0d      	cmp	r3, #13
 800146a:	d111      	bne.n	8001490 <stdin_callback+0x70>
	{
		uartProcessing (u8arr_uart, u8idx - 2);
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <stdin_callback+0x78>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	3b02      	subs	r3, #2
 8001474:	b29b      	uxth	r3, r3
 8001476:	4619      	mov	r1, r3
 8001478:	4808      	ldr	r0, [pc, #32]	; (800149c <stdin_callback+0x7c>)
 800147a:	f7ff fee5 	bl	8001248 <uartProcessing>
		memset(u8arr_uart, 0, UART_BUF_SZ);
 800147e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001482:	2100      	movs	r1, #0
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <stdin_callback+0x7c>)
 8001486:	f007 f9c5 	bl	8008814 <memset>
		u8idx = 0;
 800148a:	4b03      	ldr	r3, [pc, #12]	; (8001498 <stdin_callback+0x78>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
	}
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200007d0 	.word	0x200007d0
 800149c:	200006d0 	.word	0x200006d0

080014a0 <stdin_init>:
static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size);

/* Public function implementations
 * --------------------------------------------*/
void stdin_init(stdin_t *in, UART_HandleTypeDef *uart, uint8_t *buffer, uint16_t size)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	807b      	strh	r3, [r7, #2]
  in->huart = uart;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	601a      	str	r2, [r3, #0]
  in->buffer = buffer;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	609a      	str	r2, [r3, #8]
  in->size = size;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	887a      	ldrh	r2, [r7, #2]
 80014be:	819a      	strh	r2, [r3, #12]

  stdin_flush(in);
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f000 f812 	bl	80014ea <stdin_flush>
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <stdin_set_callback>:

void stdin_set_callback(stdin_t *in, stdin_callback_t cb)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
  in->callback = cb;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	605a      	str	r2, [r3, #4]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <stdin_flush>:

void stdin_flush(stdin_t *in)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  memset(in->buffer, 0, in->size);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6898      	ldr	r0, [r3, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	899b      	ldrh	r3, [r3, #12]
 80014fa:	461a      	mov	r2, r3
 80014fc:	2100      	movs	r1, #0
 80014fe:	f007 f989 	bl	8008814 <memset>
  in->pos = 0;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	81da      	strh	r2, [r3, #14]
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <stdin_start>:

HAL_StatusTypeDef stdin_start(stdin_t *in)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Enable interrupts */
  __HAL_UART_ENABLE_IT(in->huart, UART_IT_IDLE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0210 	orr.w	r2, r2, #16
 800152a:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_TC);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0210 	orr.w	r2, r2, #16
 8001542:	601a      	str	r2, [r3, #0]
  __HAL_DMA_ENABLE_IT(HDMA(in), DMA_IT_HT);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0208 	orr.w	r2, r2, #8
 800155a:	601a      	str	r2, [r3, #0]

  /* Start receiving UART in DMA mode */
  status = HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6899      	ldr	r1, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	899b      	ldrh	r3, [r3, #12]
 8001568:	461a      	mov	r2, r3
 800156a:	f005 ff86 	bl	800747a <HAL_UART_Receive_DMA>
 800156e:	4603      	mov	r3, r0
 8001570:	73fb      	strb	r3, [r7, #15]
  return (status);
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <stdin_irq_dma>:
  status = HAL_UART_DMAStop(in->huart);
  return (status);
}

void stdin_irq_dma(stdin_t *in)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Handle HT interrupt */
  if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_HT))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 823c 	beq.w	8001a10 <stdin_irq_dma+0x494>
  {
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_HT_FLAG_INDEX(HDMA(in)));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b7f      	ldr	r3, [pc, #508]	; (80017a0 <stdin_irq_dma+0x224>)
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d978      	bls.n	800169a <stdin_irq_dma+0x11e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a7c      	ldr	r2, [pc, #496]	; (80017a4 <stdin_irq_dma+0x228>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d06d      	beq.n	8001692 <stdin_irq_dma+0x116>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7a      	ldr	r2, [pc, #488]	; (80017a8 <stdin_irq_dma+0x22c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d064      	beq.n	800168e <stdin_irq_dma+0x112>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a77      	ldr	r2, [pc, #476]	; (80017ac <stdin_irq_dma+0x230>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d05b      	beq.n	800168a <stdin_irq_dma+0x10e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a75      	ldr	r2, [pc, #468]	; (80017b0 <stdin_irq_dma+0x234>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d052      	beq.n	8001686 <stdin_irq_dma+0x10a>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a72      	ldr	r2, [pc, #456]	; (80017b4 <stdin_irq_dma+0x238>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d048      	beq.n	8001680 <stdin_irq_dma+0x104>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a70      	ldr	r2, [pc, #448]	; (80017b8 <stdin_irq_dma+0x23c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d03e      	beq.n	800167a <stdin_irq_dma+0xfe>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a6d      	ldr	r2, [pc, #436]	; (80017bc <stdin_irq_dma+0x240>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d034      	beq.n	8001674 <stdin_irq_dma+0xf8>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a6b      	ldr	r2, [pc, #428]	; (80017c0 <stdin_irq_dma+0x244>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d02a      	beq.n	800166e <stdin_irq_dma+0xf2>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a68      	ldr	r2, [pc, #416]	; (80017c4 <stdin_irq_dma+0x248>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d020      	beq.n	8001668 <stdin_irq_dma+0xec>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a66      	ldr	r2, [pc, #408]	; (80017c8 <stdin_irq_dma+0x24c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d016      	beq.n	8001662 <stdin_irq_dma+0xe6>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a63      	ldr	r2, [pc, #396]	; (80017cc <stdin_irq_dma+0x250>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00c      	beq.n	800165c <stdin_irq_dma+0xe0>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a61      	ldr	r2, [pc, #388]	; (80017d0 <stdin_irq_dma+0x254>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d102      	bne.n	8001656 <stdin_irq_dma+0xda>
 8001650:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001654:	e01e      	b.n	8001694 <stdin_irq_dma+0x118>
 8001656:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800165a:	e01b      	b.n	8001694 <stdin_irq_dma+0x118>
 800165c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001660:	e018      	b.n	8001694 <stdin_irq_dma+0x118>
 8001662:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001666:	e015      	b.n	8001694 <stdin_irq_dma+0x118>
 8001668:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800166c:	e012      	b.n	8001694 <stdin_irq_dma+0x118>
 800166e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001672:	e00f      	b.n	8001694 <stdin_irq_dma+0x118>
 8001674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001678:	e00c      	b.n	8001694 <stdin_irq_dma+0x118>
 800167a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167e:	e009      	b.n	8001694 <stdin_irq_dma+0x118>
 8001680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001684:	e006      	b.n	8001694 <stdin_irq_dma+0x118>
 8001686:	2310      	movs	r3, #16
 8001688:	e004      	b.n	8001694 <stdin_irq_dma+0x118>
 800168a:	2310      	movs	r3, #16
 800168c:	e002      	b.n	8001694 <stdin_irq_dma+0x118>
 800168e:	2310      	movs	r3, #16
 8001690:	e000      	b.n	8001694 <stdin_irq_dma+0x118>
 8001692:	2310      	movs	r3, #16
 8001694:	4a4f      	ldr	r2, [pc, #316]	; (80017d4 <stdin_irq_dma+0x258>)
 8001696:	60d3      	str	r3, [r2, #12]
 8001698:	e199      	b.n	80019ce <stdin_irq_dma+0x452>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b4c      	ldr	r3, [pc, #304]	; (80017d8 <stdin_irq_dma+0x25c>)
 80016a6:	429a      	cmp	r2, r3
 80016a8:	f240 8098 	bls.w	80017dc <stdin_irq_dma+0x260>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a3b      	ldr	r2, [pc, #236]	; (80017a4 <stdin_irq_dma+0x228>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d06d      	beq.n	8001796 <stdin_irq_dma+0x21a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a39      	ldr	r2, [pc, #228]	; (80017a8 <stdin_irq_dma+0x22c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d064      	beq.n	8001792 <stdin_irq_dma+0x216>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a36      	ldr	r2, [pc, #216]	; (80017ac <stdin_irq_dma+0x230>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d05b      	beq.n	800178e <stdin_irq_dma+0x212>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a34      	ldr	r2, [pc, #208]	; (80017b0 <stdin_irq_dma+0x234>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d052      	beq.n	800178a <stdin_irq_dma+0x20e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a31      	ldr	r2, [pc, #196]	; (80017b4 <stdin_irq_dma+0x238>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d048      	beq.n	8001784 <stdin_irq_dma+0x208>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a2f      	ldr	r2, [pc, #188]	; (80017b8 <stdin_irq_dma+0x23c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d03e      	beq.n	800177e <stdin_irq_dma+0x202>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a2c      	ldr	r2, [pc, #176]	; (80017bc <stdin_irq_dma+0x240>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d034      	beq.n	8001778 <stdin_irq_dma+0x1fc>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a2a      	ldr	r2, [pc, #168]	; (80017c0 <stdin_irq_dma+0x244>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d02a      	beq.n	8001772 <stdin_irq_dma+0x1f6>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a27      	ldr	r2, [pc, #156]	; (80017c4 <stdin_irq_dma+0x248>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d020      	beq.n	800176c <stdin_irq_dma+0x1f0>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <stdin_irq_dma+0x24c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d016      	beq.n	8001766 <stdin_irq_dma+0x1ea>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a22      	ldr	r2, [pc, #136]	; (80017cc <stdin_irq_dma+0x250>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00c      	beq.n	8001760 <stdin_irq_dma+0x1e4>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a20      	ldr	r2, [pc, #128]	; (80017d0 <stdin_irq_dma+0x254>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d102      	bne.n	800175a <stdin_irq_dma+0x1de>
 8001754:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001758:	e01e      	b.n	8001798 <stdin_irq_dma+0x21c>
 800175a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800175e:	e01b      	b.n	8001798 <stdin_irq_dma+0x21c>
 8001760:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001764:	e018      	b.n	8001798 <stdin_irq_dma+0x21c>
 8001766:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800176a:	e015      	b.n	8001798 <stdin_irq_dma+0x21c>
 800176c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001770:	e012      	b.n	8001798 <stdin_irq_dma+0x21c>
 8001772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001776:	e00f      	b.n	8001798 <stdin_irq_dma+0x21c>
 8001778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800177c:	e00c      	b.n	8001798 <stdin_irq_dma+0x21c>
 800177e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001782:	e009      	b.n	8001798 <stdin_irq_dma+0x21c>
 8001784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001788:	e006      	b.n	8001798 <stdin_irq_dma+0x21c>
 800178a:	2310      	movs	r3, #16
 800178c:	e004      	b.n	8001798 <stdin_irq_dma+0x21c>
 800178e:	2310      	movs	r3, #16
 8001790:	e002      	b.n	8001798 <stdin_irq_dma+0x21c>
 8001792:	2310      	movs	r3, #16
 8001794:	e000      	b.n	8001798 <stdin_irq_dma+0x21c>
 8001796:	2310      	movs	r3, #16
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <stdin_irq_dma+0x258>)
 800179a:	6093      	str	r3, [r2, #8]
 800179c:	e117      	b.n	80019ce <stdin_irq_dma+0x452>
 800179e:	bf00      	nop
 80017a0:	40026458 	.word	0x40026458
 80017a4:	40026010 	.word	0x40026010
 80017a8:	40026410 	.word	0x40026410
 80017ac:	40026070 	.word	0x40026070
 80017b0:	40026470 	.word	0x40026470
 80017b4:	40026028 	.word	0x40026028
 80017b8:	40026428 	.word	0x40026428
 80017bc:	40026088 	.word	0x40026088
 80017c0:	40026488 	.word	0x40026488
 80017c4:	40026040 	.word	0x40026040
 80017c8:	40026440 	.word	0x40026440
 80017cc:	400260a0 	.word	0x400260a0
 80017d0:	400264a0 	.word	0x400264a0
 80017d4:	40026400 	.word	0x40026400
 80017d8:	400260b8 	.word	0x400260b8
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b7c      	ldr	r3, [pc, #496]	; (80019d8 <stdin_irq_dma+0x45c>)
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d978      	bls.n	80018de <stdin_irq_dma+0x362>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a79      	ldr	r2, [pc, #484]	; (80019dc <stdin_irq_dma+0x460>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d06d      	beq.n	80018d6 <stdin_irq_dma+0x35a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a77      	ldr	r2, [pc, #476]	; (80019e0 <stdin_irq_dma+0x464>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d064      	beq.n	80018d2 <stdin_irq_dma+0x356>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a74      	ldr	r2, [pc, #464]	; (80019e4 <stdin_irq_dma+0x468>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d05b      	beq.n	80018ce <stdin_irq_dma+0x352>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a72      	ldr	r2, [pc, #456]	; (80019e8 <stdin_irq_dma+0x46c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d052      	beq.n	80018ca <stdin_irq_dma+0x34e>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a6f      	ldr	r2, [pc, #444]	; (80019ec <stdin_irq_dma+0x470>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d048      	beq.n	80018c4 <stdin_irq_dma+0x348>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a6d      	ldr	r2, [pc, #436]	; (80019f0 <stdin_irq_dma+0x474>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d03e      	beq.n	80018be <stdin_irq_dma+0x342>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a6a      	ldr	r2, [pc, #424]	; (80019f4 <stdin_irq_dma+0x478>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d034      	beq.n	80018b8 <stdin_irq_dma+0x33c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a68      	ldr	r2, [pc, #416]	; (80019f8 <stdin_irq_dma+0x47c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d02a      	beq.n	80018b2 <stdin_irq_dma+0x336>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a65      	ldr	r2, [pc, #404]	; (80019fc <stdin_irq_dma+0x480>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d020      	beq.n	80018ac <stdin_irq_dma+0x330>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a63      	ldr	r2, [pc, #396]	; (8001a00 <stdin_irq_dma+0x484>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d016      	beq.n	80018a6 <stdin_irq_dma+0x32a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a60      	ldr	r2, [pc, #384]	; (8001a04 <stdin_irq_dma+0x488>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00c      	beq.n	80018a0 <stdin_irq_dma+0x324>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a5e      	ldr	r2, [pc, #376]	; (8001a08 <stdin_irq_dma+0x48c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d102      	bne.n	800189a <stdin_irq_dma+0x31e>
 8001894:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001898:	e01e      	b.n	80018d8 <stdin_irq_dma+0x35c>
 800189a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800189e:	e01b      	b.n	80018d8 <stdin_irq_dma+0x35c>
 80018a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018a4:	e018      	b.n	80018d8 <stdin_irq_dma+0x35c>
 80018a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018aa:	e015      	b.n	80018d8 <stdin_irq_dma+0x35c>
 80018ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018b0:	e012      	b.n	80018d8 <stdin_irq_dma+0x35c>
 80018b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018b6:	e00f      	b.n	80018d8 <stdin_irq_dma+0x35c>
 80018b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018bc:	e00c      	b.n	80018d8 <stdin_irq_dma+0x35c>
 80018be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c2:	e009      	b.n	80018d8 <stdin_irq_dma+0x35c>
 80018c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c8:	e006      	b.n	80018d8 <stdin_irq_dma+0x35c>
 80018ca:	2310      	movs	r3, #16
 80018cc:	e004      	b.n	80018d8 <stdin_irq_dma+0x35c>
 80018ce:	2310      	movs	r3, #16
 80018d0:	e002      	b.n	80018d8 <stdin_irq_dma+0x35c>
 80018d2:	2310      	movs	r3, #16
 80018d4:	e000      	b.n	80018d8 <stdin_irq_dma+0x35c>
 80018d6:	2310      	movs	r3, #16
 80018d8:	4a4c      	ldr	r2, [pc, #304]	; (8001a0c <stdin_irq_dma+0x490>)
 80018da:	60d3      	str	r3, [r2, #12]
 80018dc:	e077      	b.n	80019ce <stdin_irq_dma+0x452>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a3d      	ldr	r2, [pc, #244]	; (80019dc <stdin_irq_dma+0x460>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d06d      	beq.n	80019c8 <stdin_irq_dma+0x44c>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a3a      	ldr	r2, [pc, #232]	; (80019e0 <stdin_irq_dma+0x464>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d064      	beq.n	80019c4 <stdin_irq_dma+0x448>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a38      	ldr	r2, [pc, #224]	; (80019e4 <stdin_irq_dma+0x468>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d05b      	beq.n	80019c0 <stdin_irq_dma+0x444>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a35      	ldr	r2, [pc, #212]	; (80019e8 <stdin_irq_dma+0x46c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d052      	beq.n	80019bc <stdin_irq_dma+0x440>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a33      	ldr	r2, [pc, #204]	; (80019ec <stdin_irq_dma+0x470>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d048      	beq.n	80019b6 <stdin_irq_dma+0x43a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a30      	ldr	r2, [pc, #192]	; (80019f0 <stdin_irq_dma+0x474>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d03e      	beq.n	80019b0 <stdin_irq_dma+0x434>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a2e      	ldr	r2, [pc, #184]	; (80019f4 <stdin_irq_dma+0x478>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d034      	beq.n	80019aa <stdin_irq_dma+0x42e>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a2b      	ldr	r2, [pc, #172]	; (80019f8 <stdin_irq_dma+0x47c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d02a      	beq.n	80019a4 <stdin_irq_dma+0x428>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a29      	ldr	r2, [pc, #164]	; (80019fc <stdin_irq_dma+0x480>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d020      	beq.n	800199e <stdin_irq_dma+0x422>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a26      	ldr	r2, [pc, #152]	; (8001a00 <stdin_irq_dma+0x484>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d016      	beq.n	8001998 <stdin_irq_dma+0x41c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a24      	ldr	r2, [pc, #144]	; (8001a04 <stdin_irq_dma+0x488>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00c      	beq.n	8001992 <stdin_irq_dma+0x416>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a21      	ldr	r2, [pc, #132]	; (8001a08 <stdin_irq_dma+0x48c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d102      	bne.n	800198c <stdin_irq_dma+0x410>
 8001986:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800198a:	e01e      	b.n	80019ca <stdin_irq_dma+0x44e>
 800198c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001990:	e01b      	b.n	80019ca <stdin_irq_dma+0x44e>
 8001992:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001996:	e018      	b.n	80019ca <stdin_irq_dma+0x44e>
 8001998:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800199c:	e015      	b.n	80019ca <stdin_irq_dma+0x44e>
 800199e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019a2:	e012      	b.n	80019ca <stdin_irq_dma+0x44e>
 80019a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a8:	e00f      	b.n	80019ca <stdin_irq_dma+0x44e>
 80019aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ae:	e00c      	b.n	80019ca <stdin_irq_dma+0x44e>
 80019b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b4:	e009      	b.n	80019ca <stdin_irq_dma+0x44e>
 80019b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ba:	e006      	b.n	80019ca <stdin_irq_dma+0x44e>
 80019bc:	2310      	movs	r3, #16
 80019be:	e004      	b.n	80019ca <stdin_irq_dma+0x44e>
 80019c0:	2310      	movs	r3, #16
 80019c2:	e002      	b.n	80019ca <stdin_irq_dma+0x44e>
 80019c4:	2310      	movs	r3, #16
 80019c6:	e000      	b.n	80019ca <stdin_irq_dma+0x44e>
 80019c8:	2310      	movs	r3, #16
 80019ca:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <stdin_irq_dma+0x490>)
 80019cc:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f001 f92c 	bl	8002c2c <check_buffer>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));

    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
  }
}
 80019d4:	f001 b8ea 	b.w	8002bac <stdin_irq_dma+0x1630>
 80019d8:	40026058 	.word	0x40026058
 80019dc:	40026010 	.word	0x40026010
 80019e0:	40026410 	.word	0x40026410
 80019e4:	40026070 	.word	0x40026070
 80019e8:	40026470 	.word	0x40026470
 80019ec:	40026028 	.word	0x40026028
 80019f0:	40026428 	.word	0x40026428
 80019f4:	40026088 	.word	0x40026088
 80019f8:	40026488 	.word	0x40026488
 80019fc:	40026040 	.word	0x40026040
 8001a00:	40026440 	.word	0x40026440
 8001a04:	400260a0 	.word	0x400260a0
 8001a08:	400264a0 	.word	0x400264a0
 8001a0c:	40026000 	.word	0x40026000
  else if (__HAL_DMA_GET_IT_SOURCE(HDMA(in), DMA_IT_TC))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 823c 	beq.w	8001e9c <stdin_irq_dma+0x920>
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TC_FLAG_INDEX(HDMA(in)));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b7f      	ldr	r3, [pc, #508]	; (8001c2c <stdin_irq_dma+0x6b0>)
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d978      	bls.n	8001b26 <stdin_irq_dma+0x5aa>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a7c      	ldr	r2, [pc, #496]	; (8001c30 <stdin_irq_dma+0x6b4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d06d      	beq.n	8001b1e <stdin_irq_dma+0x5a2>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a7a      	ldr	r2, [pc, #488]	; (8001c34 <stdin_irq_dma+0x6b8>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d064      	beq.n	8001b1a <stdin_irq_dma+0x59e>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a77      	ldr	r2, [pc, #476]	; (8001c38 <stdin_irq_dma+0x6bc>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d05b      	beq.n	8001b16 <stdin_irq_dma+0x59a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a75      	ldr	r2, [pc, #468]	; (8001c3c <stdin_irq_dma+0x6c0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d052      	beq.n	8001b12 <stdin_irq_dma+0x596>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a72      	ldr	r2, [pc, #456]	; (8001c40 <stdin_irq_dma+0x6c4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d048      	beq.n	8001b0c <stdin_irq_dma+0x590>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a70      	ldr	r2, [pc, #448]	; (8001c44 <stdin_irq_dma+0x6c8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d03e      	beq.n	8001b06 <stdin_irq_dma+0x58a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a6d      	ldr	r2, [pc, #436]	; (8001c48 <stdin_irq_dma+0x6cc>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d034      	beq.n	8001b00 <stdin_irq_dma+0x584>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a6b      	ldr	r2, [pc, #428]	; (8001c4c <stdin_irq_dma+0x6d0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d02a      	beq.n	8001afa <stdin_irq_dma+0x57e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a68      	ldr	r2, [pc, #416]	; (8001c50 <stdin_irq_dma+0x6d4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d020      	beq.n	8001af4 <stdin_irq_dma+0x578>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a66      	ldr	r2, [pc, #408]	; (8001c54 <stdin_irq_dma+0x6d8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d016      	beq.n	8001aee <stdin_irq_dma+0x572>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a63      	ldr	r2, [pc, #396]	; (8001c58 <stdin_irq_dma+0x6dc>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d00c      	beq.n	8001ae8 <stdin_irq_dma+0x56c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a61      	ldr	r2, [pc, #388]	; (8001c5c <stdin_irq_dma+0x6e0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d102      	bne.n	8001ae2 <stdin_irq_dma+0x566>
 8001adc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ae0:	e01e      	b.n	8001b20 <stdin_irq_dma+0x5a4>
 8001ae2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ae6:	e01b      	b.n	8001b20 <stdin_irq_dma+0x5a4>
 8001ae8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001aec:	e018      	b.n	8001b20 <stdin_irq_dma+0x5a4>
 8001aee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001af2:	e015      	b.n	8001b20 <stdin_irq_dma+0x5a4>
 8001af4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001af8:	e012      	b.n	8001b20 <stdin_irq_dma+0x5a4>
 8001afa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001afe:	e00f      	b.n	8001b20 <stdin_irq_dma+0x5a4>
 8001b00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b04:	e00c      	b.n	8001b20 <stdin_irq_dma+0x5a4>
 8001b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b0a:	e009      	b.n	8001b20 <stdin_irq_dma+0x5a4>
 8001b0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b10:	e006      	b.n	8001b20 <stdin_irq_dma+0x5a4>
 8001b12:	2320      	movs	r3, #32
 8001b14:	e004      	b.n	8001b20 <stdin_irq_dma+0x5a4>
 8001b16:	2320      	movs	r3, #32
 8001b18:	e002      	b.n	8001b20 <stdin_irq_dma+0x5a4>
 8001b1a:	2320      	movs	r3, #32
 8001b1c:	e000      	b.n	8001b20 <stdin_irq_dma+0x5a4>
 8001b1e:	2320      	movs	r3, #32
 8001b20:	4a4f      	ldr	r2, [pc, #316]	; (8001c60 <stdin_irq_dma+0x6e4>)
 8001b22:	60d3      	str	r3, [r2, #12]
 8001b24:	e199      	b.n	8001e5a <stdin_irq_dma+0x8de>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b4c      	ldr	r3, [pc, #304]	; (8001c64 <stdin_irq_dma+0x6e8>)
 8001b32:	429a      	cmp	r2, r3
 8001b34:	f240 8098 	bls.w	8001c68 <stdin_irq_dma+0x6ec>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a3b      	ldr	r2, [pc, #236]	; (8001c30 <stdin_irq_dma+0x6b4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d06d      	beq.n	8001c22 <stdin_irq_dma+0x6a6>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a39      	ldr	r2, [pc, #228]	; (8001c34 <stdin_irq_dma+0x6b8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d064      	beq.n	8001c1e <stdin_irq_dma+0x6a2>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a36      	ldr	r2, [pc, #216]	; (8001c38 <stdin_irq_dma+0x6bc>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d05b      	beq.n	8001c1a <stdin_irq_dma+0x69e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a34      	ldr	r2, [pc, #208]	; (8001c3c <stdin_irq_dma+0x6c0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d052      	beq.n	8001c16 <stdin_irq_dma+0x69a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a31      	ldr	r2, [pc, #196]	; (8001c40 <stdin_irq_dma+0x6c4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d048      	beq.n	8001c10 <stdin_irq_dma+0x694>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a2f      	ldr	r2, [pc, #188]	; (8001c44 <stdin_irq_dma+0x6c8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d03e      	beq.n	8001c0a <stdin_irq_dma+0x68e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a2c      	ldr	r2, [pc, #176]	; (8001c48 <stdin_irq_dma+0x6cc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d034      	beq.n	8001c04 <stdin_irq_dma+0x688>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2a      	ldr	r2, [pc, #168]	; (8001c4c <stdin_irq_dma+0x6d0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d02a      	beq.n	8001bfe <stdin_irq_dma+0x682>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <stdin_irq_dma+0x6d4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d020      	beq.n	8001bf8 <stdin_irq_dma+0x67c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a25      	ldr	r2, [pc, #148]	; (8001c54 <stdin_irq_dma+0x6d8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d016      	beq.n	8001bf2 <stdin_irq_dma+0x676>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <stdin_irq_dma+0x6dc>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00c      	beq.n	8001bec <stdin_irq_dma+0x670>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a20      	ldr	r2, [pc, #128]	; (8001c5c <stdin_irq_dma+0x6e0>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d102      	bne.n	8001be6 <stdin_irq_dma+0x66a>
 8001be0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001be4:	e01e      	b.n	8001c24 <stdin_irq_dma+0x6a8>
 8001be6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001bea:	e01b      	b.n	8001c24 <stdin_irq_dma+0x6a8>
 8001bec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bf0:	e018      	b.n	8001c24 <stdin_irq_dma+0x6a8>
 8001bf2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bf6:	e015      	b.n	8001c24 <stdin_irq_dma+0x6a8>
 8001bf8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bfc:	e012      	b.n	8001c24 <stdin_irq_dma+0x6a8>
 8001bfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c02:	e00f      	b.n	8001c24 <stdin_irq_dma+0x6a8>
 8001c04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c08:	e00c      	b.n	8001c24 <stdin_irq_dma+0x6a8>
 8001c0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c0e:	e009      	b.n	8001c24 <stdin_irq_dma+0x6a8>
 8001c10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c14:	e006      	b.n	8001c24 <stdin_irq_dma+0x6a8>
 8001c16:	2320      	movs	r3, #32
 8001c18:	e004      	b.n	8001c24 <stdin_irq_dma+0x6a8>
 8001c1a:	2320      	movs	r3, #32
 8001c1c:	e002      	b.n	8001c24 <stdin_irq_dma+0x6a8>
 8001c1e:	2320      	movs	r3, #32
 8001c20:	e000      	b.n	8001c24 <stdin_irq_dma+0x6a8>
 8001c22:	2320      	movs	r3, #32
 8001c24:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <stdin_irq_dma+0x6e4>)
 8001c26:	6093      	str	r3, [r2, #8]
 8001c28:	e117      	b.n	8001e5a <stdin_irq_dma+0x8de>
 8001c2a:	bf00      	nop
 8001c2c:	40026458 	.word	0x40026458
 8001c30:	40026010 	.word	0x40026010
 8001c34:	40026410 	.word	0x40026410
 8001c38:	40026070 	.word	0x40026070
 8001c3c:	40026470 	.word	0x40026470
 8001c40:	40026028 	.word	0x40026028
 8001c44:	40026428 	.word	0x40026428
 8001c48:	40026088 	.word	0x40026088
 8001c4c:	40026488 	.word	0x40026488
 8001c50:	40026040 	.word	0x40026040
 8001c54:	40026440 	.word	0x40026440
 8001c58:	400260a0 	.word	0x400260a0
 8001c5c:	400264a0 	.word	0x400264a0
 8001c60:	40026400 	.word	0x40026400
 8001c64:	400260b8 	.word	0x400260b8
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b7c      	ldr	r3, [pc, #496]	; (8001e64 <stdin_irq_dma+0x8e8>)
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d978      	bls.n	8001d6a <stdin_irq_dma+0x7ee>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a79      	ldr	r2, [pc, #484]	; (8001e68 <stdin_irq_dma+0x8ec>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d06d      	beq.n	8001d62 <stdin_irq_dma+0x7e6>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a77      	ldr	r2, [pc, #476]	; (8001e6c <stdin_irq_dma+0x8f0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d064      	beq.n	8001d5e <stdin_irq_dma+0x7e2>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a74      	ldr	r2, [pc, #464]	; (8001e70 <stdin_irq_dma+0x8f4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d05b      	beq.n	8001d5a <stdin_irq_dma+0x7de>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a72      	ldr	r2, [pc, #456]	; (8001e74 <stdin_irq_dma+0x8f8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d052      	beq.n	8001d56 <stdin_irq_dma+0x7da>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a6f      	ldr	r2, [pc, #444]	; (8001e78 <stdin_irq_dma+0x8fc>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d048      	beq.n	8001d50 <stdin_irq_dma+0x7d4>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a6d      	ldr	r2, [pc, #436]	; (8001e7c <stdin_irq_dma+0x900>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d03e      	beq.n	8001d4a <stdin_irq_dma+0x7ce>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a6a      	ldr	r2, [pc, #424]	; (8001e80 <stdin_irq_dma+0x904>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d034      	beq.n	8001d44 <stdin_irq_dma+0x7c8>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a68      	ldr	r2, [pc, #416]	; (8001e84 <stdin_irq_dma+0x908>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d02a      	beq.n	8001d3e <stdin_irq_dma+0x7c2>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a65      	ldr	r2, [pc, #404]	; (8001e88 <stdin_irq_dma+0x90c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d020      	beq.n	8001d38 <stdin_irq_dma+0x7bc>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a63      	ldr	r2, [pc, #396]	; (8001e8c <stdin_irq_dma+0x910>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d016      	beq.n	8001d32 <stdin_irq_dma+0x7b6>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a60      	ldr	r2, [pc, #384]	; (8001e90 <stdin_irq_dma+0x914>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00c      	beq.n	8001d2c <stdin_irq_dma+0x7b0>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a5e      	ldr	r2, [pc, #376]	; (8001e94 <stdin_irq_dma+0x918>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d102      	bne.n	8001d26 <stdin_irq_dma+0x7aa>
 8001d20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d24:	e01e      	b.n	8001d64 <stdin_irq_dma+0x7e8>
 8001d26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d2a:	e01b      	b.n	8001d64 <stdin_irq_dma+0x7e8>
 8001d2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d30:	e018      	b.n	8001d64 <stdin_irq_dma+0x7e8>
 8001d32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d36:	e015      	b.n	8001d64 <stdin_irq_dma+0x7e8>
 8001d38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d3c:	e012      	b.n	8001d64 <stdin_irq_dma+0x7e8>
 8001d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d42:	e00f      	b.n	8001d64 <stdin_irq_dma+0x7e8>
 8001d44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d48:	e00c      	b.n	8001d64 <stdin_irq_dma+0x7e8>
 8001d4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d4e:	e009      	b.n	8001d64 <stdin_irq_dma+0x7e8>
 8001d50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d54:	e006      	b.n	8001d64 <stdin_irq_dma+0x7e8>
 8001d56:	2320      	movs	r3, #32
 8001d58:	e004      	b.n	8001d64 <stdin_irq_dma+0x7e8>
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	e002      	b.n	8001d64 <stdin_irq_dma+0x7e8>
 8001d5e:	2320      	movs	r3, #32
 8001d60:	e000      	b.n	8001d64 <stdin_irq_dma+0x7e8>
 8001d62:	2320      	movs	r3, #32
 8001d64:	4a4c      	ldr	r2, [pc, #304]	; (8001e98 <stdin_irq_dma+0x91c>)
 8001d66:	60d3      	str	r3, [r2, #12]
 8001d68:	e077      	b.n	8001e5a <stdin_irq_dma+0x8de>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a3d      	ldr	r2, [pc, #244]	; (8001e68 <stdin_irq_dma+0x8ec>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d06d      	beq.n	8001e54 <stdin_irq_dma+0x8d8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a3a      	ldr	r2, [pc, #232]	; (8001e6c <stdin_irq_dma+0x8f0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d064      	beq.n	8001e50 <stdin_irq_dma+0x8d4>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a38      	ldr	r2, [pc, #224]	; (8001e70 <stdin_irq_dma+0x8f4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d05b      	beq.n	8001e4c <stdin_irq_dma+0x8d0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a35      	ldr	r2, [pc, #212]	; (8001e74 <stdin_irq_dma+0x8f8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d052      	beq.n	8001e48 <stdin_irq_dma+0x8cc>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a33      	ldr	r2, [pc, #204]	; (8001e78 <stdin_irq_dma+0x8fc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d048      	beq.n	8001e42 <stdin_irq_dma+0x8c6>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a30      	ldr	r2, [pc, #192]	; (8001e7c <stdin_irq_dma+0x900>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d03e      	beq.n	8001e3c <stdin_irq_dma+0x8c0>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a2e      	ldr	r2, [pc, #184]	; (8001e80 <stdin_irq_dma+0x904>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d034      	beq.n	8001e36 <stdin_irq_dma+0x8ba>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a2b      	ldr	r2, [pc, #172]	; (8001e84 <stdin_irq_dma+0x908>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d02a      	beq.n	8001e30 <stdin_irq_dma+0x8b4>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a29      	ldr	r2, [pc, #164]	; (8001e88 <stdin_irq_dma+0x90c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d020      	beq.n	8001e2a <stdin_irq_dma+0x8ae>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <stdin_irq_dma+0x910>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d016      	beq.n	8001e24 <stdin_irq_dma+0x8a8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a24      	ldr	r2, [pc, #144]	; (8001e90 <stdin_irq_dma+0x914>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d00c      	beq.n	8001e1e <stdin_irq_dma+0x8a2>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a21      	ldr	r2, [pc, #132]	; (8001e94 <stdin_irq_dma+0x918>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d102      	bne.n	8001e18 <stdin_irq_dma+0x89c>
 8001e12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e16:	e01e      	b.n	8001e56 <stdin_irq_dma+0x8da>
 8001e18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e1c:	e01b      	b.n	8001e56 <stdin_irq_dma+0x8da>
 8001e1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e22:	e018      	b.n	8001e56 <stdin_irq_dma+0x8da>
 8001e24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e28:	e015      	b.n	8001e56 <stdin_irq_dma+0x8da>
 8001e2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e2e:	e012      	b.n	8001e56 <stdin_irq_dma+0x8da>
 8001e30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e34:	e00f      	b.n	8001e56 <stdin_irq_dma+0x8da>
 8001e36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e3a:	e00c      	b.n	8001e56 <stdin_irq_dma+0x8da>
 8001e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e40:	e009      	b.n	8001e56 <stdin_irq_dma+0x8da>
 8001e42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e46:	e006      	b.n	8001e56 <stdin_irq_dma+0x8da>
 8001e48:	2320      	movs	r3, #32
 8001e4a:	e004      	b.n	8001e56 <stdin_irq_dma+0x8da>
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	e002      	b.n	8001e56 <stdin_irq_dma+0x8da>
 8001e50:	2320      	movs	r3, #32
 8001e52:	e000      	b.n	8001e56 <stdin_irq_dma+0x8da>
 8001e54:	2320      	movs	r3, #32
 8001e56:	4a10      	ldr	r2, [pc, #64]	; (8001e98 <stdin_irq_dma+0x91c>)
 8001e58:	6093      	str	r3, [r2, #8]
    check_buffer(in);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fee6 	bl	8002c2c <check_buffer>
}
 8001e60:	f000 bea4 	b.w	8002bac <stdin_irq_dma+0x1630>
 8001e64:	40026058 	.word	0x40026058
 8001e68:	40026010 	.word	0x40026010
 8001e6c:	40026410 	.word	0x40026410
 8001e70:	40026070 	.word	0x40026070
 8001e74:	40026470 	.word	0x40026470
 8001e78:	40026028 	.word	0x40026028
 8001e7c:	40026428 	.word	0x40026428
 8001e80:	40026088 	.word	0x40026088
 8001e84:	40026488 	.word	0x40026488
 8001e88:	40026040 	.word	0x40026040
 8001e8c:	40026440 	.word	0x40026440
 8001e90:	400260a0 	.word	0x400260a0
 8001e94:	400264a0 	.word	0x400264a0
 8001e98:	40026000 	.word	0x40026000
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_TE_FLAG_INDEX(HDMA(in)));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b7f      	ldr	r3, [pc, #508]	; (80020a4 <stdin_irq_dma+0xb28>)
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d978      	bls.n	8001f9e <stdin_irq_dma+0xa22>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a7c      	ldr	r2, [pc, #496]	; (80020a8 <stdin_irq_dma+0xb2c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d06d      	beq.n	8001f96 <stdin_irq_dma+0xa1a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a7a      	ldr	r2, [pc, #488]	; (80020ac <stdin_irq_dma+0xb30>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d064      	beq.n	8001f92 <stdin_irq_dma+0xa16>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a77      	ldr	r2, [pc, #476]	; (80020b0 <stdin_irq_dma+0xb34>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d05b      	beq.n	8001f8e <stdin_irq_dma+0xa12>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a75      	ldr	r2, [pc, #468]	; (80020b4 <stdin_irq_dma+0xb38>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d052      	beq.n	8001f8a <stdin_irq_dma+0xa0e>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a72      	ldr	r2, [pc, #456]	; (80020b8 <stdin_irq_dma+0xb3c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d048      	beq.n	8001f84 <stdin_irq_dma+0xa08>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a70      	ldr	r2, [pc, #448]	; (80020bc <stdin_irq_dma+0xb40>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d03e      	beq.n	8001f7e <stdin_irq_dma+0xa02>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a6d      	ldr	r2, [pc, #436]	; (80020c0 <stdin_irq_dma+0xb44>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d034      	beq.n	8001f78 <stdin_irq_dma+0x9fc>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a6b      	ldr	r2, [pc, #428]	; (80020c4 <stdin_irq_dma+0xb48>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d02a      	beq.n	8001f72 <stdin_irq_dma+0x9f6>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a68      	ldr	r2, [pc, #416]	; (80020c8 <stdin_irq_dma+0xb4c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d020      	beq.n	8001f6c <stdin_irq_dma+0x9f0>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a66      	ldr	r2, [pc, #408]	; (80020cc <stdin_irq_dma+0xb50>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d016      	beq.n	8001f66 <stdin_irq_dma+0x9ea>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a63      	ldr	r2, [pc, #396]	; (80020d0 <stdin_irq_dma+0xb54>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00c      	beq.n	8001f60 <stdin_irq_dma+0x9e4>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a61      	ldr	r2, [pc, #388]	; (80020d4 <stdin_irq_dma+0xb58>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d102      	bne.n	8001f5a <stdin_irq_dma+0x9de>
 8001f54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f58:	e01e      	b.n	8001f98 <stdin_irq_dma+0xa1c>
 8001f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f5e:	e01b      	b.n	8001f98 <stdin_irq_dma+0xa1c>
 8001f60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f64:	e018      	b.n	8001f98 <stdin_irq_dma+0xa1c>
 8001f66:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f6a:	e015      	b.n	8001f98 <stdin_irq_dma+0xa1c>
 8001f6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f70:	e012      	b.n	8001f98 <stdin_irq_dma+0xa1c>
 8001f72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f76:	e00f      	b.n	8001f98 <stdin_irq_dma+0xa1c>
 8001f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f7c:	e00c      	b.n	8001f98 <stdin_irq_dma+0xa1c>
 8001f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f82:	e009      	b.n	8001f98 <stdin_irq_dma+0xa1c>
 8001f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f88:	e006      	b.n	8001f98 <stdin_irq_dma+0xa1c>
 8001f8a:	2308      	movs	r3, #8
 8001f8c:	e004      	b.n	8001f98 <stdin_irq_dma+0xa1c>
 8001f8e:	2308      	movs	r3, #8
 8001f90:	e002      	b.n	8001f98 <stdin_irq_dma+0xa1c>
 8001f92:	2308      	movs	r3, #8
 8001f94:	e000      	b.n	8001f98 <stdin_irq_dma+0xa1c>
 8001f96:	2308      	movs	r3, #8
 8001f98:	4a4f      	ldr	r2, [pc, #316]	; (80020d8 <stdin_irq_dma+0xb5c>)
 8001f9a:	60d3      	str	r3, [r2, #12]
 8001f9c:	e1b7      	b.n	800230e <stdin_irq_dma+0xd92>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b4c      	ldr	r3, [pc, #304]	; (80020dc <stdin_irq_dma+0xb60>)
 8001faa:	429a      	cmp	r2, r3
 8001fac:	f240 8098 	bls.w	80020e0 <stdin_irq_dma+0xb64>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a3b      	ldr	r2, [pc, #236]	; (80020a8 <stdin_irq_dma+0xb2c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d06d      	beq.n	800209a <stdin_irq_dma+0xb1e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a39      	ldr	r2, [pc, #228]	; (80020ac <stdin_irq_dma+0xb30>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d064      	beq.n	8002096 <stdin_irq_dma+0xb1a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a36      	ldr	r2, [pc, #216]	; (80020b0 <stdin_irq_dma+0xb34>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d05b      	beq.n	8002092 <stdin_irq_dma+0xb16>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a34      	ldr	r2, [pc, #208]	; (80020b4 <stdin_irq_dma+0xb38>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d052      	beq.n	800208e <stdin_irq_dma+0xb12>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a31      	ldr	r2, [pc, #196]	; (80020b8 <stdin_irq_dma+0xb3c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d048      	beq.n	8002088 <stdin_irq_dma+0xb0c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <stdin_irq_dma+0xb40>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d03e      	beq.n	8002082 <stdin_irq_dma+0xb06>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a2c      	ldr	r2, [pc, #176]	; (80020c0 <stdin_irq_dma+0xb44>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d034      	beq.n	800207c <stdin_irq_dma+0xb00>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a2a      	ldr	r2, [pc, #168]	; (80020c4 <stdin_irq_dma+0xb48>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d02a      	beq.n	8002076 <stdin_irq_dma+0xafa>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <stdin_irq_dma+0xb4c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d020      	beq.n	8002070 <stdin_irq_dma+0xaf4>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a25      	ldr	r2, [pc, #148]	; (80020cc <stdin_irq_dma+0xb50>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d016      	beq.n	800206a <stdin_irq_dma+0xaee>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <stdin_irq_dma+0xb54>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00c      	beq.n	8002064 <stdin_irq_dma+0xae8>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <stdin_irq_dma+0xb58>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d102      	bne.n	800205e <stdin_irq_dma+0xae2>
 8002058:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800205c:	e01e      	b.n	800209c <stdin_irq_dma+0xb20>
 800205e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002062:	e01b      	b.n	800209c <stdin_irq_dma+0xb20>
 8002064:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002068:	e018      	b.n	800209c <stdin_irq_dma+0xb20>
 800206a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800206e:	e015      	b.n	800209c <stdin_irq_dma+0xb20>
 8002070:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002074:	e012      	b.n	800209c <stdin_irq_dma+0xb20>
 8002076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207a:	e00f      	b.n	800209c <stdin_irq_dma+0xb20>
 800207c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002080:	e00c      	b.n	800209c <stdin_irq_dma+0xb20>
 8002082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002086:	e009      	b.n	800209c <stdin_irq_dma+0xb20>
 8002088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800208c:	e006      	b.n	800209c <stdin_irq_dma+0xb20>
 800208e:	2308      	movs	r3, #8
 8002090:	e004      	b.n	800209c <stdin_irq_dma+0xb20>
 8002092:	2308      	movs	r3, #8
 8002094:	e002      	b.n	800209c <stdin_irq_dma+0xb20>
 8002096:	2308      	movs	r3, #8
 8002098:	e000      	b.n	800209c <stdin_irq_dma+0xb20>
 800209a:	2308      	movs	r3, #8
 800209c:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <stdin_irq_dma+0xb5c>)
 800209e:	6093      	str	r3, [r2, #8]
 80020a0:	e135      	b.n	800230e <stdin_irq_dma+0xd92>
 80020a2:	bf00      	nop
 80020a4:	40026458 	.word	0x40026458
 80020a8:	40026010 	.word	0x40026010
 80020ac:	40026410 	.word	0x40026410
 80020b0:	40026070 	.word	0x40026070
 80020b4:	40026470 	.word	0x40026470
 80020b8:	40026028 	.word	0x40026028
 80020bc:	40026428 	.word	0x40026428
 80020c0:	40026088 	.word	0x40026088
 80020c4:	40026488 	.word	0x40026488
 80020c8:	40026040 	.word	0x40026040
 80020cc:	40026440 	.word	0x40026440
 80020d0:	400260a0 	.word	0x400260a0
 80020d4:	400264a0 	.word	0x400264a0
 80020d8:	40026400 	.word	0x40026400
 80020dc:	400260b8 	.word	0x400260b8
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b79      	ldr	r3, [pc, #484]	; (80022d0 <stdin_irq_dma+0xd54>)
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d978      	bls.n	80021e2 <stdin_irq_dma+0xc66>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a76      	ldr	r2, [pc, #472]	; (80022d4 <stdin_irq_dma+0xd58>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d06d      	beq.n	80021da <stdin_irq_dma+0xc5e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a74      	ldr	r2, [pc, #464]	; (80022d8 <stdin_irq_dma+0xd5c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d064      	beq.n	80021d6 <stdin_irq_dma+0xc5a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a71      	ldr	r2, [pc, #452]	; (80022dc <stdin_irq_dma+0xd60>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d05b      	beq.n	80021d2 <stdin_irq_dma+0xc56>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a6f      	ldr	r2, [pc, #444]	; (80022e0 <stdin_irq_dma+0xd64>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d052      	beq.n	80021ce <stdin_irq_dma+0xc52>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a6c      	ldr	r2, [pc, #432]	; (80022e4 <stdin_irq_dma+0xd68>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d048      	beq.n	80021c8 <stdin_irq_dma+0xc4c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a6a      	ldr	r2, [pc, #424]	; (80022e8 <stdin_irq_dma+0xd6c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d03e      	beq.n	80021c2 <stdin_irq_dma+0xc46>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a67      	ldr	r2, [pc, #412]	; (80022ec <stdin_irq_dma+0xd70>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d034      	beq.n	80021bc <stdin_irq_dma+0xc40>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a65      	ldr	r2, [pc, #404]	; (80022f0 <stdin_irq_dma+0xd74>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d02a      	beq.n	80021b6 <stdin_irq_dma+0xc3a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a62      	ldr	r2, [pc, #392]	; (80022f4 <stdin_irq_dma+0xd78>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d020      	beq.n	80021b0 <stdin_irq_dma+0xc34>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a60      	ldr	r2, [pc, #384]	; (80022f8 <stdin_irq_dma+0xd7c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d016      	beq.n	80021aa <stdin_irq_dma+0xc2e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a5d      	ldr	r2, [pc, #372]	; (80022fc <stdin_irq_dma+0xd80>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00c      	beq.n	80021a4 <stdin_irq_dma+0xc28>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a5b      	ldr	r2, [pc, #364]	; (8002300 <stdin_irq_dma+0xd84>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d102      	bne.n	800219e <stdin_irq_dma+0xc22>
 8002198:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800219c:	e01e      	b.n	80021dc <stdin_irq_dma+0xc60>
 800219e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a2:	e01b      	b.n	80021dc <stdin_irq_dma+0xc60>
 80021a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80021a8:	e018      	b.n	80021dc <stdin_irq_dma+0xc60>
 80021aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80021ae:	e015      	b.n	80021dc <stdin_irq_dma+0xc60>
 80021b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80021b4:	e012      	b.n	80021dc <stdin_irq_dma+0xc60>
 80021b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ba:	e00f      	b.n	80021dc <stdin_irq_dma+0xc60>
 80021bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c0:	e00c      	b.n	80021dc <stdin_irq_dma+0xc60>
 80021c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c6:	e009      	b.n	80021dc <stdin_irq_dma+0xc60>
 80021c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021cc:	e006      	b.n	80021dc <stdin_irq_dma+0xc60>
 80021ce:	2308      	movs	r3, #8
 80021d0:	e004      	b.n	80021dc <stdin_irq_dma+0xc60>
 80021d2:	2308      	movs	r3, #8
 80021d4:	e002      	b.n	80021dc <stdin_irq_dma+0xc60>
 80021d6:	2308      	movs	r3, #8
 80021d8:	e000      	b.n	80021dc <stdin_irq_dma+0xc60>
 80021da:	2308      	movs	r3, #8
 80021dc:	4a49      	ldr	r2, [pc, #292]	; (8002304 <stdin_irq_dma+0xd88>)
 80021de:	60d3      	str	r3, [r2, #12]
 80021e0:	e095      	b.n	800230e <stdin_irq_dma+0xd92>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a3a      	ldr	r2, [pc, #232]	; (80022d4 <stdin_irq_dma+0xd58>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	f000 808b 	beq.w	8002308 <stdin_irq_dma+0xd8c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a37      	ldr	r2, [pc, #220]	; (80022d8 <stdin_irq_dma+0xd5c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d064      	beq.n	80022ca <stdin_irq_dma+0xd4e>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a34      	ldr	r2, [pc, #208]	; (80022dc <stdin_irq_dma+0xd60>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d05b      	beq.n	80022c6 <stdin_irq_dma+0xd4a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a32      	ldr	r2, [pc, #200]	; (80022e0 <stdin_irq_dma+0xd64>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d052      	beq.n	80022c2 <stdin_irq_dma+0xd46>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a2f      	ldr	r2, [pc, #188]	; (80022e4 <stdin_irq_dma+0xd68>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d048      	beq.n	80022bc <stdin_irq_dma+0xd40>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2d      	ldr	r2, [pc, #180]	; (80022e8 <stdin_irq_dma+0xd6c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d03e      	beq.n	80022b6 <stdin_irq_dma+0xd3a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a2a      	ldr	r2, [pc, #168]	; (80022ec <stdin_irq_dma+0xd70>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d034      	beq.n	80022b0 <stdin_irq_dma+0xd34>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a28      	ldr	r2, [pc, #160]	; (80022f0 <stdin_irq_dma+0xd74>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d02a      	beq.n	80022aa <stdin_irq_dma+0xd2e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <stdin_irq_dma+0xd78>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d020      	beq.n	80022a4 <stdin_irq_dma+0xd28>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a23      	ldr	r2, [pc, #140]	; (80022f8 <stdin_irq_dma+0xd7c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d016      	beq.n	800229e <stdin_irq_dma+0xd22>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a20      	ldr	r2, [pc, #128]	; (80022fc <stdin_irq_dma+0xd80>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00c      	beq.n	8002298 <stdin_irq_dma+0xd1c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <stdin_irq_dma+0xd84>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d102      	bne.n	8002292 <stdin_irq_dma+0xd16>
 800228c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002290:	e03b      	b.n	800230a <stdin_irq_dma+0xd8e>
 8002292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002296:	e038      	b.n	800230a <stdin_irq_dma+0xd8e>
 8002298:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800229c:	e035      	b.n	800230a <stdin_irq_dma+0xd8e>
 800229e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022a2:	e032      	b.n	800230a <stdin_irq_dma+0xd8e>
 80022a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022a8:	e02f      	b.n	800230a <stdin_irq_dma+0xd8e>
 80022aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ae:	e02c      	b.n	800230a <stdin_irq_dma+0xd8e>
 80022b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b4:	e029      	b.n	800230a <stdin_irq_dma+0xd8e>
 80022b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ba:	e026      	b.n	800230a <stdin_irq_dma+0xd8e>
 80022bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c0:	e023      	b.n	800230a <stdin_irq_dma+0xd8e>
 80022c2:	2308      	movs	r3, #8
 80022c4:	e021      	b.n	800230a <stdin_irq_dma+0xd8e>
 80022c6:	2308      	movs	r3, #8
 80022c8:	e01f      	b.n	800230a <stdin_irq_dma+0xd8e>
 80022ca:	2308      	movs	r3, #8
 80022cc:	e01d      	b.n	800230a <stdin_irq_dma+0xd8e>
 80022ce:	bf00      	nop
 80022d0:	40026058 	.word	0x40026058
 80022d4:	40026010 	.word	0x40026010
 80022d8:	40026410 	.word	0x40026410
 80022dc:	40026070 	.word	0x40026070
 80022e0:	40026470 	.word	0x40026470
 80022e4:	40026028 	.word	0x40026028
 80022e8:	40026428 	.word	0x40026428
 80022ec:	40026088 	.word	0x40026088
 80022f0:	40026488 	.word	0x40026488
 80022f4:	40026040 	.word	0x40026040
 80022f8:	40026440 	.word	0x40026440
 80022fc:	400260a0 	.word	0x400260a0
 8002300:	400264a0 	.word	0x400264a0
 8002304:	40026000 	.word	0x40026000
 8002308:	2308      	movs	r3, #8
 800230a:	4a7e      	ldr	r2, [pc, #504]	; (8002504 <stdin_irq_dma+0xf88>)
 800230c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_FE_FLAG_INDEX(HDMA(in)));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	4b7b      	ldr	r3, [pc, #492]	; (8002508 <stdin_irq_dma+0xf8c>)
 800231a:	429a      	cmp	r2, r3
 800231c:	d974      	bls.n	8002408 <stdin_irq_dma+0xe8c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a79      	ldr	r2, [pc, #484]	; (800250c <stdin_irq_dma+0xf90>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d069      	beq.n	8002400 <stdin_irq_dma+0xe84>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a76      	ldr	r2, [pc, #472]	; (8002510 <stdin_irq_dma+0xf94>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d060      	beq.n	80023fc <stdin_irq_dma+0xe80>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a74      	ldr	r2, [pc, #464]	; (8002514 <stdin_irq_dma+0xf98>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d057      	beq.n	80023f8 <stdin_irq_dma+0xe7c>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a71      	ldr	r2, [pc, #452]	; (8002518 <stdin_irq_dma+0xf9c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d04e      	beq.n	80023f4 <stdin_irq_dma+0xe78>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a6f      	ldr	r2, [pc, #444]	; (800251c <stdin_irq_dma+0xfa0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d045      	beq.n	80023f0 <stdin_irq_dma+0xe74>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a6c      	ldr	r2, [pc, #432]	; (8002520 <stdin_irq_dma+0xfa4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d03c      	beq.n	80023ec <stdin_irq_dma+0xe70>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a6a      	ldr	r2, [pc, #424]	; (8002524 <stdin_irq_dma+0xfa8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d033      	beq.n	80023e8 <stdin_irq_dma+0xe6c>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a67      	ldr	r2, [pc, #412]	; (8002528 <stdin_irq_dma+0xfac>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d02a      	beq.n	80023e4 <stdin_irq_dma+0xe68>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a65      	ldr	r2, [pc, #404]	; (800252c <stdin_irq_dma+0xfb0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d020      	beq.n	80023de <stdin_irq_dma+0xe62>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a62      	ldr	r2, [pc, #392]	; (8002530 <stdin_irq_dma+0xfb4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d016      	beq.n	80023d8 <stdin_irq_dma+0xe5c>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a60      	ldr	r2, [pc, #384]	; (8002534 <stdin_irq_dma+0xfb8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d00c      	beq.n	80023d2 <stdin_irq_dma+0xe56>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a5d      	ldr	r2, [pc, #372]	; (8002538 <stdin_irq_dma+0xfbc>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d102      	bne.n	80023cc <stdin_irq_dma+0xe50>
 80023c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ca:	e01a      	b.n	8002402 <stdin_irq_dma+0xe86>
 80023cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023d0:	e017      	b.n	8002402 <stdin_irq_dma+0xe86>
 80023d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023d6:	e014      	b.n	8002402 <stdin_irq_dma+0xe86>
 80023d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023dc:	e011      	b.n	8002402 <stdin_irq_dma+0xe86>
 80023de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023e2:	e00e      	b.n	8002402 <stdin_irq_dma+0xe86>
 80023e4:	2340      	movs	r3, #64	; 0x40
 80023e6:	e00c      	b.n	8002402 <stdin_irq_dma+0xe86>
 80023e8:	2340      	movs	r3, #64	; 0x40
 80023ea:	e00a      	b.n	8002402 <stdin_irq_dma+0xe86>
 80023ec:	2340      	movs	r3, #64	; 0x40
 80023ee:	e008      	b.n	8002402 <stdin_irq_dma+0xe86>
 80023f0:	2340      	movs	r3, #64	; 0x40
 80023f2:	e006      	b.n	8002402 <stdin_irq_dma+0xe86>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e004      	b.n	8002402 <stdin_irq_dma+0xe86>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e002      	b.n	8002402 <stdin_irq_dma+0xe86>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <stdin_irq_dma+0xe86>
 8002400:	2301      	movs	r3, #1
 8002402:	4a4e      	ldr	r2, [pc, #312]	; (800253c <stdin_irq_dma+0xfc0>)
 8002404:	60d3      	str	r3, [r2, #12]
 8002406:	e1ac      	b.n	8002762 <stdin_irq_dma+0x11e6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	4b4b      	ldr	r3, [pc, #300]	; (8002540 <stdin_irq_dma+0xfc4>)
 8002414:	429a      	cmp	r2, r3
 8002416:	f240 8095 	bls.w	8002544 <stdin_irq_dma+0xfc8>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a3a      	ldr	r2, [pc, #232]	; (800250c <stdin_irq_dma+0xf90>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d069      	beq.n	80024fc <stdin_irq_dma+0xf80>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a37      	ldr	r2, [pc, #220]	; (8002510 <stdin_irq_dma+0xf94>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d060      	beq.n	80024f8 <stdin_irq_dma+0xf7c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a35      	ldr	r2, [pc, #212]	; (8002514 <stdin_irq_dma+0xf98>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d057      	beq.n	80024f4 <stdin_irq_dma+0xf78>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a32      	ldr	r2, [pc, #200]	; (8002518 <stdin_irq_dma+0xf9c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d04e      	beq.n	80024f0 <stdin_irq_dma+0xf74>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a30      	ldr	r2, [pc, #192]	; (800251c <stdin_irq_dma+0xfa0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d045      	beq.n	80024ec <stdin_irq_dma+0xf70>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a2d      	ldr	r2, [pc, #180]	; (8002520 <stdin_irq_dma+0xfa4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d03c      	beq.n	80024e8 <stdin_irq_dma+0xf6c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2b      	ldr	r2, [pc, #172]	; (8002524 <stdin_irq_dma+0xfa8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d033      	beq.n	80024e4 <stdin_irq_dma+0xf68>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a28      	ldr	r2, [pc, #160]	; (8002528 <stdin_irq_dma+0xfac>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d02a      	beq.n	80024e0 <stdin_irq_dma+0xf64>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a26      	ldr	r2, [pc, #152]	; (800252c <stdin_irq_dma+0xfb0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d020      	beq.n	80024da <stdin_irq_dma+0xf5e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a23      	ldr	r2, [pc, #140]	; (8002530 <stdin_irq_dma+0xfb4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d016      	beq.n	80024d4 <stdin_irq_dma+0xf58>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a21      	ldr	r2, [pc, #132]	; (8002534 <stdin_irq_dma+0xfb8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00c      	beq.n	80024ce <stdin_irq_dma+0xf52>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <stdin_irq_dma+0xfbc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d102      	bne.n	80024c8 <stdin_irq_dma+0xf4c>
 80024c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024c6:	e01a      	b.n	80024fe <stdin_irq_dma+0xf82>
 80024c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024cc:	e017      	b.n	80024fe <stdin_irq_dma+0xf82>
 80024ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024d2:	e014      	b.n	80024fe <stdin_irq_dma+0xf82>
 80024d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024d8:	e011      	b.n	80024fe <stdin_irq_dma+0xf82>
 80024da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024de:	e00e      	b.n	80024fe <stdin_irq_dma+0xf82>
 80024e0:	2340      	movs	r3, #64	; 0x40
 80024e2:	e00c      	b.n	80024fe <stdin_irq_dma+0xf82>
 80024e4:	2340      	movs	r3, #64	; 0x40
 80024e6:	e00a      	b.n	80024fe <stdin_irq_dma+0xf82>
 80024e8:	2340      	movs	r3, #64	; 0x40
 80024ea:	e008      	b.n	80024fe <stdin_irq_dma+0xf82>
 80024ec:	2340      	movs	r3, #64	; 0x40
 80024ee:	e006      	b.n	80024fe <stdin_irq_dma+0xf82>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e004      	b.n	80024fe <stdin_irq_dma+0xf82>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e002      	b.n	80024fe <stdin_irq_dma+0xf82>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <stdin_irq_dma+0xf82>
 80024fc:	2301      	movs	r3, #1
 80024fe:	4a0f      	ldr	r2, [pc, #60]	; (800253c <stdin_irq_dma+0xfc0>)
 8002500:	6093      	str	r3, [r2, #8]
 8002502:	e12e      	b.n	8002762 <stdin_irq_dma+0x11e6>
 8002504:	40026000 	.word	0x40026000
 8002508:	40026458 	.word	0x40026458
 800250c:	40026010 	.word	0x40026010
 8002510:	40026410 	.word	0x40026410
 8002514:	40026070 	.word	0x40026070
 8002518:	40026470 	.word	0x40026470
 800251c:	40026028 	.word	0x40026028
 8002520:	40026428 	.word	0x40026428
 8002524:	40026088 	.word	0x40026088
 8002528:	40026488 	.word	0x40026488
 800252c:	40026040 	.word	0x40026040
 8002530:	40026440 	.word	0x40026440
 8002534:	400260a0 	.word	0x400260a0
 8002538:	400264a0 	.word	0x400264a0
 800253c:	40026400 	.word	0x40026400
 8002540:	400260b8 	.word	0x400260b8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	4b75      	ldr	r3, [pc, #468]	; (8002724 <stdin_irq_dma+0x11a8>)
 8002550:	429a      	cmp	r2, r3
 8002552:	d974      	bls.n	800263e <stdin_irq_dma+0x10c2>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a72      	ldr	r2, [pc, #456]	; (8002728 <stdin_irq_dma+0x11ac>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d069      	beq.n	8002636 <stdin_irq_dma+0x10ba>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a70      	ldr	r2, [pc, #448]	; (800272c <stdin_irq_dma+0x11b0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d060      	beq.n	8002632 <stdin_irq_dma+0x10b6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a6d      	ldr	r2, [pc, #436]	; (8002730 <stdin_irq_dma+0x11b4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d057      	beq.n	800262e <stdin_irq_dma+0x10b2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6b      	ldr	r2, [pc, #428]	; (8002734 <stdin_irq_dma+0x11b8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d04e      	beq.n	800262a <stdin_irq_dma+0x10ae>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a68      	ldr	r2, [pc, #416]	; (8002738 <stdin_irq_dma+0x11bc>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d045      	beq.n	8002626 <stdin_irq_dma+0x10aa>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a66      	ldr	r2, [pc, #408]	; (800273c <stdin_irq_dma+0x11c0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d03c      	beq.n	8002622 <stdin_irq_dma+0x10a6>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a63      	ldr	r2, [pc, #396]	; (8002740 <stdin_irq_dma+0x11c4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d033      	beq.n	800261e <stdin_irq_dma+0x10a2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a61      	ldr	r2, [pc, #388]	; (8002744 <stdin_irq_dma+0x11c8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d02a      	beq.n	800261a <stdin_irq_dma+0x109e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a5e      	ldr	r2, [pc, #376]	; (8002748 <stdin_irq_dma+0x11cc>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d020      	beq.n	8002614 <stdin_irq_dma+0x1098>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a5c      	ldr	r2, [pc, #368]	; (800274c <stdin_irq_dma+0x11d0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d016      	beq.n	800260e <stdin_irq_dma+0x1092>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a59      	ldr	r2, [pc, #356]	; (8002750 <stdin_irq_dma+0x11d4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00c      	beq.n	8002608 <stdin_irq_dma+0x108c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a57      	ldr	r2, [pc, #348]	; (8002754 <stdin_irq_dma+0x11d8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d102      	bne.n	8002602 <stdin_irq_dma+0x1086>
 80025fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002600:	e01a      	b.n	8002638 <stdin_irq_dma+0x10bc>
 8002602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002606:	e017      	b.n	8002638 <stdin_irq_dma+0x10bc>
 8002608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800260c:	e014      	b.n	8002638 <stdin_irq_dma+0x10bc>
 800260e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002612:	e011      	b.n	8002638 <stdin_irq_dma+0x10bc>
 8002614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002618:	e00e      	b.n	8002638 <stdin_irq_dma+0x10bc>
 800261a:	2340      	movs	r3, #64	; 0x40
 800261c:	e00c      	b.n	8002638 <stdin_irq_dma+0x10bc>
 800261e:	2340      	movs	r3, #64	; 0x40
 8002620:	e00a      	b.n	8002638 <stdin_irq_dma+0x10bc>
 8002622:	2340      	movs	r3, #64	; 0x40
 8002624:	e008      	b.n	8002638 <stdin_irq_dma+0x10bc>
 8002626:	2340      	movs	r3, #64	; 0x40
 8002628:	e006      	b.n	8002638 <stdin_irq_dma+0x10bc>
 800262a:	2301      	movs	r3, #1
 800262c:	e004      	b.n	8002638 <stdin_irq_dma+0x10bc>
 800262e:	2301      	movs	r3, #1
 8002630:	e002      	b.n	8002638 <stdin_irq_dma+0x10bc>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <stdin_irq_dma+0x10bc>
 8002636:	2301      	movs	r3, #1
 8002638:	4a47      	ldr	r2, [pc, #284]	; (8002758 <stdin_irq_dma+0x11dc>)
 800263a:	60d3      	str	r3, [r2, #12]
 800263c:	e091      	b.n	8002762 <stdin_irq_dma+0x11e6>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a38      	ldr	r2, [pc, #224]	; (8002728 <stdin_irq_dma+0x11ac>)
 8002648:	4293      	cmp	r3, r2
 800264a:	f000 8087 	beq.w	800275c <stdin_irq_dma+0x11e0>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a35      	ldr	r2, [pc, #212]	; (800272c <stdin_irq_dma+0x11b0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d060      	beq.n	800271e <stdin_irq_dma+0x11a2>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a32      	ldr	r2, [pc, #200]	; (8002730 <stdin_irq_dma+0x11b4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d057      	beq.n	800271a <stdin_irq_dma+0x119e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a30      	ldr	r2, [pc, #192]	; (8002734 <stdin_irq_dma+0x11b8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d04e      	beq.n	8002716 <stdin_irq_dma+0x119a>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2d      	ldr	r2, [pc, #180]	; (8002738 <stdin_irq_dma+0x11bc>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d045      	beq.n	8002712 <stdin_irq_dma+0x1196>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a2b      	ldr	r2, [pc, #172]	; (800273c <stdin_irq_dma+0x11c0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d03c      	beq.n	800270e <stdin_irq_dma+0x1192>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a28      	ldr	r2, [pc, #160]	; (8002740 <stdin_irq_dma+0x11c4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d033      	beq.n	800270a <stdin_irq_dma+0x118e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a26      	ldr	r2, [pc, #152]	; (8002744 <stdin_irq_dma+0x11c8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d02a      	beq.n	8002706 <stdin_irq_dma+0x118a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a23      	ldr	r2, [pc, #140]	; (8002748 <stdin_irq_dma+0x11cc>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d020      	beq.n	8002700 <stdin_irq_dma+0x1184>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a21      	ldr	r2, [pc, #132]	; (800274c <stdin_irq_dma+0x11d0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d016      	beq.n	80026fa <stdin_irq_dma+0x117e>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1e      	ldr	r2, [pc, #120]	; (8002750 <stdin_irq_dma+0x11d4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00c      	beq.n	80026f4 <stdin_irq_dma+0x1178>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <stdin_irq_dma+0x11d8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d102      	bne.n	80026ee <stdin_irq_dma+0x1172>
 80026e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026ec:	e037      	b.n	800275e <stdin_irq_dma+0x11e2>
 80026ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026f2:	e034      	b.n	800275e <stdin_irq_dma+0x11e2>
 80026f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026f8:	e031      	b.n	800275e <stdin_irq_dma+0x11e2>
 80026fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026fe:	e02e      	b.n	800275e <stdin_irq_dma+0x11e2>
 8002700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002704:	e02b      	b.n	800275e <stdin_irq_dma+0x11e2>
 8002706:	2340      	movs	r3, #64	; 0x40
 8002708:	e029      	b.n	800275e <stdin_irq_dma+0x11e2>
 800270a:	2340      	movs	r3, #64	; 0x40
 800270c:	e027      	b.n	800275e <stdin_irq_dma+0x11e2>
 800270e:	2340      	movs	r3, #64	; 0x40
 8002710:	e025      	b.n	800275e <stdin_irq_dma+0x11e2>
 8002712:	2340      	movs	r3, #64	; 0x40
 8002714:	e023      	b.n	800275e <stdin_irq_dma+0x11e2>
 8002716:	2301      	movs	r3, #1
 8002718:	e021      	b.n	800275e <stdin_irq_dma+0x11e2>
 800271a:	2301      	movs	r3, #1
 800271c:	e01f      	b.n	800275e <stdin_irq_dma+0x11e2>
 800271e:	2301      	movs	r3, #1
 8002720:	e01d      	b.n	800275e <stdin_irq_dma+0x11e2>
 8002722:	bf00      	nop
 8002724:	40026058 	.word	0x40026058
 8002728:	40026010 	.word	0x40026010
 800272c:	40026410 	.word	0x40026410
 8002730:	40026070 	.word	0x40026070
 8002734:	40026470 	.word	0x40026470
 8002738:	40026028 	.word	0x40026028
 800273c:	40026428 	.word	0x40026428
 8002740:	40026088 	.word	0x40026088
 8002744:	40026488 	.word	0x40026488
 8002748:	40026040 	.word	0x40026040
 800274c:	40026440 	.word	0x40026440
 8002750:	400260a0 	.word	0x400260a0
 8002754:	400264a0 	.word	0x400264a0
 8002758:	40026000 	.word	0x40026000
 800275c:	2301      	movs	r3, #1
 800275e:	4a82      	ldr	r2, [pc, #520]	; (8002968 <stdin_irq_dma+0x13ec>)
 8002760:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG(HDMA(in), __HAL_DMA_GET_DME_FLAG_INDEX(HDMA(in)));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	4b7f      	ldr	r3, [pc, #508]	; (800296c <stdin_irq_dma+0x13f0>)
 800276e:	429a      	cmp	r2, r3
 8002770:	d978      	bls.n	8002864 <stdin_irq_dma+0x12e8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a7d      	ldr	r2, [pc, #500]	; (8002970 <stdin_irq_dma+0x13f4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d06d      	beq.n	800285c <stdin_irq_dma+0x12e0>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a7a      	ldr	r2, [pc, #488]	; (8002974 <stdin_irq_dma+0x13f8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d064      	beq.n	8002858 <stdin_irq_dma+0x12dc>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a78      	ldr	r2, [pc, #480]	; (8002978 <stdin_irq_dma+0x13fc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d05b      	beq.n	8002854 <stdin_irq_dma+0x12d8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a75      	ldr	r2, [pc, #468]	; (800297c <stdin_irq_dma+0x1400>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d052      	beq.n	8002850 <stdin_irq_dma+0x12d4>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a73      	ldr	r2, [pc, #460]	; (8002980 <stdin_irq_dma+0x1404>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d048      	beq.n	800284a <stdin_irq_dma+0x12ce>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a70      	ldr	r2, [pc, #448]	; (8002984 <stdin_irq_dma+0x1408>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d03e      	beq.n	8002844 <stdin_irq_dma+0x12c8>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6e      	ldr	r2, [pc, #440]	; (8002988 <stdin_irq_dma+0x140c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d034      	beq.n	800283e <stdin_irq_dma+0x12c2>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a6b      	ldr	r2, [pc, #428]	; (800298c <stdin_irq_dma+0x1410>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d02a      	beq.n	8002838 <stdin_irq_dma+0x12bc>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a69      	ldr	r2, [pc, #420]	; (8002990 <stdin_irq_dma+0x1414>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d020      	beq.n	8002832 <stdin_irq_dma+0x12b6>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a66      	ldr	r2, [pc, #408]	; (8002994 <stdin_irq_dma+0x1418>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d016      	beq.n	800282c <stdin_irq_dma+0x12b0>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a64      	ldr	r2, [pc, #400]	; (8002998 <stdin_irq_dma+0x141c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00c      	beq.n	8002826 <stdin_irq_dma+0x12aa>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a61      	ldr	r2, [pc, #388]	; (800299c <stdin_irq_dma+0x1420>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d102      	bne.n	8002820 <stdin_irq_dma+0x12a4>
 800281a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800281e:	e01e      	b.n	800285e <stdin_irq_dma+0x12e2>
 8002820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002824:	e01b      	b.n	800285e <stdin_irq_dma+0x12e2>
 8002826:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800282a:	e018      	b.n	800285e <stdin_irq_dma+0x12e2>
 800282c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002830:	e015      	b.n	800285e <stdin_irq_dma+0x12e2>
 8002832:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002836:	e012      	b.n	800285e <stdin_irq_dma+0x12e2>
 8002838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800283c:	e00f      	b.n	800285e <stdin_irq_dma+0x12e2>
 800283e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002842:	e00c      	b.n	800285e <stdin_irq_dma+0x12e2>
 8002844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002848:	e009      	b.n	800285e <stdin_irq_dma+0x12e2>
 800284a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800284e:	e006      	b.n	800285e <stdin_irq_dma+0x12e2>
 8002850:	2304      	movs	r3, #4
 8002852:	e004      	b.n	800285e <stdin_irq_dma+0x12e2>
 8002854:	2304      	movs	r3, #4
 8002856:	e002      	b.n	800285e <stdin_irq_dma+0x12e2>
 8002858:	2304      	movs	r3, #4
 800285a:	e000      	b.n	800285e <stdin_irq_dma+0x12e2>
 800285c:	2304      	movs	r3, #4
 800285e:	4a50      	ldr	r2, [pc, #320]	; (80029a0 <stdin_irq_dma+0x1424>)
 8002860:	60d3      	str	r3, [r2, #12]
 8002862:	e19a      	b.n	8002b9a <stdin_irq_dma+0x161e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	4b4d      	ldr	r3, [pc, #308]	; (80029a4 <stdin_irq_dma+0x1428>)
 8002870:	429a      	cmp	r2, r3
 8002872:	f240 8099 	bls.w	80029a8 <stdin_irq_dma+0x142c>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a3c      	ldr	r2, [pc, #240]	; (8002970 <stdin_irq_dma+0x13f4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d06d      	beq.n	8002960 <stdin_irq_dma+0x13e4>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a39      	ldr	r2, [pc, #228]	; (8002974 <stdin_irq_dma+0x13f8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d064      	beq.n	800295c <stdin_irq_dma+0x13e0>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a37      	ldr	r2, [pc, #220]	; (8002978 <stdin_irq_dma+0x13fc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d05b      	beq.n	8002958 <stdin_irq_dma+0x13dc>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a34      	ldr	r2, [pc, #208]	; (800297c <stdin_irq_dma+0x1400>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d052      	beq.n	8002954 <stdin_irq_dma+0x13d8>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a32      	ldr	r2, [pc, #200]	; (8002980 <stdin_irq_dma+0x1404>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d048      	beq.n	800294e <stdin_irq_dma+0x13d2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2f      	ldr	r2, [pc, #188]	; (8002984 <stdin_irq_dma+0x1408>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d03e      	beq.n	8002948 <stdin_irq_dma+0x13cc>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <stdin_irq_dma+0x140c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d034      	beq.n	8002942 <stdin_irq_dma+0x13c6>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a2a      	ldr	r2, [pc, #168]	; (800298c <stdin_irq_dma+0x1410>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d02a      	beq.n	800293c <stdin_irq_dma+0x13c0>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a28      	ldr	r2, [pc, #160]	; (8002990 <stdin_irq_dma+0x1414>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d020      	beq.n	8002936 <stdin_irq_dma+0x13ba>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a25      	ldr	r2, [pc, #148]	; (8002994 <stdin_irq_dma+0x1418>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d016      	beq.n	8002930 <stdin_irq_dma+0x13b4>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a23      	ldr	r2, [pc, #140]	; (8002998 <stdin_irq_dma+0x141c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00c      	beq.n	800292a <stdin_irq_dma+0x13ae>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a20      	ldr	r2, [pc, #128]	; (800299c <stdin_irq_dma+0x1420>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d102      	bne.n	8002924 <stdin_irq_dma+0x13a8>
 800291e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002922:	e01e      	b.n	8002962 <stdin_irq_dma+0x13e6>
 8002924:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002928:	e01b      	b.n	8002962 <stdin_irq_dma+0x13e6>
 800292a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800292e:	e018      	b.n	8002962 <stdin_irq_dma+0x13e6>
 8002930:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002934:	e015      	b.n	8002962 <stdin_irq_dma+0x13e6>
 8002936:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800293a:	e012      	b.n	8002962 <stdin_irq_dma+0x13e6>
 800293c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002940:	e00f      	b.n	8002962 <stdin_irq_dma+0x13e6>
 8002942:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002946:	e00c      	b.n	8002962 <stdin_irq_dma+0x13e6>
 8002948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800294c:	e009      	b.n	8002962 <stdin_irq_dma+0x13e6>
 800294e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002952:	e006      	b.n	8002962 <stdin_irq_dma+0x13e6>
 8002954:	2304      	movs	r3, #4
 8002956:	e004      	b.n	8002962 <stdin_irq_dma+0x13e6>
 8002958:	2304      	movs	r3, #4
 800295a:	e002      	b.n	8002962 <stdin_irq_dma+0x13e6>
 800295c:	2304      	movs	r3, #4
 800295e:	e000      	b.n	8002962 <stdin_irq_dma+0x13e6>
 8002960:	2304      	movs	r3, #4
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <stdin_irq_dma+0x1424>)
 8002964:	6093      	str	r3, [r2, #8]
 8002966:	e118      	b.n	8002b9a <stdin_irq_dma+0x161e>
 8002968:	40026000 	.word	0x40026000
 800296c:	40026458 	.word	0x40026458
 8002970:	40026010 	.word	0x40026010
 8002974:	40026410 	.word	0x40026410
 8002978:	40026070 	.word	0x40026070
 800297c:	40026470 	.word	0x40026470
 8002980:	40026028 	.word	0x40026028
 8002984:	40026428 	.word	0x40026428
 8002988:	40026088 	.word	0x40026088
 800298c:	40026488 	.word	0x40026488
 8002990:	40026040 	.word	0x40026040
 8002994:	40026440 	.word	0x40026440
 8002998:	400260a0 	.word	0x400260a0
 800299c:	400264a0 	.word	0x400264a0
 80029a0:	40026400 	.word	0x40026400
 80029a4:	400260b8 	.word	0x400260b8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b80      	ldr	r3, [pc, #512]	; (8002bb4 <stdin_irq_dma+0x1638>)
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d978      	bls.n	8002aaa <stdin_irq_dma+0x152e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a7d      	ldr	r2, [pc, #500]	; (8002bb8 <stdin_irq_dma+0x163c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d06d      	beq.n	8002aa2 <stdin_irq_dma+0x1526>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a7b      	ldr	r2, [pc, #492]	; (8002bbc <stdin_irq_dma+0x1640>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d064      	beq.n	8002a9e <stdin_irq_dma+0x1522>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a78      	ldr	r2, [pc, #480]	; (8002bc0 <stdin_irq_dma+0x1644>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d05b      	beq.n	8002a9a <stdin_irq_dma+0x151e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a76      	ldr	r2, [pc, #472]	; (8002bc4 <stdin_irq_dma+0x1648>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d052      	beq.n	8002a96 <stdin_irq_dma+0x151a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a73      	ldr	r2, [pc, #460]	; (8002bc8 <stdin_irq_dma+0x164c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d048      	beq.n	8002a90 <stdin_irq_dma+0x1514>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a71      	ldr	r2, [pc, #452]	; (8002bcc <stdin_irq_dma+0x1650>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d03e      	beq.n	8002a8a <stdin_irq_dma+0x150e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a6e      	ldr	r2, [pc, #440]	; (8002bd0 <stdin_irq_dma+0x1654>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d034      	beq.n	8002a84 <stdin_irq_dma+0x1508>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a6c      	ldr	r2, [pc, #432]	; (8002bd4 <stdin_irq_dma+0x1658>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d02a      	beq.n	8002a7e <stdin_irq_dma+0x1502>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a69      	ldr	r2, [pc, #420]	; (8002bd8 <stdin_irq_dma+0x165c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d020      	beq.n	8002a78 <stdin_irq_dma+0x14fc>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a67      	ldr	r2, [pc, #412]	; (8002bdc <stdin_irq_dma+0x1660>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d016      	beq.n	8002a72 <stdin_irq_dma+0x14f6>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a64      	ldr	r2, [pc, #400]	; (8002be0 <stdin_irq_dma+0x1664>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00c      	beq.n	8002a6c <stdin_irq_dma+0x14f0>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a62      	ldr	r2, [pc, #392]	; (8002be4 <stdin_irq_dma+0x1668>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d102      	bne.n	8002a66 <stdin_irq_dma+0x14ea>
 8002a60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a64:	e01e      	b.n	8002aa4 <stdin_irq_dma+0x1528>
 8002a66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a6a:	e01b      	b.n	8002aa4 <stdin_irq_dma+0x1528>
 8002a6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a70:	e018      	b.n	8002aa4 <stdin_irq_dma+0x1528>
 8002a72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a76:	e015      	b.n	8002aa4 <stdin_irq_dma+0x1528>
 8002a78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a7c:	e012      	b.n	8002aa4 <stdin_irq_dma+0x1528>
 8002a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a82:	e00f      	b.n	8002aa4 <stdin_irq_dma+0x1528>
 8002a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a88:	e00c      	b.n	8002aa4 <stdin_irq_dma+0x1528>
 8002a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a8e:	e009      	b.n	8002aa4 <stdin_irq_dma+0x1528>
 8002a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a94:	e006      	b.n	8002aa4 <stdin_irq_dma+0x1528>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e004      	b.n	8002aa4 <stdin_irq_dma+0x1528>
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	e002      	b.n	8002aa4 <stdin_irq_dma+0x1528>
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	e000      	b.n	8002aa4 <stdin_irq_dma+0x1528>
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	4a50      	ldr	r2, [pc, #320]	; (8002be8 <stdin_irq_dma+0x166c>)
 8002aa6:	60d3      	str	r3, [r2, #12]
 8002aa8:	e077      	b.n	8002b9a <stdin_irq_dma+0x161e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a41      	ldr	r2, [pc, #260]	; (8002bb8 <stdin_irq_dma+0x163c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d06d      	beq.n	8002b94 <stdin_irq_dma+0x1618>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a3e      	ldr	r2, [pc, #248]	; (8002bbc <stdin_irq_dma+0x1640>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d064      	beq.n	8002b90 <stdin_irq_dma+0x1614>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a3c      	ldr	r2, [pc, #240]	; (8002bc0 <stdin_irq_dma+0x1644>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d05b      	beq.n	8002b8c <stdin_irq_dma+0x1610>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a39      	ldr	r2, [pc, #228]	; (8002bc4 <stdin_irq_dma+0x1648>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d052      	beq.n	8002b88 <stdin_irq_dma+0x160c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a37      	ldr	r2, [pc, #220]	; (8002bc8 <stdin_irq_dma+0x164c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d048      	beq.n	8002b82 <stdin_irq_dma+0x1606>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a34      	ldr	r2, [pc, #208]	; (8002bcc <stdin_irq_dma+0x1650>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d03e      	beq.n	8002b7c <stdin_irq_dma+0x1600>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a32      	ldr	r2, [pc, #200]	; (8002bd0 <stdin_irq_dma+0x1654>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d034      	beq.n	8002b76 <stdin_irq_dma+0x15fa>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a2f      	ldr	r2, [pc, #188]	; (8002bd4 <stdin_irq_dma+0x1658>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d02a      	beq.n	8002b70 <stdin_irq_dma+0x15f4>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a2d      	ldr	r2, [pc, #180]	; (8002bd8 <stdin_irq_dma+0x165c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d020      	beq.n	8002b6a <stdin_irq_dma+0x15ee>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a2a      	ldr	r2, [pc, #168]	; (8002bdc <stdin_irq_dma+0x1660>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d016      	beq.n	8002b64 <stdin_irq_dma+0x15e8>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a28      	ldr	r2, [pc, #160]	; (8002be0 <stdin_irq_dma+0x1664>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00c      	beq.n	8002b5e <stdin_irq_dma+0x15e2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a25      	ldr	r2, [pc, #148]	; (8002be4 <stdin_irq_dma+0x1668>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d102      	bne.n	8002b58 <stdin_irq_dma+0x15dc>
 8002b52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b56:	e01e      	b.n	8002b96 <stdin_irq_dma+0x161a>
 8002b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b5c:	e01b      	b.n	8002b96 <stdin_irq_dma+0x161a>
 8002b5e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b62:	e018      	b.n	8002b96 <stdin_irq_dma+0x161a>
 8002b64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b68:	e015      	b.n	8002b96 <stdin_irq_dma+0x161a>
 8002b6a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b6e:	e012      	b.n	8002b96 <stdin_irq_dma+0x161a>
 8002b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b74:	e00f      	b.n	8002b96 <stdin_irq_dma+0x161a>
 8002b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b7a:	e00c      	b.n	8002b96 <stdin_irq_dma+0x161a>
 8002b7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b80:	e009      	b.n	8002b96 <stdin_irq_dma+0x161a>
 8002b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b86:	e006      	b.n	8002b96 <stdin_irq_dma+0x161a>
 8002b88:	2304      	movs	r3, #4
 8002b8a:	e004      	b.n	8002b96 <stdin_irq_dma+0x161a>
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	e002      	b.n	8002b96 <stdin_irq_dma+0x161a>
 8002b90:	2304      	movs	r3, #4
 8002b92:	e000      	b.n	8002b96 <stdin_irq_dma+0x161a>
 8002b94:	2304      	movs	r3, #4
 8002b96:	4a14      	ldr	r2, [pc, #80]	; (8002be8 <stdin_irq_dma+0x166c>)
 8002b98:	6093      	str	r3, [r2, #8]
    HAL_UART_Receive_DMA(in->huart, in->buffer, in->size);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6899      	ldr	r1, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	899b      	ldrh	r3, [r3, #12]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f004 fc67 	bl	800747a <HAL_UART_Receive_DMA>
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40026058 	.word	0x40026058
 8002bb8:	40026010 	.word	0x40026010
 8002bbc:	40026410 	.word	0x40026410
 8002bc0:	40026070 	.word	0x40026070
 8002bc4:	40026470 	.word	0x40026470
 8002bc8:	40026028 	.word	0x40026028
 8002bcc:	40026428 	.word	0x40026428
 8002bd0:	40026088 	.word	0x40026088
 8002bd4:	40026488 	.word	0x40026488
 8002bd8:	40026040 	.word	0x40026040
 8002bdc:	40026440 	.word	0x40026440
 8002be0:	400260a0 	.word	0x400260a0
 8002be4:	400264a0 	.word	0x400264a0
 8002be8:	40026000 	.word	0x40026000

08002bec <stdin_irq_uart>:

void stdin_irq_uart(stdin_t *in)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  if (__HAL_UART_GET_FLAG(in->huart, UART_FLAG_IDLE))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d10f      	bne.n	8002c24 <stdin_irq_uart+0x38>
  {
    __HAL_UART_CLEAR_IDLEFLAG(in->huart);
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
    check_buffer(in);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f804 	bl	8002c2c <check_buffer>
  }
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <check_buffer>:

/* Private function implementations
 * --------------------------------------------*/
static void check_buffer(stdin_t *in)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint16_t pos;
  uint16_t new;

  /* Calculate current position in buffer */
  new = __HAL_DMA_GET_COUNTER(HDMA(in));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	81fb      	strh	r3, [r7, #14]
  pos = in->size - new;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	899a      	ldrh	r2, [r3, #12]
 8002c44:	89fb      	ldrh	r3, [r7, #14]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	81bb      	strh	r3, [r7, #12]

  /* Check change in received data */
  if (pos != in->pos)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	89db      	ldrh	r3, [r3, #14]
 8002c4e:	89ba      	ldrh	r2, [r7, #12]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d025      	beq.n	8002ca0 <check_buffer+0x74>
  {
    if (pos > in->pos)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	89db      	ldrh	r3, [r3, #14]
 8002c58:	89ba      	ldrh	r2, [r7, #12]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d90b      	bls.n	8002c76 <check_buffer+0x4a>
      /* Current position is over previous one */
      /* We are in "linear" mode */
      /* Process data directly by subtracting "pointers" */
      fill_buffer(in, in->pos, pos - in->pos);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	89d9      	ldrh	r1, [r3, #14]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	89db      	ldrh	r3, [r3, #14]
 8002c66:	89ba      	ldrh	r2, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f824 	bl	8002cbc <fill_buffer>
 8002c74:	e014      	b.n	8002ca0 <check_buffer+0x74>
    else
    {
      /* We are in "overflow" mode */
      /* First process data to the end of buffer */
      fill_buffer(in, in->pos, in->size - in->pos);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	89d9      	ldrh	r1, [r3, #14]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	899a      	ldrh	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	89db      	ldrh	r3, [r3, #14]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f817 	bl	8002cbc <fill_buffer>
      /* Check and continue with beginning of buffer */
      if (pos > 0)
 8002c8e:	89bb      	ldrh	r3, [r7, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <check_buffer+0x74>
        fill_buffer(in, 0, pos);
 8002c94:	89bb      	ldrh	r3, [r7, #12]
 8002c96:	461a      	mov	r2, r3
 8002c98:	2100      	movs	r1, #0
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f80e 	bl	8002cbc <fill_buffer>
    }
  }

  /* Check and manually update if we reached end of buffer */
  in->pos = (pos == in->size) ? 0 : pos;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	899b      	ldrh	r3, [r3, #12]
 8002ca4:	89ba      	ldrh	r2, [r7, #12]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d001      	beq.n	8002cae <check_buffer+0x82>
 8002caa:	89ba      	ldrh	r2, [r7, #12]
 8002cac:	e000      	b.n	8002cb0 <check_buffer+0x84>
 8002cae:	2200      	movs	r2, #0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	81da      	strh	r2, [r3, #14]
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <fill_buffer>:

static void fill_buffer(stdin_t *in, uint16_t pos, uint16_t size)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	803b      	strh	r3, [r7, #0]
  if (NULL == in->callback)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <fill_buffer+0x2c>
    return;

  in->callback(&in->buffer[pos], size);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6891      	ldr	r1, [r2, #8]
 8002cdc:	887a      	ldrh	r2, [r7, #2]
 8002cde:	440a      	add	r2, r1
 8002ce0:	8839      	ldrh	r1, [r7, #0]
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4798      	blx	r3
 8002ce6:	e000      	b.n	8002cea <fill_buffer+0x2e>
    return;
 8002ce8:	bf00      	nop
}
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_MspInit>:

extern DMA_HandleTypeDef hdma_usart2_rx;


void HAL_MspInit(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <HAL_MspInit+0x4c>)
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	4a0f      	ldr	r2, [pc, #60]	; (8002d3c <HAL_MspInit+0x4c>)
 8002d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d04:	6453      	str	r3, [r2, #68]	; 0x44
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <HAL_MspInit+0x4c>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	603b      	str	r3, [r7, #0]
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_MspInit+0x4c>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <HAL_MspInit+0x4c>)
 8002d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d20:	6413      	str	r3, [r2, #64]	; 0x40
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_MspInit+0x4c>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d2e:	2007      	movs	r0, #7
 8002d30:	f000 ff78 	bl	8003c24 <HAL_NVIC_SetPriorityGrouping>
}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800

08002d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <HAL_UART_MspInit+0xf0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d162      	bne.n	8002e28 <HAL_UART_MspInit+0xe8>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	4b33      	ldr	r3, [pc, #204]	; (8002e34 <HAL_UART_MspInit+0xf4>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	4a32      	ldr	r2, [pc, #200]	; (8002e34 <HAL_UART_MspInit+0xf4>)
 8002d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d70:	6413      	str	r3, [r2, #64]	; 0x40
 8002d72:	4b30      	ldr	r3, [pc, #192]	; (8002e34 <HAL_UART_MspInit+0xf4>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <HAL_UART_MspInit+0xf4>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a2b      	ldr	r2, [pc, #172]	; (8002e34 <HAL_UART_MspInit+0xf4>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b29      	ldr	r3, [pc, #164]	; (8002e34 <HAL_UART_MspInit+0xf4>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin 		= USART_TX_Pin|USART_RX_Pin;
 8002d9a:	230c      	movs	r3, #12
 8002d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 8002da6:	2303      	movs	r3, #3
 8002da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2;
 8002daa:	2307      	movs	r3, #7
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dae:	f107 0314 	add.w	r3, r7, #20
 8002db2:	4619      	mov	r1, r3
 8002db4:	4820      	ldr	r0, [pc, #128]	; (8002e38 <HAL_UART_MspInit+0xf8>)
 8002db6:	f001 fb87 	bl	80044c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance 				= DMA1_Stream5;
 8002dba:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <HAL_UART_MspInit+0xfc>)
 8002dbc:	4a20      	ldr	r2, [pc, #128]	; (8002e40 <HAL_UART_MspInit+0x100>)
 8002dbe:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel 			= DMA_CHANNEL_4;
 8002dc0:	4b1e      	ldr	r3, [pc, #120]	; (8002e3c <HAL_UART_MspInit+0xfc>)
 8002dc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dc6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8002dc8:	4b1c      	ldr	r3, [pc, #112]	; (8002e3c <HAL_UART_MspInit+0xfc>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8002dce:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <HAL_UART_MspInit+0xfc>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8002dd4:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <HAL_UART_MspInit+0xfc>)
 8002dd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dda:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ddc:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <HAL_UART_MspInit+0xfc>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8002de2:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <HAL_UART_MspInit+0xfc>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode 				= DMA_CIRCULAR;
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <HAL_UART_MspInit+0xfc>)
 8002dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <HAL_UART_MspInit+0xfc>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8002df6:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <HAL_UART_MspInit+0xfc>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002dfc:	480f      	ldr	r0, [pc, #60]	; (8002e3c <HAL_UART_MspInit+0xfc>)
 8002dfe:	f000 ff53 	bl	8003ca8 <HAL_DMA_Init>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002e08:	f7fe fac8 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a0b      	ldr	r2, [pc, #44]	; (8002e3c <HAL_UART_MspInit+0xfc>)
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38
 8002e12:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <HAL_UART_MspInit+0xfc>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	2026      	movs	r0, #38	; 0x26
 8002e1e:	f000 ff0c 	bl	8003c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e22:	2026      	movs	r0, #38	; 0x26
 8002e24:	f000 ff25 	bl	8003c72 <HAL_NVIC_EnableIRQ>
  }

}
 8002e28:	bf00      	nop
 8002e2a:	3728      	adds	r7, #40	; 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40004400 	.word	0x40004400
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40020000 	.word	0x40020000
 8002e3c:	20000160 	.word	0x20000160
 8002e40:	40026088 	.word	0x40026088

08002e44 <HAL_I2C_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	; 0x28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <HAL_I2C_MspInit+0xbc>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	4a2a      	ldr	r2, [pc, #168]	; (8002f00 <HAL_I2C_MspInit+0xbc>)
 8002e56:	f043 0302 	orr.w	r3, r3, #2
 8002e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5c:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <HAL_I2C_MspInit+0xbc>)
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	693b      	ldr	r3, [r7, #16]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_I2C_MspInit+0xbc>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	4a23      	ldr	r2, [pc, #140]	; (8002f00 <HAL_I2C_MspInit+0xbc>)
 8002e72:	f043 0302 	orr.w	r3, r3, #2
 8002e76:	6313      	str	r3, [r2, #48]	; 0x30
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <HAL_I2C_MspInit+0xbc>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8002e84:	2340      	movs	r3, #64	; 0x40
 8002e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002e88:	2312      	movs	r3, #18
 8002e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002e90:	2302      	movs	r3, #2
 8002e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 8002e94:	2304      	movs	r3, #4
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4819      	ldr	r0, [pc, #100]	; (8002f04 <HAL_I2C_MspInit+0xc0>)
 8002ea0:	f001 fb12 	bl	80044c8 <HAL_GPIO_Init>

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin 		= I2Cx_SDA_PIN;
 8002ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 8002eaa:	2304      	movs	r3, #4
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002eae:	f107 0314 	add.w	r3, r7, #20
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4813      	ldr	r0, [pc, #76]	; (8002f04 <HAL_I2C_MspInit+0xc0>)
 8002eb6:	f001 fb07 	bl	80044c8 <HAL_GPIO_Init>

  /*##-3- Enable I2C peripheral Clock ########################################*/
  /* Enable I2C1 clock */
  I2Cx_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <HAL_I2C_MspInit+0xbc>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a0f      	ldr	r2, [pc, #60]	; (8002f00 <HAL_I2C_MspInit+0xbc>)
 8002ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <HAL_I2C_MspInit+0xbc>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]

  /*##-4- Configure the NVIC for I2C #########################################*/
  /* NVIC for I2C1 */
  HAL_NVIC_SetPriority(I2Cx_ER_IRQn, 1, 0);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2101      	movs	r1, #1
 8002eda:	2020      	movs	r0, #32
 8002edc:	f000 fead 	bl	8003c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_ER_IRQn);
 8002ee0:	2020      	movs	r0, #32
 8002ee2:	f000 fec6 	bl	8003c72 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2Cx_EV_IRQn, 2, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2102      	movs	r1, #2
 8002eea:	201f      	movs	r0, #31
 8002eec:	f000 fea5 	bl	8003c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2Cx_EV_IRQn);
 8002ef0:	201f      	movs	r0, #31
 8002ef2:	f000 febe 	bl	8003c72 <HAL_NVIC_EnableIRQ>
}
 8002ef6:	bf00      	nop
 8002ef8:	3728      	adds	r7, #40	; 0x28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40020400 	.word	0x40020400

08002f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  while (1)
 8002f0c:	e7fe      	b.n	8002f0c <NMI_Handler+0x4>

08002f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	af00      	add	r7, sp, #0
  while (1)
 8002f12:	e7fe      	b.n	8002f12 <HardFault_Handler+0x4>

08002f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  while (1)
 8002f18:	e7fe      	b.n	8002f18 <MemManage_Handler+0x4>

08002f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  while (1)
 8002f1e:	e7fe      	b.n	8002f1e <BusFault_Handler+0x4>

08002f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  while (1)
 8002f24:	e7fe      	b.n	8002f24 <UsageFault_Handler+0x4>

08002f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0

}
 8002f2a:	bf00      	nop
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0

}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0

}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8002f54:	f000 fd52 	bl	80039fc <HAL_IncTick>
}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002f60:	4803      	ldr	r0, [pc, #12]	; (8002f70 <DMA1_Stream5_IRQHandler+0x14>)
 8002f62:	f001 f839 	bl	8003fd8 <HAL_DMA_IRQHandler>
  serial_handlerDMA();
 8002f66:	f7fe fa51 	bl	800140c <serial_handlerDMA>
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000160 	.word	0x20000160

08002f74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8002f78:	4803      	ldr	r0, [pc, #12]	; (8002f88 <USART2_IRQHandler+0x14>)
 8002f7a:	f004 fb13 	bl	80075a4 <HAL_UART_IRQHandler>
	serial_handlerUART();
 8002f7e:	f7fe fa3b 	bl	80013f8 <serial_handlerUART>
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	2000011c 	.word	0x2000011c

08002f8c <I2C1_EV_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C data transmission
  */
void I2Cx_EV_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(& I2cHandle);
 8002f90:	4802      	ldr	r0, [pc, #8]	; (8002f9c <I2C1_EV_IRQHandler+0x10>)
 8002f92:	f001 fef9 	bl	8004d88 <HAL_I2C_EV_IRQHandler>
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200001c0 	.word	0x200001c0

08002fa0 <I2C1_ER_IRQHandler>:
  * @param  None
  * @retval None
  * @Note   This function is redefined in "main.h" and related to I2C error
  */
void I2Cx_ER_IRQHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(& I2cHandle);
 8002fa4:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <I2C1_ER_IRQHandler+0x10>)
 8002fa6:	f002 f85c 	bl	8005062 <HAL_I2C_ER_IRQHandler>
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200001c0 	.word	0x200001c0

08002fb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	e00a      	b.n	8002fdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fc6:	f3af 8000 	nop.w
 8002fca:	4601      	mov	r1, r0
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	60ba      	str	r2, [r7, #8]
 8002fd2:	b2ca      	uxtb	r2, r1
 8002fd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	dbf0      	blt.n	8002fc6 <_read+0x12>
	}

return len;
 8002fe4:	687b      	ldr	r3, [r7, #4]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b086      	sub	sp, #24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e009      	b.n	8003014 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	60ba      	str	r2, [r7, #8]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fbe5 	bl	80007d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	3301      	adds	r3, #1
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	429a      	cmp	r2, r3
 800301a:	dbf1      	blt.n	8003000 <_write+0x12>
	}
	return len;
 800301c:	687b      	ldr	r3, [r7, #4]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <_close>:

int _close(int file)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
	return -1;
 800302e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800304e:	605a      	str	r2, [r3, #4]
	return 0;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <_isatty>:

int _isatty(int file)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
	return 1;
 8003066:	2301      	movs	r3, #1
}
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
	return 0;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003098:	4a14      	ldr	r2, [pc, #80]	; (80030ec <_sbrk+0x5c>)
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <_sbrk+0x60>)
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030a4:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <_sbrk+0x64>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d102      	bne.n	80030b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030ac:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <_sbrk+0x64>)
 80030ae:	4a12      	ldr	r2, [pc, #72]	; (80030f8 <_sbrk+0x68>)
 80030b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030b2:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <_sbrk+0x64>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d207      	bcs.n	80030d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030c0:	f005 fb60 	bl	8008784 <__errno>
 80030c4:	4603      	mov	r3, r0
 80030c6:	220c      	movs	r2, #12
 80030c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
 80030ce:	e009      	b.n	80030e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <_sbrk+0x64>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <_sbrk+0x64>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <_sbrk+0x64>)
 80030e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030e2:	68fb      	ldr	r3, [r7, #12]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20020000 	.word	0x20020000
 80030f0:	00000400 	.word	0x00000400
 80030f4:	200007d4 	.word	0x200007d4
 80030f8:	200007f0 	.word	0x200007f0

080030fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <SystemInit+0x20>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	4a05      	ldr	r2, [pc, #20]	; (800311c <SystemInit+0x20>)
 8003108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800310c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <vShell_cmdParse>:

/* Public functions definitions */
/********************************************************
 * 	Parsing incoming message						   	*
 ********************************************************/
void vShell_cmdParse(char *input) {
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b095      	sub	sp, #84	; 0x54
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 8003128:	2300      	movs	r3, #0
 800312a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800312e:	e38a      	b.n	8003846 <vShell_cmdParse+0x726>
		if(!memcmp(input,(char*)&str_cfg_header[u8_idx][0], CFG_HEADER_LEN)) {
 8003130:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	4aac      	ldr	r2, [pc, #688]	; (80033ec <vShell_cmdParse+0x2cc>)
 800313c:	4413      	add	r3, r2
 800313e:	2205      	movs	r2, #5
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f005 fb48 	bl	80087d8 <memcmp>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 8376 	bne.w	800383c <vShell_cmdParse+0x71c>
			char *pChar 		= &input[CFG_HEADER_LEN];		//pointer untuk menyimpan header (5 char)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3305      	adds	r3, #5
 8003154:	64bb      	str	r3, [r7, #72]	; 0x48
			char *pChar2 		= &input[CFG_HEADER_LEN];		//pointer untuk menyimpan header (5 char)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3305      	adds	r3, #5
 800315a:	623b      	str	r3, [r7, #32]
			uint8_t u8_start 	= 0;			// ini penanda yang akan bergeser tiap indeks (menandai lokasi dari sparating symboll)
 800315c:	2300      	movs	r3, #0
 800315e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			uint8_t u8_stop 	= 0;			// ini penenda start pointer paling awal atau awal baru setelah sparating symboll
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			uint8_t u8_cnt 		= 0;			// menampung ada berapa sih inputan nya
 8003168:	2300      	movs	r3, #0
 800316a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

			char str_res[20];

			if (u8_idx==1) {						//{RAA}
 800316e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003172:	2b01      	cmp	r3, #1
 8003174:	d107      	bne.n	8003186 <vShell_cmdParse+0x66>
				bitFlag |= BFLAG_I2C_RAA;
 8003176:	4b9e      	ldr	r3, [pc, #632]	; (80033f0 <vShell_cmdParse+0x2d0>)
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	f043 0302 	orr.w	r3, r3, #2
 800317e:	b29a      	uxth	r2, r3
 8003180:	4b9b      	ldr	r3, [pc, #620]	; (80033f0 <vShell_cmdParse+0x2d0>)
 8003182:	801a      	strh	r2, [r3, #0]
 8003184:	e35a      	b.n	800383c <vShell_cmdParse+0x71c>
			}

			else if (u8_idx==10) {					//{RBA}
 8003186:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800318a:	2b0a      	cmp	r3, #10
 800318c:	d107      	bne.n	800319e <vShell_cmdParse+0x7e>
				bitFlag |= BFLAG_I2C_RBA;
 800318e:	4b98      	ldr	r3, [pc, #608]	; (80033f0 <vShell_cmdParse+0x2d0>)
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003196:	b29a      	uxth	r2, r3
 8003198:	4b95      	ldr	r3, [pc, #596]	; (80033f0 <vShell_cmdParse+0x2d0>)
 800319a:	801a      	strh	r2, [r3, #0]
 800319c:	e34e      	b.n	800383c <vShell_cmdParse+0x71c>
			}

			else if (u8_idx==11) {					//{WB1:
 800319e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80031a2:	2b0b      	cmp	r3, #11
 80031a4:	d170      	bne.n	8003288 <vShell_cmdParse+0x168>
				bitFlag |= BFLAG_I2C_WBS;
 80031a6:	4b92      	ldr	r3, [pc, #584]	; (80033f0 <vShell_cmdParse+0x2d0>)
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	4b8f      	ldr	r3, [pc, #572]	; (80033f0 <vShell_cmdParse+0x2d0>)
 80031b2:	801a      	strh	r2, [r3, #0]

				uint32_t temp = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	643b      	str	r3, [r7, #64]	; 0x40
				uint8_t start = 5;
 80031b8:	2305      	movs	r3, #5
 80031ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

			    for (uint8_t j = 0; j<CFG_LENGTH; j++)
 80031be:	2300      	movs	r3, #0
 80031c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80031c4:	e058      	b.n	8003278 <vShell_cmdParse+0x158>
			    {
			    	if(input[start+3]<128)
 80031c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80031ca:	3303      	adds	r3, #3
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	b25b      	sxtb	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	db1f      	blt.n	8003218 <vShell_cmdParse+0xf8>
			    	{
			    		temp = input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216);
 80031d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	4413      	add	r3, r2
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	4619      	mov	r1, r3
 80031e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80031e8:	3301      	adds	r3, #1
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	4413      	add	r3, r2
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	18ca      	adds	r2, r1, r3
 80031f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80031f8:	3302      	adds	r3, #2
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	440b      	add	r3, r1
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	041b      	lsls	r3, r3, #16
 8003202:	441a      	add	r2, r3
 8003204:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003208:	3303      	adds	r3, #3
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	440b      	add	r3, r1
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	061b      	lsls	r3, r3, #24
 8003212:	4413      	add	r3, r2
 8003214:	643b      	str	r3, [r7, #64]	; 0x40
 8003216:	e01e      	b.n	8003256 <vShell_cmdParse+0x136>
			    	}
			    	else
			    	{
			    		temp = (input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216))-4294967296;
 8003218:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	4619      	mov	r1, r3
 8003224:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003228:	3301      	adds	r3, #1
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	18ca      	adds	r2, r1, r3
 8003234:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003238:	3302      	adds	r3, #2
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	440b      	add	r3, r1
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	041b      	lsls	r3, r3, #16
 8003242:	441a      	add	r2, r3
 8003244:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003248:	3303      	adds	r3, #3
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	440b      	add	r3, r1
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	061b      	lsls	r3, r3, #24
 8003252:	4413      	add	r3, r2
 8003254:	643b      	str	r3, [r7, #64]	; 0x40
			    	}
			    	aTxBuffer[j+1] = temp;
 8003256:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800325a:	3301      	adds	r3, #1
 800325c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800325e:	4965      	ldr	r1, [pc, #404]	; (80033f4 <vShell_cmdParse+0x2d4>)
 8003260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			    	start+=4;
 8003264:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003268:	3304      	adds	r3, #4
 800326a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			    for (uint8_t j = 0; j<CFG_LENGTH; j++)
 800326e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003272:	3301      	adds	r3, #1
 8003274:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003278:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800327c:	2b09      	cmp	r3, #9
 800327e:	d9a2      	bls.n	80031c6 <vShell_cmdParse+0xa6>
			    }
			    aTxBuffer[0] = 1;
 8003280:	4b5c      	ldr	r3, [pc, #368]	; (80033f4 <vShell_cmdParse+0x2d4>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e2d9      	b.n	800383c <vShell_cmdParse+0x71c>
			}

			else if (u8_idx==12) {					//{WB2:
 8003288:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800328c:	2b0c      	cmp	r3, #12
 800328e:	d170      	bne.n	8003372 <vShell_cmdParse+0x252>
				bitFlag |= BFLAG_I2C_WBS;
 8003290:	4b57      	ldr	r3, [pc, #348]	; (80033f0 <vShell_cmdParse+0x2d0>)
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003298:	b29a      	uxth	r2, r3
 800329a:	4b55      	ldr	r3, [pc, #340]	; (80033f0 <vShell_cmdParse+0x2d0>)
 800329c:	801a      	strh	r2, [r3, #0]

				uint32_t temp = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	63bb      	str	r3, [r7, #56]	; 0x38
				uint8_t start = 5;
 80032a2:	2305      	movs	r3, #5
 80032a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				for (uint8_t j = 0; j<CFG_LENGTH; j++)
 80032a8:	2300      	movs	r3, #0
 80032aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80032ae:	e058      	b.n	8003362 <vShell_cmdParse+0x242>
				{
					if(input[start+3]<128)
 80032b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032b4:	3303      	adds	r3, #3
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b25b      	sxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db1f      	blt.n	8003302 <vShell_cmdParse+0x1e2>
					{
						temp = input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216);
 80032c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	4619      	mov	r1, r3
 80032ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032d2:	3301      	adds	r3, #1
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	18ca      	adds	r2, r1, r3
 80032de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032e2:	3302      	adds	r3, #2
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	440b      	add	r3, r1
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	441a      	add	r2, r3
 80032ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032f2:	3303      	adds	r3, #3
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	440b      	add	r3, r1
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	061b      	lsls	r3, r3, #24
 80032fc:	4413      	add	r3, r2
 80032fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003300:	e01e      	b.n	8003340 <vShell_cmdParse+0x220>
					}
					else
					{
						temp = (input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216))-4294967296;
 8003302:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	4619      	mov	r1, r3
 800330e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003312:	3301      	adds	r3, #1
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	18ca      	adds	r2, r1, r3
 800331e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003322:	3302      	adds	r3, #2
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	440b      	add	r3, r1
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	441a      	add	r2, r3
 800332e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003332:	3303      	adds	r3, #3
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	440b      	add	r3, r1
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	4413      	add	r3, r2
 800333e:	63bb      	str	r3, [r7, #56]	; 0x38
					}
					aTxBuffer[j+1] = temp;
 8003340:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003344:	3301      	adds	r3, #1
 8003346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003348:	492a      	ldr	r1, [pc, #168]	; (80033f4 <vShell_cmdParse+0x2d4>)
 800334a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					start+=4;
 800334e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003352:	3304      	adds	r3, #4
 8003354:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				for (uint8_t j = 0; j<CFG_LENGTH; j++)
 8003358:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800335c:	3301      	adds	r3, #1
 800335e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003362:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003366:	2b09      	cmp	r3, #9
 8003368:	d9a2      	bls.n	80032b0 <vShell_cmdParse+0x190>
				}
				aTxBuffer[0] = 2;
 800336a:	4b22      	ldr	r3, [pc, #136]	; (80033f4 <vShell_cmdParse+0x2d4>)
 800336c:	2202      	movs	r2, #2
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e264      	b.n	800383c <vShell_cmdParse+0x71c>
			}

			else if (u8_idx==13) {					//{WB3:
 8003372:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003376:	2b0d      	cmp	r3, #13
 8003378:	d176      	bne.n	8003468 <vShell_cmdParse+0x348>
				bitFlag |= BFLAG_I2C_WBS;
 800337a:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <vShell_cmdParse+0x2d0>)
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003382:	b29a      	uxth	r2, r3
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <vShell_cmdParse+0x2d0>)
 8003386:	801a      	strh	r2, [r3, #0]

				uint32_t temp = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	633b      	str	r3, [r7, #48]	; 0x30
				uint8_t start = 5;
 800338c:	2305      	movs	r3, #5
 800338e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				for (uint8_t j = 0; j<CFG_LENGTH; j++)
 8003392:	2300      	movs	r3, #0
 8003394:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003398:	e05e      	b.n	8003458 <vShell_cmdParse+0x338>
				{
					if(input[start+3]<128)
 800339a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800339e:	3303      	adds	r3, #3
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4413      	add	r3, r2
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	b25b      	sxtb	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	db25      	blt.n	80033f8 <vShell_cmdParse+0x2d8>
					{
						temp = input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216);
 80033ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4413      	add	r3, r2
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	4619      	mov	r1, r3
 80033b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033bc:	3301      	adds	r3, #1
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	18ca      	adds	r2, r1, r3
 80033c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033cc:	3302      	adds	r3, #2
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	440b      	add	r3, r1
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	041b      	lsls	r3, r3, #16
 80033d6:	441a      	add	r2, r3
 80033d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033dc:	3303      	adds	r3, #3
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	440b      	add	r3, r1
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	061b      	lsls	r3, r3, #24
 80033e6:	4413      	add	r3, r2
 80033e8:	633b      	str	r3, [r7, #48]	; 0x30
 80033ea:	e024      	b.n	8003436 <vShell_cmdParse+0x316>
 80033ec:	20000030 	.word	0x20000030
 80033f0:	20000518 	.word	0x20000518
 80033f4:	20000000 	.word	0x20000000
					}
					else
					{
						temp = (input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216))-4294967296;
 80033f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	4619      	mov	r1, r3
 8003404:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003408:	3301      	adds	r3, #1
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	18ca      	adds	r2, r1, r3
 8003414:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003418:	3302      	adds	r3, #2
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	440b      	add	r3, r1
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	441a      	add	r2, r3
 8003424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003428:	3303      	adds	r3, #3
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	440b      	add	r3, r1
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	061b      	lsls	r3, r3, #24
 8003432:	4413      	add	r3, r2
 8003434:	633b      	str	r3, [r7, #48]	; 0x30
					}
					aTxBuffer[j+1] = temp;
 8003436:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800343a:	3301      	adds	r3, #1
 800343c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800343e:	49a1      	ldr	r1, [pc, #644]	; (80036c4 <vShell_cmdParse+0x5a4>)
 8003440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					start+=4;
 8003444:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003448:	3304      	adds	r3, #4
 800344a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				for (uint8_t j = 0; j<CFG_LENGTH; j++)
 800344e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003452:	3301      	adds	r3, #1
 8003454:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003458:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800345c:	2b09      	cmp	r3, #9
 800345e:	d99c      	bls.n	800339a <vShell_cmdParse+0x27a>
				}
				aTxBuffer[0] = 3;
 8003460:	4b98      	ldr	r3, [pc, #608]	; (80036c4 <vShell_cmdParse+0x5a4>)
 8003462:	2203      	movs	r2, #3
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e1e9      	b.n	800383c <vShell_cmdParse+0x71c>
			}

			else if (u8_idx==15) {					//{RB1}
 8003468:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800346c:	2b0f      	cmp	r3, #15
 800346e:	d10a      	bne.n	8003486 <vShell_cmdParse+0x366>
				bitFlag |= BFLAG_I2C_WBS;
 8003470:	4b95      	ldr	r3, [pc, #596]	; (80036c8 <vShell_cmdParse+0x5a8>)
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003478:	b29a      	uxth	r2, r3
 800347a:	4b93      	ldr	r3, [pc, #588]	; (80036c8 <vShell_cmdParse+0x5a8>)
 800347c:	801a      	strh	r2, [r3, #0]
				aTxBuffer[0] = 4;
 800347e:	4b91      	ldr	r3, [pc, #580]	; (80036c4 <vShell_cmdParse+0x5a4>)
 8003480:	2204      	movs	r2, #4
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e1da      	b.n	800383c <vShell_cmdParse+0x71c>
			}

			else if (u8_idx==16) {					//{RB2}
 8003486:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800348a:	2b10      	cmp	r3, #16
 800348c:	d10a      	bne.n	80034a4 <vShell_cmdParse+0x384>
				bitFlag |= BFLAG_I2C_WBS;
 800348e:	4b8e      	ldr	r3, [pc, #568]	; (80036c8 <vShell_cmdParse+0x5a8>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003496:	b29a      	uxth	r2, r3
 8003498:	4b8b      	ldr	r3, [pc, #556]	; (80036c8 <vShell_cmdParse+0x5a8>)
 800349a:	801a      	strh	r2, [r3, #0]
				aTxBuffer[0] = 5;
 800349c:	4b89      	ldr	r3, [pc, #548]	; (80036c4 <vShell_cmdParse+0x5a4>)
 800349e:	2205      	movs	r2, #5
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	e1cb      	b.n	800383c <vShell_cmdParse+0x71c>
			}

			else if (u8_idx==17) {					//{RB3}
 80034a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80034a8:	2b11      	cmp	r3, #17
 80034aa:	d10a      	bne.n	80034c2 <vShell_cmdParse+0x3a2>
				bitFlag |= BFLAG_I2C_WBS;
 80034ac:	4b86      	ldr	r3, [pc, #536]	; (80036c8 <vShell_cmdParse+0x5a8>)
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	4b84      	ldr	r3, [pc, #528]	; (80036c8 <vShell_cmdParse+0x5a8>)
 80034b8:	801a      	strh	r2, [r3, #0]
				aTxBuffer[0] = 6;
 80034ba:	4b82      	ldr	r3, [pc, #520]	; (80036c4 <vShell_cmdParse+0x5a4>)
 80034bc:	2206      	movs	r2, #6
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e1bc      	b.n	800383c <vShell_cmdParse+0x71c>
			}

			else if (u8_idx==18) {					//{WBA:
 80034c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80034c6:	2b12      	cmp	r3, #18
 80034c8:	d172      	bne.n	80035b0 <vShell_cmdParse+0x490>
				bitFlag |= BFLAG_I2C_WBA;
 80034ca:	4b7f      	ldr	r3, [pc, #508]	; (80036c8 <vShell_cmdParse+0x5a8>)
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	4b7c      	ldr	r3, [pc, #496]	; (80036c8 <vShell_cmdParse+0x5a8>)
 80034d6:	801a      	strh	r2, [r3, #0]

				uint32_t num = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
				uint8_t start = 5;
 80034dc:	2305      	movs	r3, #5
 80034de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				for (uint8_t j = 0; j<CFG_LENGTH*3; j++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80034e8:	e057      	b.n	800359a <vShell_cmdParse+0x47a>
				{
					if(input[start+3]<128)
 80034ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034ee:	3303      	adds	r3, #3
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	4413      	add	r3, r2
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	db1f      	blt.n	800353c <vShell_cmdParse+0x41c>
					{
						num = input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216);
 80034fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	4413      	add	r3, r2
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	4619      	mov	r1, r3
 8003508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800350c:	3301      	adds	r3, #1
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	18ca      	adds	r2, r1, r3
 8003518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800351c:	3302      	adds	r3, #2
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	440b      	add	r3, r1
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	041b      	lsls	r3, r3, #16
 8003526:	441a      	add	r2, r3
 8003528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800352c:	3303      	adds	r3, #3
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	440b      	add	r3, r1
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	4413      	add	r3, r2
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
 800353a:	e01e      	b.n	800357a <vShell_cmdParse+0x45a>
					}
					else
					{
						num = (input[start]+(input[start+1]*256)+(input[start+2]*65536)+(input[start+3]*16777216))-4294967296;
 800353c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	4413      	add	r3, r2
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	4619      	mov	r1, r3
 8003548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800354c:	3301      	adds	r3, #1
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	18ca      	adds	r2, r1, r3
 8003558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800355c:	3302      	adds	r3, #2
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	440b      	add	r3, r1
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	041b      	lsls	r3, r3, #16
 8003566:	441a      	add	r2, r3
 8003568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800356c:	3303      	adds	r3, #3
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	440b      	add	r3, r1
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	061b      	lsls	r3, r3, #24
 8003576:	4413      	add	r3, r2
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					temp[j] = num;
 800357a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800357e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003580:	4952      	ldr	r1, [pc, #328]	; (80036cc <vShell_cmdParse+0x5ac>)
 8003582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					start+=4;
 8003586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800358a:	3304      	adds	r3, #4
 800358c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				for (uint8_t j = 0; j<CFG_LENGTH*3; j++)
 8003590:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003594:	3301      	adds	r3, #1
 8003596:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800359a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800359e:	2b1d      	cmp	r3, #29
 80035a0:	d9a3      	bls.n	80034ea <vShell_cmdParse+0x3ca>
				}
				Set_aTxBuffer(7, temp, 0, CFG_LENGTH*sizeof(temp[0]));
 80035a2:	2328      	movs	r3, #40	; 0x28
 80035a4:	2200      	movs	r2, #0
 80035a6:	4949      	ldr	r1, [pc, #292]	; (80036cc <vShell_cmdParse+0x5ac>)
 80035a8:	2007      	movs	r0, #7
 80035aa:	f7fd f8e5 	bl	8000778 <Set_aTxBuffer>
 80035ae:	e145      	b.n	800383c <vShell_cmdParse+0x71c>
			}

			else if (u8_idx == 5){		//{RD0} Read Buffer TX and RX from Master
 80035b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80035b4:	2b05      	cmp	r3, #5
 80035b6:	d107      	bne.n	80035c8 <vShell_cmdParse+0x4a8>
				bitFlag |= BFLAG_I2C_RDB;
 80035b8:	4b43      	ldr	r3, [pc, #268]	; (80036c8 <vShell_cmdParse+0x5a8>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	f043 0304 	orr.w	r3, r3, #4
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	4b41      	ldr	r3, [pc, #260]	; (80036c8 <vShell_cmdParse+0x5a8>)
 80035c4:	801a      	strh	r2, [r3, #0]
 80035c6:	e139      	b.n	800383c <vShell_cmdParse+0x71c>
			}

			else if (u8_idx == 6){ 		//{RD1} Read from res1
 80035c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80035cc:	2b06      	cmp	r3, #6
 80035ce:	d10a      	bne.n	80035e6 <vShell_cmdParse+0x4c6>
				aTxBuffer[0]=4;
 80035d0:	4b3c      	ldr	r3, [pc, #240]	; (80036c4 <vShell_cmdParse+0x5a4>)
 80035d2:	2204      	movs	r2, #4
 80035d4:	601a      	str	r2, [r3, #0]
				bitFlag |= BFLAG_I2C_WAS;
 80035d6:	4b3c      	ldr	r3, [pc, #240]	; (80036c8 <vShell_cmdParse+0x5a8>)
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	f043 0320 	orr.w	r3, r3, #32
 80035de:	b29a      	uxth	r2, r3
 80035e0:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <vShell_cmdParse+0x5a8>)
 80035e2:	801a      	strh	r2, [r3, #0]
 80035e4:	e12a      	b.n	800383c <vShell_cmdParse+0x71c>
			}
			else if (u8_idx == 7){ 		//{RD2} Read from res2
 80035e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80035ea:	2b07      	cmp	r3, #7
 80035ec:	d10a      	bne.n	8003604 <vShell_cmdParse+0x4e4>
				aTxBuffer[0]=5;
 80035ee:	4b35      	ldr	r3, [pc, #212]	; (80036c4 <vShell_cmdParse+0x5a4>)
 80035f0:	2205      	movs	r2, #5
 80035f2:	601a      	str	r2, [r3, #0]
				bitFlag |= BFLAG_I2C_WAS;
 80035f4:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <vShell_cmdParse+0x5a8>)
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	f043 0320 	orr.w	r3, r3, #32
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <vShell_cmdParse+0x5a8>)
 8003600:	801a      	strh	r2, [r3, #0]
 8003602:	e11b      	b.n	800383c <vShell_cmdParse+0x71c>
			}
			else if (u8_idx == 8){		//{RD3} Read from res3
 8003604:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003608:	2b08      	cmp	r3, #8
 800360a:	d10a      	bne.n	8003622 <vShell_cmdParse+0x502>
				aTxBuffer[0]=6;
 800360c:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <vShell_cmdParse+0x5a4>)
 800360e:	2206      	movs	r2, #6
 8003610:	601a      	str	r2, [r3, #0]
				bitFlag |= BFLAG_I2C_WAS;
 8003612:	4b2d      	ldr	r3, [pc, #180]	; (80036c8 <vShell_cmdParse+0x5a8>)
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	f043 0320 	orr.w	r3, r3, #32
 800361a:	b29a      	uxth	r2, r3
 800361c:	4b2a      	ldr	r3, [pc, #168]	; (80036c8 <vShell_cmdParse+0x5a8>)
 800361e:	801a      	strh	r2, [r3, #0]
 8003620:	e10c      	b.n	800383c <vShell_cmdParse+0x71c>
			}

			else if (u8_idx == 9){		//{WAA: Read all
 8003622:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003626:	2b09      	cmp	r3, #9
 8003628:	d175      	bne.n	8003716 <vShell_cmdParse+0x5f6>
				for (uint8_t i=0; i<30; i++){
 800362a:	2300      	movs	r3, #0
 800362c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003630:	e00a      	b.n	8003648 <vShell_cmdParse+0x528>
					temp[i] = 0;
 8003632:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003636:	4a25      	ldr	r2, [pc, #148]	; (80036cc <vShell_cmdParse+0x5ac>)
 8003638:	2100      	movs	r1, #0
 800363a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (uint8_t i=0; i<30; i++){
 800363e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003642:	3301      	adds	r3, #1
 8003644:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003648:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800364c:	2b1d      	cmp	r3, #29
 800364e:	d9f0      	bls.n	8003632 <vShell_cmdParse+0x512>
				}

				while (*pChar) {
 8003650:	e05c      	b.n	800370c <vShell_cmdParse+0x5ec>
					if(*pChar == ';' || *pChar == '}') {
 8003652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b3b      	cmp	r3, #59	; 0x3b
 8003658:	d003      	beq.n	8003662 <vShell_cmdParse+0x542>
 800365a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b7d      	cmp	r3, #125	; 0x7d
 8003660:	d14c      	bne.n	80036fc <vShell_cmdParse+0x5dc>
						memset(&str_res[0], 0, 20);		// default/reset untuk mendeklarasikan array str_res akan bernilai 0 semua sebanyak 10 indeks mulai dari str_res[0]
 8003662:	f107 030c 	add.w	r3, r7, #12
 8003666:	2214      	movs	r2, #20
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f005 f8d2 	bl	8008814 <memset>
						memcpy(&str_res[0], &pChar2[u8_stop], u8_start - u8_stop);	// mengcopy data array dari pChar2[u8_stop] sejumlah (u8_start - u8_stop0 char menuju str_res
 8003670:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003674:	6a3a      	ldr	r2, [r7, #32]
 8003676:	18d1      	adds	r1, r2, r3
 8003678:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800367c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	461a      	mov	r2, r3
 8003684:	f107 030c 	add.w	r3, r7, #12
 8003688:	4618      	mov	r0, r3
 800368a:	f005 f8b5 	bl	80087f8 <memcpy>

						if(strlen(str_res)>0){
 800368e:	f107 030c 	add.w	r3, r7, #12
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <vShell_cmdParse+0x58e>
							temp[u8_cnt] = tinysh_dec(&str_res[0]);
 8003698:	f897 4045 	ldrb.w	r4, [r7, #69]	; 0x45
 800369c:	f107 030c 	add.w	r3, r7, #12
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 f8e1 	bl	8003868 <tinysh_dec>
 80036a6:	4603      	mov	r3, r0
 80036a8:	4a08      	ldr	r2, [pc, #32]	; (80036cc <vShell_cmdParse+0x5ac>)
 80036aa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
						}

						if(*pChar == ';') { u8_stop = u8_start + 1; }
 80036ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b3b      	cmp	r3, #59	; 0x3b
 80036b4:	d10c      	bne.n	80036d0 <vShell_cmdParse+0x5b0>
 80036b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036ba:	3301      	adds	r3, #1
 80036bc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80036c0:	e017      	b.n	80036f2 <vShell_cmdParse+0x5d2>
 80036c2:	bf00      	nop
 80036c4:	20000000 	.word	0x20000000
 80036c8:	20000518 	.word	0x20000518
 80036cc:	20000548 	.word	0x20000548
						else if(*pChar == '}') {
 80036d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b7d      	cmp	r3, #125	; 0x7d
 80036d6:	d10c      	bne.n	80036f2 <vShell_cmdParse+0x5d2>
							Set_aTxBuffer(7, temp, 0, CFG_LENGTH*sizeof(temp[0]));
 80036d8:	2328      	movs	r3, #40	; 0x28
 80036da:	2200      	movs	r2, #0
 80036dc:	495f      	ldr	r1, [pc, #380]	; (800385c <vShell_cmdParse+0x73c>)
 80036de:	2007      	movs	r0, #7
 80036e0:	f7fd f84a 	bl	8000778 <Set_aTxBuffer>
							bitFlag |= BFLAG_I2C_WAA;
 80036e4:	4b5e      	ldr	r3, [pc, #376]	; (8003860 <vShell_cmdParse+0x740>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	f043 0310 	orr.w	r3, r3, #16
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	4b5c      	ldr	r3, [pc, #368]	; (8003860 <vShell_cmdParse+0x740>)
 80036f0:	801a      	strh	r2, [r3, #0]
						}
						u8_cnt++;
 80036f2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80036f6:	3301      	adds	r3, #1
 80036f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					}
					pChar++;
 80036fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036fe:	3301      	adds	r3, #1
 8003700:	64bb      	str	r3, [r7, #72]	; 0x48
					u8_start++;
 8003702:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003706:	3301      	adds	r3, #1
 8003708:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				while (*pChar) {
 800370c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d19e      	bne.n	8003652 <vShell_cmdParse+0x532>
				}
				break;
 8003714:	e09d      	b.n	8003852 <vShell_cmdParse+0x732>
			}

			else if ((u8_idx > 0) && (u8_idx < 5)) {
 8003716:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 808e 	beq.w	800383c <vShell_cmdParse+0x71c>
 8003720:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003724:	2b04      	cmp	r3, #4
 8003726:	f200 8089 	bhi.w	800383c <vShell_cmdParse+0x71c>
				/* Reset TX Buffer from index 1 to 10*/
				for (uint8_t i=0; i<10; i++){
 800372a:	2300      	movs	r3, #0
 800372c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8003730:	e00b      	b.n	800374a <vShell_cmdParse+0x62a>
					aTxBuffer[i+1] = 0;
 8003732:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003736:	3301      	adds	r3, #1
 8003738:	4a4a      	ldr	r2, [pc, #296]	; (8003864 <vShell_cmdParse+0x744>)
 800373a:	2100      	movs	r1, #0
 800373c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (uint8_t i=0; i<10; i++){
 8003740:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003744:	3301      	adds	r3, #1
 8003746:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800374a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800374e:	2b09      	cmp	r3, #9
 8003750:	d9ef      	bls.n	8003732 <vShell_cmdParse+0x612>
				}

				/* WRITE HEADER */
				while (*pChar) {
 8003752:	e06e      	b.n	8003832 <vShell_cmdParse+0x712>
					if(*pChar == ';' || *pChar == '}') {
 8003754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b3b      	cmp	r3, #59	; 0x3b
 800375a:	d003      	beq.n	8003764 <vShell_cmdParse+0x644>
 800375c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b7d      	cmp	r3, #125	; 0x7d
 8003762:	d15e      	bne.n	8003822 <vShell_cmdParse+0x702>
						memset(&str_res[0], 0, 20);		// default/reset untuk mendeklarasikan array str_res akan bernilai 0 semua sebanyak 10 indeks mulai dari str_res[0]
 8003764:	f107 030c 	add.w	r3, r7, #12
 8003768:	2214      	movs	r2, #20
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f005 f851 	bl	8008814 <memset>
						memcpy(&str_res[0], &pChar2[u8_stop], u8_start - u8_stop);	// mengcopy data array dari pChar2[u8_stop] sejumlah (u8_start - u8_stop0 char menuju str_res
 8003772:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003776:	6a3a      	ldr	r2, [r7, #32]
 8003778:	18d1      	adds	r1, r2, r3
 800377a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800377e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	461a      	mov	r2, r3
 8003786:	f107 030c 	add.w	r3, r7, #12
 800378a:	4618      	mov	r0, r3
 800378c:	f005 f834 	bl	80087f8 <memcpy>

						if(strlen(str_res)>0){
 8003790:	f107 030c 	add.w	r3, r7, #12
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <vShell_cmdParse+0x692>
							aTxBuffer[u8_cnt+1] = tinysh_dec(&str_res[0]);
 800379a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800379e:	1c5c      	adds	r4, r3, #1
 80037a0:	f107 030c 	add.w	r3, r7, #12
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f85f 	bl	8003868 <tinysh_dec>
 80037aa:	4603      	mov	r3, r0
 80037ac:	4a2d      	ldr	r2, [pc, #180]	; (8003864 <vShell_cmdParse+0x744>)
 80037ae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
						}

						if(*pChar == ';') { u8_stop = u8_start + 1; }
 80037b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b3b      	cmp	r3, #59	; 0x3b
 80037b8:	d105      	bne.n	80037c6 <vShell_cmdParse+0x6a6>
 80037ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037be:	3301      	adds	r3, #1
 80037c0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80037c4:	e028      	b.n	8003818 <vShell_cmdParse+0x6f8>
						else if(*pChar == '}') {
 80037c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b7d      	cmp	r3, #125	; 0x7d
 80037cc:	d124      	bne.n	8003818 <vShell_cmdParse+0x6f8>
							if (u8_idx == 2){ // {WR1: Write at form 1
 80037ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d103      	bne.n	80037de <vShell_cmdParse+0x6be>
								/*Set first index as a trigger for slave*/
								aTxBuffer[0]=1;
 80037d6:	4b23      	ldr	r3, [pc, #140]	; (8003864 <vShell_cmdParse+0x744>)
 80037d8:	2201      	movs	r2, #1
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	e00e      	b.n	80037fc <vShell_cmdParse+0x6dc>
							}
							else if (u8_idx == 3){ // {WR2: Write at form 2
 80037de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d103      	bne.n	80037ee <vShell_cmdParse+0x6ce>
								aTxBuffer[0]=2;
 80037e6:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <vShell_cmdParse+0x744>)
 80037e8:	2202      	movs	r2, #2
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e006      	b.n	80037fc <vShell_cmdParse+0x6dc>
							}
							else if (u8_idx == 4){ // {WR3: Write at form 3
 80037ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d102      	bne.n	80037fc <vShell_cmdParse+0x6dc>
								aTxBuffer[0]=3;
 80037f6:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <vShell_cmdParse+0x744>)
 80037f8:	2203      	movs	r2, #3
 80037fa:	601a      	str	r2, [r3, #0]
							}
							bitFlag |= BFLAG_I2C_WAS;
 80037fc:	4b18      	ldr	r3, [pc, #96]	; (8003860 <vShell_cmdParse+0x740>)
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	f043 0320 	orr.w	r3, r3, #32
 8003804:	b29a      	uxth	r2, r3
 8003806:	4b16      	ldr	r3, [pc, #88]	; (8003860 <vShell_cmdParse+0x740>)
 8003808:	801a      	strh	r2, [r3, #0]
							bitFlag |= BFLAG_I2C_RDB;
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <vShell_cmdParse+0x740>)
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	f043 0304 	orr.w	r3, r3, #4
 8003812:	b29a      	uxth	r2, r3
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <vShell_cmdParse+0x740>)
 8003816:	801a      	strh	r2, [r3, #0]
						}
						u8_cnt++;
 8003818:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800381c:	3301      	adds	r3, #1
 800381e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					}
					pChar++;
 8003822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003824:	3301      	adds	r3, #1
 8003826:	64bb      	str	r3, [r7, #72]	; 0x48
					u8_start++;
 8003828:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800382c:	3301      	adds	r3, #1
 800382e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				while (*pChar) {
 8003832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d18c      	bne.n	8003754 <vShell_cmdParse+0x634>
				}
				break;
 800383a:	e00a      	b.n	8003852 <vShell_cmdParse+0x732>
	for(uint8_t u8_idx = 0; u8_idx < CFG_HEADER_NUM; u8_idx++) {
 800383c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003840:	3301      	adds	r3, #1
 8003842:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003846:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800384a:	2b13      	cmp	r3, #19
 800384c:	f67f ac70 	bls.w	8003130 <vShell_cmdParse+0x10>
			}
		}
	}
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	3754      	adds	r7, #84	; 0x54
 8003856:	46bd      	mov	sp, r7
 8003858:	bd90      	pop	{r4, r7, pc}
 800385a:	bf00      	nop
 800385c:	20000548 	.word	0x20000548
 8003860:	20000518 	.word	0x20000518
 8003864:	20000000 	.word	0x20000000

08003868 <tinysh_dec>:

/*********************************************************************
 * @name	: tinysh_dec
 * @brief	: string to decimal conversion (up to 15 chars).
 *********************************************************************/
long tinysh_dec(char *s) {
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  unsigned long res=0;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
  uint8_t index = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	72fb      	strb	r3, [r7, #11]
  int8_t min	= 1;			//Penanda masukan - atau +
 8003878:	2301      	movs	r3, #1
 800387a:	72bb      	strb	r3, [r7, #10]

  while(*s) {
 800387c:	e031      	b.n	80038e2 <tinysh_dec+0x7a>
	  res*=10;					//berfungsi menjadikan result kelipatan pangkat 10 (menjadikan puluhan)
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	60fb      	str	r3, [r7, #12]

	  if((*s == '-')&&(index == 0))			// jika inputan negatif
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b2d      	cmp	r3, #45	; 0x2d
 8003890:	d105      	bne.n	800389e <tinysh_dec+0x36>
 8003892:	7afb      	ldrb	r3, [r7, #11]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d102      	bne.n	800389e <tinysh_dec+0x36>
		  min = -1;
 8003898:	23ff      	movs	r3, #255	; 0xff
 800389a:	72bb      	strb	r3, [r7, #10]
 800389c:	e018      	b.n	80038d0 <tinysh_dec+0x68>
	  else if((*s == '0')&&(index == 0))	// jika inputan 0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b30      	cmp	r3, #48	; 0x30
 80038a4:	d105      	bne.n	80038b2 <tinysh_dec+0x4a>
 80038a6:	7afb      	ldrb	r3, [r7, #11]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d102      	bne.n	80038b2 <tinysh_dec+0x4a>
		  res = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e00e      	b.n	80038d0 <tinysh_dec+0x68>
	  else if(*s>='0' && *s<='9')			// jika inputan normal
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b2f      	cmp	r3, #47	; 0x2f
 80038b8:	d919      	bls.n	80038ee <tinysh_dec+0x86>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b39      	cmp	r3, #57	; 0x39
 80038c0:	d815      	bhi.n	80038ee <tinysh_dec+0x86>
		  res+=*s-'0';			//bagian ini berfungsi mengurangi ascii inputna dengan ascii 0 sehingga didapat nilai integer sesungguhnya
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	3b30      	subs	r3, #48	; 0x30
 80038ce:	60fb      	str	r3, [r7, #12]
	  else
		  break;

	  s++;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3301      	adds	r3, #1
 80038d4:	607b      	str	r3, [r7, #4]
	  index++;
 80038d6:	7afb      	ldrb	r3, [r7, #11]
 80038d8:	3301      	adds	r3, #1
 80038da:	72fb      	strb	r3, [r7, #11]

	  if(index > 15)
 80038dc:	7afb      	ldrb	r3, [r7, #11]
 80038de:	2b0f      	cmp	r3, #15
 80038e0:	d804      	bhi.n	80038ec <tinysh_dec+0x84>
  while(*s) {
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1c9      	bne.n	800387e <tinysh_dec+0x16>
 80038ea:	e000      	b.n	80038ee <tinysh_dec+0x86>
	  {
		 break;
 80038ec:	bf00      	nop
	  }
  }

  return (res * min);
 80038ee:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	fb02 f303 	mul.w	r3, r2, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800393c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003908:	480d      	ldr	r0, [pc, #52]	; (8003940 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800390a:	490e      	ldr	r1, [pc, #56]	; (8003944 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800390c:	4a0e      	ldr	r2, [pc, #56]	; (8003948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800390e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003910:	e002      	b.n	8003918 <LoopCopyDataInit>

08003912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003916:	3304      	adds	r3, #4

08003918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800391a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800391c:	d3f9      	bcc.n	8003912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800391e:	4a0b      	ldr	r2, [pc, #44]	; (800394c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003920:	4c0b      	ldr	r4, [pc, #44]	; (8003950 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003924:	e001      	b.n	800392a <LoopFillZerobss>

08003926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003928:	3204      	adds	r2, #4

0800392a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800392a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800392c:	d3fb      	bcc.n	8003926 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800392e:	f7ff fbe5 	bl	80030fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003932:	f004 ff2d 	bl	8008790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003936:	f7fc ff61 	bl	80007fc <main>
  bx  lr    
 800393a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800393c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003944:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8003948:	08009bc8 	.word	0x08009bc8
  ldr r2, =_sbss
 800394c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8003950:	200007ec 	.word	0x200007ec

08003954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003954:	e7fe      	b.n	8003954 <ADC_IRQHandler>
	...

08003958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800395c:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <HAL_Init+0x40>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0d      	ldr	r2, [pc, #52]	; (8003998 <HAL_Init+0x40>)
 8003962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_Init+0x40>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <HAL_Init+0x40>)
 800396e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <HAL_Init+0x40>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a07      	ldr	r2, [pc, #28]	; (8003998 <HAL_Init+0x40>)
 800397a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003980:	2003      	movs	r0, #3
 8003982:	f000 f94f 	bl	8003c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003986:	2000      	movs	r0, #0
 8003988:	f000 f808 	bl	800399c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800398c:	f7ff f9b0 	bl	8002cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40023c00 	.word	0x40023c00

0800399c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039a4:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <HAL_InitTick+0x54>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_InitTick+0x58>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	4619      	mov	r1, r3
 80039ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80039b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 f967 	bl	8003c8e <HAL_SYSTICK_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e00e      	b.n	80039e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b0f      	cmp	r3, #15
 80039ce:	d80a      	bhi.n	80039e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039d0:	2200      	movs	r2, #0
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	f000 f92f 	bl	8003c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039dc:	4a06      	ldr	r2, [pc, #24]	; (80039f8 <HAL_InitTick+0x5c>)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e000      	b.n	80039e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	2000002c 	.word	0x2000002c
 80039f4:	20000098 	.word	0x20000098
 80039f8:	20000094 	.word	0x20000094

080039fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_IncTick+0x20>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <HAL_IncTick+0x24>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	4a04      	ldr	r2, [pc, #16]	; (8003a20 <HAL_IncTick+0x24>)
 8003a0e:	6013      	str	r3, [r2, #0]
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000098 	.word	0x20000098
 8003a20:	200007d8 	.word	0x200007d8

08003a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  return uwTick;
 8003a28:	4b03      	ldr	r3, [pc, #12]	; (8003a38 <HAL_GetTick+0x14>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	200007d8 	.word	0x200007d8

08003a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a44:	f7ff ffee 	bl	8003a24 <HAL_GetTick>
 8003a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d005      	beq.n	8003a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <HAL_Delay+0x44>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a62:	bf00      	nop
 8003a64:	f7ff ffde 	bl	8003a24 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d8f7      	bhi.n	8003a64 <HAL_Delay+0x28>
  {
  }
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000098 	.word	0x20000098

08003a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ab6:	4a04      	ldr	r2, [pc, #16]	; (8003ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	60d3      	str	r3, [r2, #12]
}
 8003abc:	bf00      	nop
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	0a1b      	lsrs	r3, r3, #8
 8003ad6:	f003 0307 	and.w	r3, r3, #7
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	db0b      	blt.n	8003b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	f003 021f 	and.w	r2, r3, #31
 8003b00:	4907      	ldr	r1, [pc, #28]	; (8003b20 <__NVIC_EnableIRQ+0x38>)
 8003b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	2001      	movs	r0, #1
 8003b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	e000e100 	.word	0xe000e100

08003b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	6039      	str	r1, [r7, #0]
 8003b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	db0a      	blt.n	8003b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	490c      	ldr	r1, [pc, #48]	; (8003b70 <__NVIC_SetPriority+0x4c>)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	0112      	lsls	r2, r2, #4
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	440b      	add	r3, r1
 8003b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b4c:	e00a      	b.n	8003b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	4908      	ldr	r1, [pc, #32]	; (8003b74 <__NVIC_SetPriority+0x50>)
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	3b04      	subs	r3, #4
 8003b5c:	0112      	lsls	r2, r2, #4
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	440b      	add	r3, r1
 8003b62:	761a      	strb	r2, [r3, #24]
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	e000e100 	.word	0xe000e100
 8003b74:	e000ed00 	.word	0xe000ed00

08003b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b089      	sub	sp, #36	; 0x24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f1c3 0307 	rsb	r3, r3, #7
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	bf28      	it	cs
 8003b96:	2304      	movcs	r3, #4
 8003b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	2b06      	cmp	r3, #6
 8003ba0:	d902      	bls.n	8003ba8 <NVIC_EncodePriority+0x30>
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3b03      	subs	r3, #3
 8003ba6:	e000      	b.n	8003baa <NVIC_EncodePriority+0x32>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bac:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43da      	mvns	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	401a      	ands	r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bca:	43d9      	mvns	r1, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd0:	4313      	orrs	r3, r2
         );
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3724      	adds	r7, #36	; 0x24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
	...

08003be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bf0:	d301      	bcc.n	8003bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e00f      	b.n	8003c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <SysTick_Config+0x40>)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bfe:	210f      	movs	r1, #15
 8003c00:	f04f 30ff 	mov.w	r0, #4294967295
 8003c04:	f7ff ff8e 	bl	8003b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <SysTick_Config+0x40>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c0e:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <SysTick_Config+0x40>)
 8003c10:	2207      	movs	r2, #7
 8003c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	e000e010 	.word	0xe000e010

08003c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff ff29 	bl	8003a84 <__NVIC_SetPriorityGrouping>
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b086      	sub	sp, #24
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	4603      	mov	r3, r0
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
 8003c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c4c:	f7ff ff3e 	bl	8003acc <__NVIC_GetPriorityGrouping>
 8003c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	6978      	ldr	r0, [r7, #20]
 8003c58:	f7ff ff8e 	bl	8003b78 <NVIC_EncodePriority>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c62:	4611      	mov	r1, r2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff ff5d 	bl	8003b24 <__NVIC_SetPriority>
}
 8003c6a:	bf00      	nop
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	4603      	mov	r3, r0
 8003c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff ff31 	bl	8003ae8 <__NVIC_EnableIRQ>
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff ffa2 	bl	8003be0 <SysTick_Config>
 8003c9c:	4603      	mov	r3, r0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cb4:	f7ff feb6 	bl	8003a24 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e099      	b.n	8003df8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0201 	bic.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ce4:	e00f      	b.n	8003d06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ce6:	f7ff fe9d 	bl	8003a24 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	d908      	bls.n	8003d06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e078      	b.n	8003df8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e8      	bne.n	8003ce6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4b38      	ldr	r3, [pc, #224]	; (8003e00 <HAL_DMA_Init+0x158>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d107      	bne.n	8003d70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 0307 	bic.w	r3, r3, #7
 8003d86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d117      	bne.n	8003dca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00e      	beq.n	8003dca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fb0f 	bl	80043d0 <DMA_CheckFifoParam>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2240      	movs	r2, #64	; 0x40
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e016      	b.n	8003df8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fac6 	bl	8004364 <DMA_CalcBaseAndBitshift>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de0:	223f      	movs	r2, #63	; 0x3f
 8003de2:	409a      	lsls	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	f010803f 	.word	0xf010803f

08003e04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_DMA_Start_IT+0x26>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e040      	b.n	8003eac <HAL_DMA_Start_IT+0xa8>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d12f      	bne.n	8003e9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2202      	movs	r2, #2
 8003e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 fa58 	bl	8004308 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5c:	223f      	movs	r2, #63	; 0x3f
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0216 	orr.w	r2, r2, #22
 8003e72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d007      	beq.n	8003e8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0208 	orr.w	r2, r2, #8
 8003e8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e005      	b.n	8003eaa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ec2:	f7ff fdaf 	bl	8003a24 <HAL_GetTick>
 8003ec6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d008      	beq.n	8003ee6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2280      	movs	r2, #128	; 0x80
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e052      	b.n	8003f8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0216 	bic.w	r2, r2, #22
 8003ef4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695a      	ldr	r2, [r3, #20]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d103      	bne.n	8003f16 <HAL_DMA_Abort+0x62>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0208 	bic.w	r2, r2, #8
 8003f24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0201 	bic.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f36:	e013      	b.n	8003f60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f38:	f7ff fd74 	bl	8003a24 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d90c      	bls.n	8003f60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2203      	movs	r2, #3
 8003f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e015      	b.n	8003f8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e4      	bne.n	8003f38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f72:	223f      	movs	r2, #63	; 0x3f
 8003f74:	409a      	lsls	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2280      	movs	r2, #128	; 0x80
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e00c      	b.n	8003fcc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2205      	movs	r2, #5
 8003fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fe4:	4b8e      	ldr	r3, [pc, #568]	; (8004220 <HAL_DMA_IRQHandler+0x248>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a8e      	ldr	r2, [pc, #568]	; (8004224 <HAL_DMA_IRQHandler+0x24c>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	0a9b      	lsrs	r3, r3, #10
 8003ff0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004002:	2208      	movs	r2, #8
 8004004:	409a      	lsls	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4013      	ands	r3, r2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01a      	beq.n	8004044 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0204 	bic.w	r2, r2, #4
 800402a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004030:	2208      	movs	r2, #8
 8004032:	409a      	lsls	r2, r3
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403c:	f043 0201 	orr.w	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004048:	2201      	movs	r2, #1
 800404a:	409a      	lsls	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4013      	ands	r3, r2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d012      	beq.n	800407a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00b      	beq.n	800407a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004066:	2201      	movs	r2, #1
 8004068:	409a      	lsls	r2, r3
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	f043 0202 	orr.w	r2, r3, #2
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407e:	2204      	movs	r2, #4
 8004080:	409a      	lsls	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4013      	ands	r3, r2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d012      	beq.n	80040b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00b      	beq.n	80040b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409c:	2204      	movs	r2, #4
 800409e:	409a      	lsls	r2, r3
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a8:	f043 0204 	orr.w	r2, r3, #4
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b4:	2210      	movs	r2, #16
 80040b6:	409a      	lsls	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d043      	beq.n	8004148 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d03c      	beq.n	8004148 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d2:	2210      	movs	r2, #16
 80040d4:	409a      	lsls	r2, r3
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d018      	beq.n	800411a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d108      	bne.n	8004108 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d024      	beq.n	8004148 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	4798      	blx	r3
 8004106:	e01f      	b.n	8004148 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01b      	beq.n	8004148 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	4798      	blx	r3
 8004118:	e016      	b.n	8004148 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004124:	2b00      	cmp	r3, #0
 8004126:	d107      	bne.n	8004138 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0208 	bic.w	r2, r2, #8
 8004136:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414c:	2220      	movs	r2, #32
 800414e:	409a      	lsls	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4013      	ands	r3, r2
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 808f 	beq.w	8004278 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8087 	beq.w	8004278 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416e:	2220      	movs	r2, #32
 8004170:	409a      	lsls	r2, r3
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b05      	cmp	r3, #5
 8004180:	d136      	bne.n	80041f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0216 	bic.w	r2, r2, #22
 8004190:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <HAL_DMA_IRQHandler+0x1da>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0208 	bic.w	r2, r2, #8
 80041c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c6:	223f      	movs	r2, #63	; 0x3f
 80041c8:	409a      	lsls	r2, r3
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d07e      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	4798      	blx	r3
        }
        return;
 80041ee:	e079      	b.n	80042e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d01d      	beq.n	800423a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10d      	bne.n	8004228 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004210:	2b00      	cmp	r3, #0
 8004212:	d031      	beq.n	8004278 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4798      	blx	r3
 800421c:	e02c      	b.n	8004278 <HAL_DMA_IRQHandler+0x2a0>
 800421e:	bf00      	nop
 8004220:	2000002c 	.word	0x2000002c
 8004224:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d023      	beq.n	8004278 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	4798      	blx	r3
 8004238:	e01e      	b.n	8004278 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10f      	bne.n	8004268 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0210 	bic.w	r2, r2, #16
 8004256:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427c:	2b00      	cmp	r3, #0
 800427e:	d032      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d022      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2205      	movs	r2, #5
 8004290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	3301      	adds	r3, #1
 80042a8:	60bb      	str	r3, [r7, #8]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d307      	bcc.n	80042c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f2      	bne.n	80042a4 <HAL_DMA_IRQHandler+0x2cc>
 80042be:	e000      	b.n	80042c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	4798      	blx	r3
 80042e2:	e000      	b.n	80042e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80042e4:	bf00      	nop
    }
  }
}
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042fa:	b2db      	uxtb	r3, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004324:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d108      	bne.n	8004348 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004346:	e007      	b.n	8004358 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	3b10      	subs	r3, #16
 8004374:	4a14      	ldr	r2, [pc, #80]	; (80043c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800437e:	4a13      	ldr	r2, [pc, #76]	; (80043cc <DMA_CalcBaseAndBitshift+0x68>)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b03      	cmp	r3, #3
 8004390:	d909      	bls.n	80043a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	1d1a      	adds	r2, r3, #4
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	659a      	str	r2, [r3, #88]	; 0x58
 80043a4:	e007      	b.n	80043b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043ae:	f023 0303 	bic.w	r3, r3, #3
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	aaaaaaab 	.word	0xaaaaaaab
 80043cc:	08009b18 	.word	0x08009b18

080043d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d11f      	bne.n	800442a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d856      	bhi.n	800449e <DMA_CheckFifoParam+0xce>
 80043f0:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <DMA_CheckFifoParam+0x28>)
 80043f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f6:	bf00      	nop
 80043f8:	08004409 	.word	0x08004409
 80043fc:	0800441b 	.word	0x0800441b
 8004400:	08004409 	.word	0x08004409
 8004404:	0800449f 	.word	0x0800449f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d046      	beq.n	80044a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004418:	e043      	b.n	80044a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004422:	d140      	bne.n	80044a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004428:	e03d      	b.n	80044a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004432:	d121      	bne.n	8004478 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b03      	cmp	r3, #3
 8004438:	d837      	bhi.n	80044aa <DMA_CheckFifoParam+0xda>
 800443a:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <DMA_CheckFifoParam+0x70>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	08004451 	.word	0x08004451
 8004444:	08004457 	.word	0x08004457
 8004448:	08004451 	.word	0x08004451
 800444c:	08004469 	.word	0x08004469
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
      break;
 8004454:	e030      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d025      	beq.n	80044ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004466:	e022      	b.n	80044ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004470:	d11f      	bne.n	80044b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004476:	e01c      	b.n	80044b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d903      	bls.n	8004486 <DMA_CheckFifoParam+0xb6>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d003      	beq.n	800448c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004484:	e018      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	73fb      	strb	r3, [r7, #15]
      break;
 800448a:	e015      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00e      	beq.n	80044b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
      break;
 800449c:	e00b      	b.n	80044b6 <DMA_CheckFifoParam+0xe6>
      break;
 800449e:	bf00      	nop
 80044a0:	e00a      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;
 80044a2:	bf00      	nop
 80044a4:	e008      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;
 80044a6:	bf00      	nop
 80044a8:	e006      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;
 80044aa:	bf00      	nop
 80044ac:	e004      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;
 80044ae:	bf00      	nop
 80044b0:	e002      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80044b2:	bf00      	nop
 80044b4:	e000      	b.n	80044b8 <DMA_CheckFifoParam+0xe8>
      break;
 80044b6:	bf00      	nop
    }
  } 
  
  return status; 
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop

080044c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	; 0x24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	e165      	b.n	80047b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044e4:	2201      	movs	r2, #1
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	f040 8154 	bne.w	80047aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d005      	beq.n	800451a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004516:	2b02      	cmp	r3, #2
 8004518:	d130      	bne.n	800457c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	2203      	movs	r2, #3
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004550:	2201      	movs	r2, #1
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f003 0201 	and.w	r2, r3, #1
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	2b03      	cmp	r3, #3
 8004586:	d017      	beq.n	80045b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	2203      	movs	r2, #3
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d123      	bne.n	800460c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	08da      	lsrs	r2, r3, #3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3208      	adds	r2, #8
 80045cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	220f      	movs	r2, #15
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	08da      	lsrs	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3208      	adds	r2, #8
 8004606:	69b9      	ldr	r1, [r7, #24]
 8004608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	2203      	movs	r2, #3
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 0203 	and.w	r2, r3, #3
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80ae 	beq.w	80047aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	4b5d      	ldr	r3, [pc, #372]	; (80047c8 <HAL_GPIO_Init+0x300>)
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	4a5c      	ldr	r2, [pc, #368]	; (80047c8 <HAL_GPIO_Init+0x300>)
 8004658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800465c:	6453      	str	r3, [r2, #68]	; 0x44
 800465e:	4b5a      	ldr	r3, [pc, #360]	; (80047c8 <HAL_GPIO_Init+0x300>)
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800466a:	4a58      	ldr	r2, [pc, #352]	; (80047cc <HAL_GPIO_Init+0x304>)
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	3302      	adds	r3, #2
 8004672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	220f      	movs	r2, #15
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a4f      	ldr	r2, [pc, #316]	; (80047d0 <HAL_GPIO_Init+0x308>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d025      	beq.n	80046e2 <HAL_GPIO_Init+0x21a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a4e      	ldr	r2, [pc, #312]	; (80047d4 <HAL_GPIO_Init+0x30c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01f      	beq.n	80046de <HAL_GPIO_Init+0x216>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a4d      	ldr	r2, [pc, #308]	; (80047d8 <HAL_GPIO_Init+0x310>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d019      	beq.n	80046da <HAL_GPIO_Init+0x212>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a4c      	ldr	r2, [pc, #304]	; (80047dc <HAL_GPIO_Init+0x314>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <HAL_GPIO_Init+0x20e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a4b      	ldr	r2, [pc, #300]	; (80047e0 <HAL_GPIO_Init+0x318>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00d      	beq.n	80046d2 <HAL_GPIO_Init+0x20a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a4a      	ldr	r2, [pc, #296]	; (80047e4 <HAL_GPIO_Init+0x31c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <HAL_GPIO_Init+0x206>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a49      	ldr	r2, [pc, #292]	; (80047e8 <HAL_GPIO_Init+0x320>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <HAL_GPIO_Init+0x202>
 80046c6:	2306      	movs	r3, #6
 80046c8:	e00c      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046ca:	2307      	movs	r3, #7
 80046cc:	e00a      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046ce:	2305      	movs	r3, #5
 80046d0:	e008      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046d2:	2304      	movs	r3, #4
 80046d4:	e006      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046d6:	2303      	movs	r3, #3
 80046d8:	e004      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046da:	2302      	movs	r3, #2
 80046dc:	e002      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <HAL_GPIO_Init+0x21c>
 80046e2:	2300      	movs	r3, #0
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	f002 0203 	and.w	r2, r2, #3
 80046ea:	0092      	lsls	r2, r2, #2
 80046ec:	4093      	lsls	r3, r2
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046f4:	4935      	ldr	r1, [pc, #212]	; (80047cc <HAL_GPIO_Init+0x304>)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	089b      	lsrs	r3, r3, #2
 80046fa:	3302      	adds	r3, #2
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004702:	4b3a      	ldr	r3, [pc, #232]	; (80047ec <HAL_GPIO_Init+0x324>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	43db      	mvns	r3, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4013      	ands	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004726:	4a31      	ldr	r2, [pc, #196]	; (80047ec <HAL_GPIO_Init+0x324>)
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800472c:	4b2f      	ldr	r3, [pc, #188]	; (80047ec <HAL_GPIO_Init+0x324>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	43db      	mvns	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4013      	ands	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004750:	4a26      	ldr	r2, [pc, #152]	; (80047ec <HAL_GPIO_Init+0x324>)
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004756:	4b25      	ldr	r3, [pc, #148]	; (80047ec <HAL_GPIO_Init+0x324>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	43db      	mvns	r3, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4013      	ands	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800477a:	4a1c      	ldr	r2, [pc, #112]	; (80047ec <HAL_GPIO_Init+0x324>)
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <HAL_GPIO_Init+0x324>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047a4:	4a11      	ldr	r2, [pc, #68]	; (80047ec <HAL_GPIO_Init+0x324>)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3301      	adds	r3, #1
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	2b0f      	cmp	r3, #15
 80047b4:	f67f ae96 	bls.w	80044e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	3724      	adds	r7, #36	; 0x24
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40013800 	.word	0x40013800
 80047d0:	40020000 	.word	0x40020000
 80047d4:	40020400 	.word	0x40020400
 80047d8:	40020800 	.word	0x40020800
 80047dc:	40020c00 	.word	0x40020c00
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40021400 	.word	0x40021400
 80047e8:	40021800 	.word	0x40021800
 80047ec:	40013c00 	.word	0x40013c00

080047f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	807b      	strh	r3, [r7, #2]
 80047fc:	4613      	mov	r3, r2
 80047fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004800:	787b      	ldrb	r3, [r7, #1]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004806:	887a      	ldrh	r2, [r7, #2]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800480c:	e003      	b.n	8004816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800480e:	887b      	ldrh	r3, [r7, #2]
 8004810:	041a      	lsls	r2, r3, #16
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	619a      	str	r2, [r3, #24]
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004822:	b480      	push	{r7}
 8004824:	b085      	sub	sp, #20
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004834:	887a      	ldrh	r2, [r7, #2]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4013      	ands	r3, r2
 800483a:	041a      	lsls	r2, r3, #16
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	43d9      	mvns	r1, r3
 8004840:	887b      	ldrh	r3, [r7, #2]
 8004842:	400b      	ands	r3, r1
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	619a      	str	r2, [r3, #24]
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
	...

08004858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e12b      	b.n	8004ac2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fe fae0 	bl	8002e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2224      	movs	r2, #36	; 0x24
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0201 	bic.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048bc:	f002 f808 	bl	80068d0 <HAL_RCC_GetPCLK1Freq>
 80048c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	4a81      	ldr	r2, [pc, #516]	; (8004acc <HAL_I2C_Init+0x274>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d807      	bhi.n	80048dc <HAL_I2C_Init+0x84>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a80      	ldr	r2, [pc, #512]	; (8004ad0 <HAL_I2C_Init+0x278>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	bf94      	ite	ls
 80048d4:	2301      	movls	r3, #1
 80048d6:	2300      	movhi	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	e006      	b.n	80048ea <HAL_I2C_Init+0x92>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4a7d      	ldr	r2, [pc, #500]	; (8004ad4 <HAL_I2C_Init+0x27c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	bf94      	ite	ls
 80048e4:	2301      	movls	r3, #1
 80048e6:	2300      	movhi	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e0e7      	b.n	8004ac2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a78      	ldr	r2, [pc, #480]	; (8004ad8 <HAL_I2C_Init+0x280>)
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	0c9b      	lsrs	r3, r3, #18
 80048fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4a6a      	ldr	r2, [pc, #424]	; (8004acc <HAL_I2C_Init+0x274>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d802      	bhi.n	800492c <HAL_I2C_Init+0xd4>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	3301      	adds	r3, #1
 800492a:	e009      	b.n	8004940 <HAL_I2C_Init+0xe8>
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	4a69      	ldr	r2, [pc, #420]	; (8004adc <HAL_I2C_Init+0x284>)
 8004938:	fba2 2303 	umull	r2, r3, r2, r3
 800493c:	099b      	lsrs	r3, r3, #6
 800493e:	3301      	adds	r3, #1
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6812      	ldr	r2, [r2, #0]
 8004944:	430b      	orrs	r3, r1
 8004946:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004952:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	495c      	ldr	r1, [pc, #368]	; (8004acc <HAL_I2C_Init+0x274>)
 800495c:	428b      	cmp	r3, r1
 800495e:	d819      	bhi.n	8004994 <HAL_I2C_Init+0x13c>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	1e59      	subs	r1, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	fbb1 f3f3 	udiv	r3, r1, r3
 800496e:	1c59      	adds	r1, r3, #1
 8004970:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004974:	400b      	ands	r3, r1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_I2C_Init+0x138>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1e59      	subs	r1, r3, #1
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	fbb1 f3f3 	udiv	r3, r1, r3
 8004988:	3301      	adds	r3, #1
 800498a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800498e:	e051      	b.n	8004a34 <HAL_I2C_Init+0x1dc>
 8004990:	2304      	movs	r3, #4
 8004992:	e04f      	b.n	8004a34 <HAL_I2C_Init+0x1dc>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d111      	bne.n	80049c0 <HAL_I2C_Init+0x168>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	1e58      	subs	r0, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6859      	ldr	r1, [r3, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	440b      	add	r3, r1
 80049aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ae:	3301      	adds	r3, #1
 80049b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bf0c      	ite	eq
 80049b8:	2301      	moveq	r3, #1
 80049ba:	2300      	movne	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	e012      	b.n	80049e6 <HAL_I2C_Init+0x18e>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1e58      	subs	r0, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6859      	ldr	r1, [r3, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	0099      	lsls	r1, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049d6:	3301      	adds	r3, #1
 80049d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049dc:	2b00      	cmp	r3, #0
 80049de:	bf0c      	ite	eq
 80049e0:	2301      	moveq	r3, #1
 80049e2:	2300      	movne	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_I2C_Init+0x196>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e022      	b.n	8004a34 <HAL_I2C_Init+0x1dc>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10e      	bne.n	8004a14 <HAL_I2C_Init+0x1bc>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	1e58      	subs	r0, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6859      	ldr	r1, [r3, #4]
 80049fe:	460b      	mov	r3, r1
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	440b      	add	r3, r1
 8004a04:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a08:	3301      	adds	r3, #1
 8004a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a12:	e00f      	b.n	8004a34 <HAL_I2C_Init+0x1dc>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	1e58      	subs	r0, r3, #1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6859      	ldr	r1, [r3, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	0099      	lsls	r1, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	6809      	ldr	r1, [r1, #0]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69da      	ldr	r2, [r3, #28]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6911      	ldr	r1, [r2, #16]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68d2      	ldr	r2, [r2, #12]
 8004a6e:	4311      	orrs	r1, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	430b      	orrs	r3, r1
 8004a76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695a      	ldr	r2, [r3, #20]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	000186a0 	.word	0x000186a0
 8004ad0:	001e847f 	.word	0x001e847f
 8004ad4:	003d08ff 	.word	0x003d08ff
 8004ad8:	431bde83 	.word	0x431bde83
 8004adc:	10624dd3 	.word	0x10624dd3

08004ae0 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	461a      	mov	r2, r3
 8004aec:	460b      	mov	r3, r1
 8004aee:	817b      	strh	r3, [r7, #10]
 8004af0:	4613      	mov	r3, r2
 8004af2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	f040 8085 	bne.w	8004c10 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b06:	4b46      	ldr	r3, [pc, #280]	; (8004c20 <HAL_I2C_Master_Transmit_IT+0x140>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	08db      	lsrs	r3, r3, #3
 8004b0c:	4a45      	ldr	r2, [pc, #276]	; (8004c24 <HAL_I2C_Master_Transmit_IT+0x144>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	0a1a      	lsrs	r2, r3, #8
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d116      	bne.n	8004b5a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f043 0220 	orr.w	r2, r3, #32
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e05b      	b.n	8004c12 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d0db      	beq.n	8004b20 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_I2C_Master_Transmit_IT+0x96>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e04d      	b.n	8004c12 <HAL_I2C_Master_Transmit_IT+0x132>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d007      	beq.n	8004b9c <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004baa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2221      	movs	r2, #33	; 0x21
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	893a      	ldrh	r2, [r7, #8]
 8004bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <HAL_I2C_Master_Transmit_IT+0x148>)
 8004bdc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004bde:	897a      	ldrh	r2, [r7, #10]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bf2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004c0a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e000      	b.n	8004c12 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8004c10:	2302      	movs	r3, #2
  }
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	2000002c 	.word	0x2000002c
 8004c24:	14f8b589 	.word	0x14f8b589
 8004c28:	ffff0000 	.word	0xffff0000

08004c2c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	461a      	mov	r2, r3
 8004c38:	460b      	mov	r3, r1
 8004c3a:	817b      	strh	r3, [r7, #10]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	f040 808d 	bne.w	8004d6c <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c52:	4b4a      	ldr	r3, [pc, #296]	; (8004d7c <HAL_I2C_Master_Receive_IT+0x150>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	08db      	lsrs	r3, r3, #3
 8004c58:	4a49      	ldr	r2, [pc, #292]	; (8004d80 <HAL_I2C_Master_Receive_IT+0x154>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	0a1a      	lsrs	r2, r3, #8
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	009a      	lsls	r2, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d116      	bne.n	8004ca6 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	f043 0220 	orr.w	r2, r3, #32
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e063      	b.n	8004d6e <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d0db      	beq.n	8004c6c <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_I2C_Master_Receive_IT+0x96>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e055      	b.n	8004d6e <HAL_I2C_Master_Receive_IT+0x142>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d007      	beq.n	8004ce8 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2222      	movs	r2, #34	; 0x22
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2210      	movs	r2, #16
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	893a      	ldrh	r2, [r7, #8]
 8004d18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <HAL_I2C_Master_Receive_IT+0x158>)
 8004d28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004d2a:	897a      	ldrh	r2, [r7, #10]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d3e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d4e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004d66:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e000      	b.n	8004d6e <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8004d6c:	2302      	movs	r3, #2
  }
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	2000002c 	.word	0x2000002c
 8004d80:	14f8b589 	.word	0x14f8b589
 8004d84:	ffff0000 	.word	0xffff0000

08004d88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004da8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	d003      	beq.n	8004dc0 <HAL_I2C_EV_IRQHandler+0x38>
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	2b40      	cmp	r3, #64	; 0x40
 8004dbc:	f040 80bd 	bne.w	8004f3a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10d      	bne.n	8004df6 <HAL_I2C_EV_IRQHandler+0x6e>
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004de0:	d003      	beq.n	8004dea <HAL_I2C_EV_IRQHandler+0x62>
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004de8:	d101      	bne.n	8004dee <HAL_I2C_EV_IRQHandler+0x66>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <HAL_I2C_EV_IRQHandler+0x68>
 8004dee:	2300      	movs	r3, #0
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	f000 812e 	beq.w	8005052 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00c      	beq.n	8004e1a <HAL_I2C_EV_IRQHandler+0x92>
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	0a5b      	lsrs	r3, r3, #9
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d006      	beq.n	8004e1a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f001 fc51 	bl	80066b4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fd5e 	bl	80058d4 <I2C_Master_SB>
 8004e18:	e08e      	b.n	8004f38 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	08db      	lsrs	r3, r3, #3
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <HAL_I2C_EV_IRQHandler+0xb2>
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	0a5b      	lsrs	r3, r3, #9
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fdd4 	bl	80059e0 <I2C_Master_ADD10>
 8004e38:	e07e      	b.n	8004f38 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	085b      	lsrs	r3, r3, #1
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_I2C_EV_IRQHandler+0xd2>
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	0a5b      	lsrs	r3, r3, #9
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fdee 	bl	8005a34 <I2C_Master_ADDR>
 8004e58:	e06e      	b.n	8004f38 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	089b      	lsrs	r3, r3, #2
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d037      	beq.n	8004ed6 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e74:	f000 80ef 	beq.w	8005056 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	09db      	lsrs	r3, r3, #7
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00f      	beq.n	8004ea4 <HAL_I2C_EV_IRQHandler+0x11c>
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	0a9b      	lsrs	r3, r3, #10
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d009      	beq.n	8004ea4 <HAL_I2C_EV_IRQHandler+0x11c>
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	089b      	lsrs	r3, r3, #2
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d103      	bne.n	8004ea4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f9eb 	bl	8005278 <I2C_MasterTransmit_TXE>
 8004ea2:	e049      	b.n	8004f38 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	089b      	lsrs	r3, r3, #2
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 80d2 	beq.w	8005056 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	0a5b      	lsrs	r3, r3, #9
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 80cb 	beq.w	8005056 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d103      	bne.n	8004ece <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fa72 	bl	80053b0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ecc:	e0c3      	b.n	8005056 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fad6 	bl	8005480 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ed4:	e0bf      	b.n	8005056 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee4:	f000 80b7 	beq.w	8005056 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	099b      	lsrs	r3, r3, #6
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00f      	beq.n	8004f14 <HAL_I2C_EV_IRQHandler+0x18c>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	0a9b      	lsrs	r3, r3, #10
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d009      	beq.n	8004f14 <HAL_I2C_EV_IRQHandler+0x18c>
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	089b      	lsrs	r3, r3, #2
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d103      	bne.n	8004f14 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 fb46 	bl	800559e <I2C_MasterReceive_RXNE>
 8004f12:	e011      	b.n	8004f38 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	089b      	lsrs	r3, r3, #2
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 809a 	beq.w	8005056 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	0a5b      	lsrs	r3, r3, #9
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 8093 	beq.w	8005056 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fbe5 	bl	8005700 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f36:	e08e      	b.n	8005056 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004f38:	e08d      	b.n	8005056 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d004      	beq.n	8004f4c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	e007      	b.n	8004f5c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d012      	beq.n	8004f8e <HAL_I2C_EV_IRQHandler+0x206>
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	0a5b      	lsrs	r3, r3, #9
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00c      	beq.n	8004f8e <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004f84:	69b9      	ldr	r1, [r7, #24]
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 ffa3 	bl	8005ed2 <I2C_Slave_ADDR>
 8004f8c:	e066      	b.n	800505c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <HAL_I2C_EV_IRQHandler+0x226>
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	0a5b      	lsrs	r3, r3, #9
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 ffd8 	bl	8005f5c <I2C_Slave_STOPF>
 8004fac:	e056      	b.n	800505c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004fae:	7bbb      	ldrb	r3, [r7, #14]
 8004fb0:	2b21      	cmp	r3, #33	; 0x21
 8004fb2:	d002      	beq.n	8004fba <HAL_I2C_EV_IRQHandler+0x232>
 8004fb4:	7bbb      	ldrb	r3, [r7, #14]
 8004fb6:	2b29      	cmp	r3, #41	; 0x29
 8004fb8:	d125      	bne.n	8005006 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	09db      	lsrs	r3, r3, #7
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00f      	beq.n	8004fe6 <HAL_I2C_EV_IRQHandler+0x25e>
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	0a9b      	lsrs	r3, r3, #10
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <HAL_I2C_EV_IRQHandler+0x25e>
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	089b      	lsrs	r3, r3, #2
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d103      	bne.n	8004fe6 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 feb9 	bl	8005d56 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fe4:	e039      	b.n	800505a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	089b      	lsrs	r3, r3, #2
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d033      	beq.n	800505a <HAL_I2C_EV_IRQHandler+0x2d2>
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	0a5b      	lsrs	r3, r3, #9
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d02d      	beq.n	800505a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fee6 	bl	8005dd0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005004:	e029      	b.n	800505a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	099b      	lsrs	r3, r3, #6
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00f      	beq.n	8005032 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	0a9b      	lsrs	r3, r3, #10
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <HAL_I2C_EV_IRQHandler+0x2aa>
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	089b      	lsrs	r3, r3, #2
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fef1 	bl	8005e12 <I2C_SlaveReceive_RXNE>
 8005030:	e014      	b.n	800505c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	089b      	lsrs	r3, r3, #2
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00e      	beq.n	800505c <HAL_I2C_EV_IRQHandler+0x2d4>
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	0a5b      	lsrs	r3, r3, #9
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d008      	beq.n	800505c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 ff1f 	bl	8005e8e <I2C_SlaveReceive_BTF>
 8005050:	e004      	b.n	800505c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8005052:	bf00      	nop
 8005054:	e002      	b.n	800505c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005056:	bf00      	nop
 8005058:	e000      	b.n	800505c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800505a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800505c:	3720      	adds	r7, #32
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b08a      	sub	sp, #40	; 0x28
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800507a:	2300      	movs	r3, #0
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005084:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	0a1b      	lsrs	r3, r3, #8
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00e      	beq.n	80050b0 <HAL_I2C_ER_IRQHandler+0x4e>
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	0a1b      	lsrs	r3, r3, #8
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050ae:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	0a5b      	lsrs	r3, r3, #9
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00e      	beq.n	80050da <HAL_I2C_ER_IRQHandler+0x78>
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	0a1b      	lsrs	r3, r3, #8
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d008      	beq.n	80050da <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	f043 0302 	orr.w	r3, r3, #2
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80050d8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	0a9b      	lsrs	r3, r3, #10
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d03f      	beq.n	8005166 <HAL_I2C_ER_IRQHandler+0x104>
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	0a1b      	lsrs	r3, r3, #8
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d039      	beq.n	8005166 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80050f2:	7efb      	ldrb	r3, [r7, #27]
 80050f4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005104:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800510c:	7ebb      	ldrb	r3, [r7, #26]
 800510e:	2b20      	cmp	r3, #32
 8005110:	d112      	bne.n	8005138 <HAL_I2C_ER_IRQHandler+0xd6>
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10f      	bne.n	8005138 <HAL_I2C_ER_IRQHandler+0xd6>
 8005118:	7cfb      	ldrb	r3, [r7, #19]
 800511a:	2b21      	cmp	r3, #33	; 0x21
 800511c:	d008      	beq.n	8005130 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800511e:	7cfb      	ldrb	r3, [r7, #19]
 8005120:	2b29      	cmp	r3, #41	; 0x29
 8005122:	d005      	beq.n	8005130 <HAL_I2C_ER_IRQHandler+0xce>
 8005124:	7cfb      	ldrb	r3, [r7, #19]
 8005126:	2b28      	cmp	r3, #40	; 0x28
 8005128:	d106      	bne.n	8005138 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b21      	cmp	r3, #33	; 0x21
 800512e:	d103      	bne.n	8005138 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f001 f843 	bl	80061bc <I2C_Slave_AF>
 8005136:	e016      	b.n	8005166 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005140:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	f043 0304 	orr.w	r3, r3, #4
 8005148:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800514a:	7efb      	ldrb	r3, [r7, #27]
 800514c:	2b10      	cmp	r3, #16
 800514e:	d002      	beq.n	8005156 <HAL_I2C_ER_IRQHandler+0xf4>
 8005150:	7efb      	ldrb	r3, [r7, #27]
 8005152:	2b40      	cmp	r3, #64	; 0x40
 8005154:	d107      	bne.n	8005166 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005164:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	0adb      	lsrs	r3, r3, #11
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00e      	beq.n	8005190 <HAL_I2C_ER_IRQHandler+0x12e>
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	0a1b      	lsrs	r3, r3, #8
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d008      	beq.n	8005190 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	f043 0308 	orr.w	r3, r3, #8
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800518e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	2b00      	cmp	r3, #0
 8005194:	d008      	beq.n	80051a8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f001 f87a 	bl	800629c <I2C_ITError>
  }
}
 80051a8:	bf00      	nop
 80051aa:	3728      	adds	r7, #40	; 0x28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	70fb      	strb	r3, [r7, #3]
 80051e4:	4613      	mov	r3, r2
 80051e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005252:	b2db      	uxtb	r3, r3
}
 8005254:	4618      	mov	r0, r3
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800526c:	4618      	mov	r0, r3
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005286:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800528e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529a:	2b00      	cmp	r3, #0
 800529c:	d150      	bne.n	8005340 <I2C_MasterTransmit_TXE+0xc8>
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	2b21      	cmp	r3, #33	; 0x21
 80052a2:	d14d      	bne.n	8005340 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d01d      	beq.n	80052e6 <I2C_MasterTransmit_TXE+0x6e>
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d01a      	beq.n	80052e6 <I2C_MasterTransmit_TXE+0x6e>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052b6:	d016      	beq.n	80052e6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052c6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2211      	movs	r2, #17
 80052cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fb fe50 	bl	8000f84 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052e4:	e060      	b.n	80053a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052f4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005304:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d107      	bne.n	8005330 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff ff6d 	bl	8005208 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800532e:	e03b      	b.n	80053a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7fb fe23 	bl	8000f84 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800533e:	e033      	b.n	80053a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	2b21      	cmp	r3, #33	; 0x21
 8005344:	d005      	beq.n	8005352 <I2C_MasterTransmit_TXE+0xda>
 8005346:	7bbb      	ldrb	r3, [r7, #14]
 8005348:	2b40      	cmp	r3, #64	; 0x40
 800534a:	d12d      	bne.n	80053a8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	2b22      	cmp	r3, #34	; 0x22
 8005350:	d12a      	bne.n	80053a8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d108      	bne.n	800536e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800536a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800536c:	e01c      	b.n	80053a8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b40      	cmp	r3, #64	; 0x40
 8005378:	d103      	bne.n	8005382 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f880 	bl	8005480 <I2C_MemoryTransmit_TXE_BTF>
}
 8005380:	e012      	b.n	80053a8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80053a6:	e7ff      	b.n	80053a8 <I2C_MasterTransmit_TXE+0x130>
 80053a8:	bf00      	nop
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b21      	cmp	r3, #33	; 0x21
 80053c8:	d156      	bne.n	8005478 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d012      	beq.n	80053fa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	781a      	ldrb	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80053f8:	e03e      	b.n	8005478 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d01d      	beq.n	800543c <I2C_MasterTransmit_BTF+0x8c>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b20      	cmp	r3, #32
 8005404:	d01a      	beq.n	800543c <I2C_MasterTransmit_BTF+0x8c>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800540c:	d016      	beq.n	800543c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800541c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2211      	movs	r2, #17
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7fb fda5 	bl	8000f84 <HAL_I2C_MasterTxCpltCallback>
}
 800543a:	e01d      	b.n	8005478 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800544a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fb fd86 	bl	8000f84 <HAL_I2C_MasterTxCpltCallback>
}
 8005478:	bf00      	nop
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005494:	2b00      	cmp	r3, #0
 8005496:	d11d      	bne.n	80054d4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800549c:	2b01      	cmp	r3, #1
 800549e:	d10b      	bne.n	80054b8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b0:	1c9a      	adds	r2, r3, #2
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80054b6:	e06e      	b.n	8005596 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054bc:	b29b      	uxth	r3, r3
 80054be:	121b      	asrs	r3, r3, #8
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054d2:	e060      	b.n	8005596 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d10b      	bne.n	80054f4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054f2:	e050      	b.n	8005596 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d14c      	bne.n	8005596 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	2b22      	cmp	r3, #34	; 0x22
 8005500:	d108      	bne.n	8005514 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005510:	601a      	str	r2, [r3, #0]
}
 8005512:	e040      	b.n	8005596 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d015      	beq.n	800554a <I2C_MemoryTransmit_TXE_BTF+0xca>
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b21      	cmp	r3, #33	; 0x21
 8005522:	d112      	bne.n	800554a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	781a      	ldrb	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005548:	e025      	b.n	8005596 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554e:	b29b      	uxth	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d120      	bne.n	8005596 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b21      	cmp	r3, #33	; 0x21
 8005558:	d11d      	bne.n	8005596 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005568:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005578:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff fe39 	bl	8005208 <HAL_I2C_MemTxCpltCallback>
}
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b22      	cmp	r3, #34	; 0x22
 80055b0:	f040 80a2 	bne.w	80056f8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d921      	bls.n	8005606 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b03      	cmp	r3, #3
 80055f0:	f040 8082 	bne.w	80056f8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005602:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005604:	e078      	b.n	80056f8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560a:	2b02      	cmp	r3, #2
 800560c:	d074      	beq.n	80056f8 <I2C_MasterReceive_RXNE+0x15a>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d002      	beq.n	800561a <I2C_MasterReceive_RXNE+0x7c>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d16e      	bne.n	80056f8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f001 f818 	bl	8006650 <I2C_WaitOnSTOPRequestThroughIT>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d142      	bne.n	80056ac <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005634:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005644:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b40      	cmp	r3, #64	; 0x40
 800567e:	d10a      	bne.n	8005696 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff fdc4 	bl	800521c <HAL_I2C_MemRxCpltCallback>
}
 8005694:	e030      	b.n	80056f8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2212      	movs	r2, #18
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7fb fc7d 	bl	8000fa4 <HAL_I2C_MasterRxCpltCallback>
}
 80056aa:	e025      	b.n	80056f8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fb fc66 	bl	8000fc4 <HAL_I2C_ErrorCallback>
}
 80056f8:	bf00      	nop
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b04      	cmp	r3, #4
 8005716:	d11b      	bne.n	8005750 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005726:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800574e:	e0bd      	b.n	80058cc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b03      	cmp	r3, #3
 8005758:	d129      	bne.n	80057ae <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005768:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b04      	cmp	r3, #4
 800576e:	d00a      	beq.n	8005786 <I2C_MasterReceive_BTF+0x86>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d007      	beq.n	8005786 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005784:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80057ac:	e08e      	b.n	80058cc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d176      	bne.n	80058a6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d002      	beq.n	80057c4 <I2C_MasterReceive_BTF+0xc4>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b10      	cmp	r3, #16
 80057c2:	d108      	bne.n	80057d6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e019      	b.n	800580a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d002      	beq.n	80057e2 <I2C_MasterReceive_BTF+0xe2>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d108      	bne.n	80057f4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	e00a      	b.n	800580a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b10      	cmp	r3, #16
 80057f8:	d007      	beq.n	800580a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005808:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005864:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b40      	cmp	r3, #64	; 0x40
 8005878:	d10a      	bne.n	8005890 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fcc7 	bl	800521c <HAL_I2C_MemRxCpltCallback>
}
 800588e:	e01d      	b.n	80058cc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2212      	movs	r2, #18
 800589c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fb fb80 	bl	8000fa4 <HAL_I2C_MasterRxCpltCallback>
}
 80058a4:	e012      	b.n	80058cc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058cc:	bf00      	nop
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b40      	cmp	r3, #64	; 0x40
 80058e6:	d117      	bne.n	8005918 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d109      	bne.n	8005904 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005900:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005902:	e067      	b.n	80059d4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005908:	b2db      	uxtb	r3, r3
 800590a:	f043 0301 	orr.w	r3, r3, #1
 800590e:	b2da      	uxtb	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	611a      	str	r2, [r3, #16]
}
 8005916:	e05d      	b.n	80059d4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005920:	d133      	bne.n	800598a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b21      	cmp	r3, #33	; 0x21
 800592c:	d109      	bne.n	8005942 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005932:	b2db      	uxtb	r3, r3
 8005934:	461a      	mov	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800593e:	611a      	str	r2, [r3, #16]
 8005940:	e008      	b.n	8005954 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005946:	b2db      	uxtb	r3, r3
 8005948:	f043 0301 	orr.w	r3, r3, #1
 800594c:	b2da      	uxtb	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005958:	2b00      	cmp	r3, #0
 800595a:	d004      	beq.n	8005966 <I2C_Master_SB+0x92>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d108      	bne.n	8005978 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	2b00      	cmp	r3, #0
 800596c:	d032      	beq.n	80059d4 <I2C_Master_SB+0x100>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d02d      	beq.n	80059d4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005986:	605a      	str	r2, [r3, #4]
}
 8005988:	e024      	b.n	80059d4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10e      	bne.n	80059b0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005996:	b29b      	uxth	r3, r3
 8005998:	11db      	asrs	r3, r3, #7
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 0306 	and.w	r3, r3, #6
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	f063 030f 	orn	r3, r3, #15
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	611a      	str	r2, [r3, #16]
}
 80059ae:	e011      	b.n	80059d4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d10d      	bne.n	80059d4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059bc:	b29b      	uxth	r3, r3
 80059be:	11db      	asrs	r3, r3, #7
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	f003 0306 	and.w	r3, r3, #6
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f063 030e 	orn	r3, r3, #14
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	611a      	str	r2, [r3, #16]
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <I2C_Master_ADD10+0x26>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d108      	bne.n	8005a18 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00c      	beq.n	8005a28 <I2C_Master_ADD10+0x48>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d007      	beq.n	8005a28 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a26:	605a      	str	r2, [r3, #4]
  }
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b091      	sub	sp, #68	; 0x44
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a50:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b22      	cmp	r3, #34	; 0x22
 8005a5c:	f040 8169 	bne.w	8005d32 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10f      	bne.n	8005a88 <I2C_Master_ADDR+0x54>
 8005a68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a6c:	2b40      	cmp	r3, #64	; 0x40
 8005a6e:	d10b      	bne.n	8005a88 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a70:	2300      	movs	r3, #0
 8005a72:	633b      	str	r3, [r7, #48]	; 0x30
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	633b      	str	r3, [r7, #48]	; 0x30
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	e160      	b.n	8005d4a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d11d      	bne.n	8005acc <I2C_Master_ADDR+0x98>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a98:	d118      	bne.n	8005acc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005abe:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	651a      	str	r2, [r3, #80]	; 0x50
 8005aca:	e13e      	b.n	8005d4a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d113      	bne.n	8005afe <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	e115      	b.n	8005d2a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	f040 808a 	bne.w	8005c1e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b10:	d137      	bne.n	8005b82 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b20:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b30:	d113      	bne.n	8005b5a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b40:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b42:	2300      	movs	r3, #0
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	e0e7      	b.n	8005d2a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	623b      	str	r3, [r7, #32]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	623b      	str	r3, [r7, #32]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	623b      	str	r3, [r7, #32]
 8005b6e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	e0d3      	b.n	8005d2a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d02e      	beq.n	8005be6 <I2C_Master_ADDR+0x1b2>
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	2b20      	cmp	r3, #32
 8005b8c:	d02b      	beq.n	8005be6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b90:	2b12      	cmp	r3, #18
 8005b92:	d102      	bne.n	8005b9a <I2C_Master_ADDR+0x166>
 8005b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d125      	bne.n	8005be6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d00e      	beq.n	8005bbe <I2C_Master_ADDR+0x18a>
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d00b      	beq.n	8005bbe <I2C_Master_ADDR+0x18a>
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	2b10      	cmp	r3, #16
 8005baa:	d008      	beq.n	8005bbe <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	e007      	b.n	8005bce <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bcc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	e0a1      	b.n	8005d2a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bf4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	e085      	b.n	8005d2a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d14d      	bne.n	8005cc4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d016      	beq.n	8005c5c <I2C_Master_ADDR+0x228>
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d013      	beq.n	8005c5c <I2C_Master_ADDR+0x228>
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d010      	beq.n	8005c5c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c48:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	e007      	b.n	8005c6c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c6a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c7a:	d117      	bne.n	8005cac <I2C_Master_ADDR+0x278>
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c82:	d00b      	beq.n	8005c9c <I2C_Master_ADDR+0x268>
 8005c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d008      	beq.n	8005c9c <I2C_Master_ADDR+0x268>
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d005      	beq.n	8005c9c <I2C_Master_ADDR+0x268>
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	2b10      	cmp	r3, #16
 8005c94:	d002      	beq.n	8005c9c <I2C_Master_ADDR+0x268>
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d107      	bne.n	8005cac <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005caa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	e032      	b.n	8005d2a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cd2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce2:	d117      	bne.n	8005d14 <I2C_Master_ADDR+0x2e0>
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cea:	d00b      	beq.n	8005d04 <I2C_Master_ADDR+0x2d0>
 8005cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d008      	beq.n	8005d04 <I2C_Master_ADDR+0x2d0>
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d005      	beq.n	8005d04 <I2C_Master_ADDR+0x2d0>
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfa:	2b10      	cmp	r3, #16
 8005cfc:	d002      	beq.n	8005d04 <I2C_Master_ADDR+0x2d0>
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	d107      	bne.n	8005d14 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d12:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d14:	2300      	movs	r3, #0
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	613b      	str	r3, [r7, #16]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	613b      	str	r3, [r7, #16]
 8005d28:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005d30:	e00b      	b.n	8005d4a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	68fb      	ldr	r3, [r7, #12]
}
 8005d48:	e7ff      	b.n	8005d4a <I2C_Master_ADDR+0x316>
 8005d4a:	bf00      	nop
 8005d4c:	3744      	adds	r7, #68	; 0x44
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d64:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d02b      	beq.n	8005dc8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	781a      	ldrb	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d114      	bne.n	8005dc8 <I2C_SlaveTransmit_TXE+0x72>
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	2b29      	cmp	r3, #41	; 0x29
 8005da2:	d111      	bne.n	8005dc8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2221      	movs	r2, #33	; 0x21
 8005db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2228      	movs	r2, #40	; 0x28
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff f9f4 	bl	80051b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005dc8:	bf00      	nop
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d011      	beq.n	8005e06 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	781a      	ldrb	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e20:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d02c      	beq.n	8005e86 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d114      	bne.n	8005e86 <I2C_SlaveReceive_RXNE+0x74>
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e60:	d111      	bne.n	8005e86 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e70:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2222      	movs	r2, #34	; 0x22
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2228      	movs	r2, #40	; 0x28
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff f99f 	bl	80051c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d012      	beq.n	8005ec6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005edc:	2300      	movs	r3, #0
 8005ede:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005eec:	2b28      	cmp	r3, #40	; 0x28
 8005eee:	d127      	bne.n	8005f40 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005efe:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	089b      	lsrs	r3, r3, #2
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	09db      	lsrs	r3, r3, #7
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d103      	bne.n	8005f24 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	81bb      	strh	r3, [r7, #12]
 8005f22:	e002      	b.n	8005f2a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005f32:	89ba      	ldrh	r2, [r7, #12]
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff f94d 	bl	80051d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005f3e:	e008      	b.n	8005f52 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0202 	mvn.w	r2, #2
 8005f48:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60bb      	str	r3, [r7, #8]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	60bb      	str	r3, [r7, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fa8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb8:	d172      	bne.n	80060a0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
 8005fbc:	2b22      	cmp	r3, #34	; 0x22
 8005fbe:	d002      	beq.n	8005fc6 <I2C_Slave_STOPF+0x6a>
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fc4:	d135      	bne.n	8006032 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d005      	beq.n	8005fea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f043 0204 	orr.w	r2, r3, #4
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ff8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fe f974 	bl	80042ec <HAL_DMA_GetState>
 8006004:	4603      	mov	r3, r0
 8006006:	2b01      	cmp	r3, #1
 8006008:	d049      	beq.n	800609e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	4a69      	ldr	r2, [pc, #420]	; (80061b4 <I2C_Slave_STOPF+0x258>)
 8006010:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	4618      	mov	r0, r3
 8006018:	f7fd ffbc 	bl	8003f94 <HAL_DMA_Abort_IT>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d03d      	beq.n	800609e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800602c:	4610      	mov	r0, r2
 800602e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006030:	e035      	b.n	800609e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	b29a      	uxth	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	f043 0204 	orr.w	r2, r3, #4
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006064:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606a:	4618      	mov	r0, r3
 800606c:	f7fe f93e 	bl	80042ec <HAL_DMA_GetState>
 8006070:	4603      	mov	r3, r0
 8006072:	2b01      	cmp	r3, #1
 8006074:	d014      	beq.n	80060a0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607a:	4a4e      	ldr	r2, [pc, #312]	; (80061b4 <I2C_Slave_STOPF+0x258>)
 800607c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006082:	4618      	mov	r0, r3
 8006084:	f7fd ff86 	bl	8003f94 <HAL_DMA_Abort_IT>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d008      	beq.n	80060a0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006098:	4610      	mov	r0, r2
 800609a:	4798      	blx	r3
 800609c:	e000      	b.n	80060a0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800609e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d03e      	beq.n	8006128 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d112      	bne.n	80060de <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691a      	ldr	r2, [r3, #16]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b29a      	uxth	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e8:	2b40      	cmp	r3, #64	; 0x40
 80060ea:	d112      	bne.n	8006112 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	f043 0204 	orr.w	r2, r3, #4
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f8b3 	bl	800629c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006136:	e039      	b.n	80061ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	2b2a      	cmp	r3, #42	; 0x2a
 800613c:	d109      	bne.n	8006152 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2228      	movs	r2, #40	; 0x28
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff f839 	bl	80051c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b28      	cmp	r3, #40	; 0x28
 800615c:	d111      	bne.n	8006182 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a15      	ldr	r2, [pc, #84]	; (80061b8 <I2C_Slave_STOPF+0x25c>)
 8006162:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff f83a 	bl	80051f4 <HAL_I2C_ListenCpltCallback>
}
 8006180:	e014      	b.n	80061ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006186:	2b22      	cmp	r3, #34	; 0x22
 8006188:	d002      	beq.n	8006190 <I2C_Slave_STOPF+0x234>
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	2b22      	cmp	r3, #34	; 0x22
 800618e:	d10d      	bne.n	80061ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7ff f80c 	bl	80051c4 <HAL_I2C_SlaveRxCpltCallback>
}
 80061ac:	bf00      	nop
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	08006501 	.word	0x08006501
 80061b8:	ffff0000 	.word	0xffff0000

080061bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d002      	beq.n	80061de <I2C_Slave_AF+0x22>
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d129      	bne.n	8006232 <I2C_Slave_AF+0x76>
 80061de:	7bfb      	ldrb	r3, [r7, #15]
 80061e0:	2b28      	cmp	r3, #40	; 0x28
 80061e2:	d126      	bne.n	8006232 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a2c      	ldr	r2, [pc, #176]	; (8006298 <I2C_Slave_AF+0xdc>)
 80061e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006202:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006212:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fe ffe2 	bl	80051f4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006230:	e02e      	b.n	8006290 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	2b21      	cmp	r3, #33	; 0x21
 8006236:	d126      	bne.n	8006286 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a17      	ldr	r2, [pc, #92]	; (8006298 <I2C_Slave_AF+0xdc>)
 800623c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2221      	movs	r2, #33	; 0x21
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006262:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800626c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fe ff96 	bl	80051b0 <HAL_I2C_SlaveTxCpltCallback>
}
 8006284:	e004      	b.n	8006290 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800628e:	615a      	str	r2, [r3, #20]
}
 8006290:	bf00      	nop
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	ffff0000 	.word	0xffff0000

0800629c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80062b4:	7bbb      	ldrb	r3, [r7, #14]
 80062b6:	2b10      	cmp	r3, #16
 80062b8:	d002      	beq.n	80062c0 <I2C_ITError+0x24>
 80062ba:	7bbb      	ldrb	r3, [r7, #14]
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	d10a      	bne.n	80062d6 <I2C_ITError+0x3a>
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	2b22      	cmp	r3, #34	; 0x22
 80062c4:	d107      	bne.n	80062d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062dc:	2b28      	cmp	r3, #40	; 0x28
 80062de:	d107      	bne.n	80062f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2228      	movs	r2, #40	; 0x28
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062ee:	e015      	b.n	800631c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062fe:	d00a      	beq.n	8006316 <I2C_ITError+0x7a>
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	2b60      	cmp	r3, #96	; 0x60
 8006304:	d007      	beq.n	8006316 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2220      	movs	r2, #32
 800630a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800632a:	d162      	bne.n	80063f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800633a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b01      	cmp	r3, #1
 8006348:	d020      	beq.n	800638c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634e:	4a6a      	ldr	r2, [pc, #424]	; (80064f8 <I2C_ITError+0x25c>)
 8006350:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006356:	4618      	mov	r0, r3
 8006358:	f7fd fe1c 	bl	8003f94 <HAL_DMA_Abort_IT>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 8089 	beq.w	8006476 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0201 	bic.w	r2, r2, #1
 8006372:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006386:	4610      	mov	r0, r2
 8006388:	4798      	blx	r3
 800638a:	e074      	b.n	8006476 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	4a59      	ldr	r2, [pc, #356]	; (80064f8 <I2C_ITError+0x25c>)
 8006392:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	4618      	mov	r0, r3
 800639a:	f7fd fdfb 	bl	8003f94 <HAL_DMA_Abort_IT>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d068      	beq.n	8006476 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ae:	2b40      	cmp	r3, #64	; 0x40
 80063b0:	d10b      	bne.n	80063ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0201 	bic.w	r2, r2, #1
 80063d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063ec:	4610      	mov	r0, r2
 80063ee:	4798      	blx	r3
 80063f0:	e041      	b.n	8006476 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b60      	cmp	r3, #96	; 0x60
 80063fc:	d125      	bne.n	800644a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006416:	2b40      	cmp	r3, #64	; 0x40
 8006418:	d10b      	bne.n	8006432 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0201 	bic.w	r2, r2, #1
 8006440:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fe fef4 	bl	8005230 <HAL_I2C_AbortCpltCallback>
 8006448:	e015      	b.n	8006476 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006454:	2b40      	cmp	r3, #64	; 0x40
 8006456:	d10b      	bne.n	8006470 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7fa fda7 	bl	8000fc4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10e      	bne.n	80064a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800648c:	2b00      	cmp	r3, #0
 800648e:	d109      	bne.n	80064a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006496:	2b00      	cmp	r3, #0
 8006498:	d104      	bne.n	80064a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d007      	beq.n	80064b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d113      	bne.n	80064f0 <I2C_ITError+0x254>
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	2b28      	cmp	r3, #40	; 0x28
 80064cc:	d110      	bne.n	80064f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <I2C_ITError+0x260>)
 80064d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fe fe82 	bl	80051f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80064f0:	bf00      	nop
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	08006501 	.word	0x08006501
 80064fc:	ffff0000 	.word	0xffff0000

08006500 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006518:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800651a:	4b4b      	ldr	r3, [pc, #300]	; (8006648 <I2C_DMAAbort+0x148>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	08db      	lsrs	r3, r3, #3
 8006520:	4a4a      	ldr	r2, [pc, #296]	; (800664c <I2C_DMAAbort+0x14c>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	0a1a      	lsrs	r2, r3, #8
 8006528:	4613      	mov	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	00da      	lsls	r2, r3, #3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	f043 0220 	orr.w	r2, r3, #32
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006546:	e00a      	b.n	800655e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3b01      	subs	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800655c:	d0ea      	beq.n	8006534 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656a:	2200      	movs	r2, #0
 800656c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657a:	2200      	movs	r2, #0
 800657c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800658c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2200      	movs	r2, #0
 8006592:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a0:	2200      	movs	r2, #0
 80065a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	2200      	movs	r2, #0
 80065b2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0201 	bic.w	r2, r2, #1
 80065c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b60      	cmp	r3, #96	; 0x60
 80065ce:	d10e      	bne.n	80065ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2200      	movs	r2, #0
 80065e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80065e6:	6978      	ldr	r0, [r7, #20]
 80065e8:	f7fe fe22 	bl	8005230 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065ec:	e027      	b.n	800663e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80065ee:	7cfb      	ldrb	r3, [r7, #19]
 80065f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065f4:	2b28      	cmp	r3, #40	; 0x28
 80065f6:	d117      	bne.n	8006628 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006616:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2200      	movs	r2, #0
 800661c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2228      	movs	r2, #40	; 0x28
 8006622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006626:	e007      	b.n	8006638 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006638:	6978      	ldr	r0, [r7, #20]
 800663a:	f7fa fcc3 	bl	8000fc4 <HAL_I2C_ErrorCallback>
}
 800663e:	bf00      	nop
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	2000002c 	.word	0x2000002c
 800664c:	14f8b589 	.word	0x14f8b589

08006650 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800665c:	4b13      	ldr	r3, [pc, #76]	; (80066ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	08db      	lsrs	r3, r3, #3
 8006662:	4a13      	ldr	r2, [pc, #76]	; (80066b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006664:	fba2 2303 	umull	r2, r3, r2, r3
 8006668:	0a1a      	lsrs	r2, r3, #8
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3b01      	subs	r3, #1
 8006676:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d107      	bne.n	800668e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	f043 0220 	orr.w	r2, r3, #32
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e008      	b.n	80066a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800669c:	d0e9      	beq.n	8006672 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	2000002c 	.word	0x2000002c
 80066b0:	14f8b589 	.word	0x14f8b589

080066b4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80066c4:	d103      	bne.n	80066ce <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80066cc:	e007      	b.n	80066de <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80066d6:	d102      	bne.n	80066de <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2208      	movs	r2, #8
 80066dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
	...

080066ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e0cc      	b.n	800689a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006700:	4b68      	ldr	r3, [pc, #416]	; (80068a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d90c      	bls.n	8006728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800670e:	4b65      	ldr	r3, [pc, #404]	; (80068a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006716:	4b63      	ldr	r3, [pc, #396]	; (80068a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d001      	beq.n	8006728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e0b8      	b.n	800689a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d020      	beq.n	8006776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006740:	4b59      	ldr	r3, [pc, #356]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	4a58      	ldr	r2, [pc, #352]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800674a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006758:	4b53      	ldr	r3, [pc, #332]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	4a52      	ldr	r2, [pc, #328]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 800675e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006764:	4b50      	ldr	r3, [pc, #320]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	494d      	ldr	r1, [pc, #308]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006772:	4313      	orrs	r3, r2
 8006774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d044      	beq.n	800680c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d107      	bne.n	800679a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678a:	4b47      	ldr	r3, [pc, #284]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d119      	bne.n	80067ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e07f      	b.n	800689a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d003      	beq.n	80067aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d107      	bne.n	80067ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067aa:	4b3f      	ldr	r3, [pc, #252]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e06f      	b.n	800689a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ba:	4b3b      	ldr	r3, [pc, #236]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e067      	b.n	800689a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ca:	4b37      	ldr	r3, [pc, #220]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f023 0203 	bic.w	r2, r3, #3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	4934      	ldr	r1, [pc, #208]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067dc:	f7fd f922 	bl	8003a24 <HAL_GetTick>
 80067e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e2:	e00a      	b.n	80067fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e4:	f7fd f91e 	bl	8003a24 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e04f      	b.n	800689a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fa:	4b2b      	ldr	r3, [pc, #172]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 020c 	and.w	r2, r3, #12
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	429a      	cmp	r2, r3
 800680a:	d1eb      	bne.n	80067e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800680c:	4b25      	ldr	r3, [pc, #148]	; (80068a4 <HAL_RCC_ClockConfig+0x1b8>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 030f 	and.w	r3, r3, #15
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d20c      	bcs.n	8006834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681a:	4b22      	ldr	r3, [pc, #136]	; (80068a4 <HAL_RCC_ClockConfig+0x1b8>)
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006822:	4b20      	ldr	r3, [pc, #128]	; (80068a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d001      	beq.n	8006834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e032      	b.n	800689a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b00      	cmp	r3, #0
 800683e:	d008      	beq.n	8006852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006840:	4b19      	ldr	r3, [pc, #100]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	4916      	ldr	r1, [pc, #88]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 800684e:	4313      	orrs	r3, r2
 8006850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d009      	beq.n	8006872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	490e      	ldr	r1, [pc, #56]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	4313      	orrs	r3, r2
 8006870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006872:	f000 f855 	bl	8006920 <HAL_RCC_GetSysClockFreq>
 8006876:	4602      	mov	r2, r0
 8006878:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	091b      	lsrs	r3, r3, #4
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	490a      	ldr	r1, [pc, #40]	; (80068ac <HAL_RCC_ClockConfig+0x1c0>)
 8006884:	5ccb      	ldrb	r3, [r1, r3]
 8006886:	fa22 f303 	lsr.w	r3, r2, r3
 800688a:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <HAL_RCC_ClockConfig+0x1c4>)
 800688c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800688e:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f7fd f882 	bl	800399c <HAL_InitTick>

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	40023c00 	.word	0x40023c00
 80068a8:	40023800 	.word	0x40023800
 80068ac:	08009b00 	.word	0x08009b00
 80068b0:	2000002c 	.word	0x2000002c
 80068b4:	20000094 	.word	0x20000094

080068b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068bc:	4b03      	ldr	r3, [pc, #12]	; (80068cc <HAL_RCC_GetHCLKFreq+0x14>)
 80068be:	681b      	ldr	r3, [r3, #0]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	2000002c 	.word	0x2000002c

080068d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068d4:	f7ff fff0 	bl	80068b8 <HAL_RCC_GetHCLKFreq>
 80068d8:	4602      	mov	r2, r0
 80068da:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	0a9b      	lsrs	r3, r3, #10
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	4903      	ldr	r1, [pc, #12]	; (80068f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068e6:	5ccb      	ldrb	r3, [r1, r3]
 80068e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	40023800 	.word	0x40023800
 80068f4:	08009b10 	.word	0x08009b10

080068f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068fc:	f7ff ffdc 	bl	80068b8 <HAL_RCC_GetHCLKFreq>
 8006900:	4602      	mov	r2, r0
 8006902:	4b05      	ldr	r3, [pc, #20]	; (8006918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	0b5b      	lsrs	r3, r3, #13
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	4903      	ldr	r1, [pc, #12]	; (800691c <HAL_RCC_GetPCLK2Freq+0x24>)
 800690e:	5ccb      	ldrb	r3, [r1, r3]
 8006910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006914:	4618      	mov	r0, r3
 8006916:	bd80      	pop	{r7, pc}
 8006918:	40023800 	.word	0x40023800
 800691c:	08009b10 	.word	0x08009b10

08006920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006924:	b0ae      	sub	sp, #184	; 0xb8
 8006926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006946:	4bcb      	ldr	r3, [pc, #812]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 030c 	and.w	r3, r3, #12
 800694e:	2b0c      	cmp	r3, #12
 8006950:	f200 8206 	bhi.w	8006d60 <HAL_RCC_GetSysClockFreq+0x440>
 8006954:	a201      	add	r2, pc, #4	; (adr r2, 800695c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695a:	bf00      	nop
 800695c:	08006991 	.word	0x08006991
 8006960:	08006d61 	.word	0x08006d61
 8006964:	08006d61 	.word	0x08006d61
 8006968:	08006d61 	.word	0x08006d61
 800696c:	08006999 	.word	0x08006999
 8006970:	08006d61 	.word	0x08006d61
 8006974:	08006d61 	.word	0x08006d61
 8006978:	08006d61 	.word	0x08006d61
 800697c:	080069a1 	.word	0x080069a1
 8006980:	08006d61 	.word	0x08006d61
 8006984:	08006d61 	.word	0x08006d61
 8006988:	08006d61 	.word	0x08006d61
 800698c:	08006b91 	.word	0x08006b91
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006990:	4bb9      	ldr	r3, [pc, #740]	; (8006c78 <HAL_RCC_GetSysClockFreq+0x358>)
 8006992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006996:	e1e7      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006998:	4bb8      	ldr	r3, [pc, #736]	; (8006c7c <HAL_RCC_GetSysClockFreq+0x35c>)
 800699a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800699e:	e1e3      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069a0:	4bb4      	ldr	r3, [pc, #720]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x354>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069ac:	4bb1      	ldr	r3, [pc, #708]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x354>)
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d071      	beq.n	8006a9c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069b8:	4bae      	ldr	r3, [pc, #696]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x354>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	099b      	lsrs	r3, r3, #6
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80069c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069d4:	2300      	movs	r3, #0
 80069d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069de:	4622      	mov	r2, r4
 80069e0:	462b      	mov	r3, r5
 80069e2:	f04f 0000 	mov.w	r0, #0
 80069e6:	f04f 0100 	mov.w	r1, #0
 80069ea:	0159      	lsls	r1, r3, #5
 80069ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069f0:	0150      	lsls	r0, r2, #5
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4621      	mov	r1, r4
 80069f8:	1a51      	subs	r1, r2, r1
 80069fa:	6439      	str	r1, [r7, #64]	; 0x40
 80069fc:	4629      	mov	r1, r5
 80069fe:	eb63 0301 	sbc.w	r3, r3, r1
 8006a02:	647b      	str	r3, [r7, #68]	; 0x44
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006a10:	4649      	mov	r1, r9
 8006a12:	018b      	lsls	r3, r1, #6
 8006a14:	4641      	mov	r1, r8
 8006a16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a1a:	4641      	mov	r1, r8
 8006a1c:	018a      	lsls	r2, r1, #6
 8006a1e:	4641      	mov	r1, r8
 8006a20:	1a51      	subs	r1, r2, r1
 8006a22:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a24:	4649      	mov	r1, r9
 8006a26:	eb63 0301 	sbc.w	r3, r3, r1
 8006a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006a38:	4649      	mov	r1, r9
 8006a3a:	00cb      	lsls	r3, r1, #3
 8006a3c:	4641      	mov	r1, r8
 8006a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a42:	4641      	mov	r1, r8
 8006a44:	00ca      	lsls	r2, r1, #3
 8006a46:	4610      	mov	r0, r2
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	189b      	adds	r3, r3, r2
 8006a50:	633b      	str	r3, [r7, #48]	; 0x30
 8006a52:	462b      	mov	r3, r5
 8006a54:	460a      	mov	r2, r1
 8006a56:	eb42 0303 	adc.w	r3, r2, r3
 8006a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	f04f 0300 	mov.w	r3, #0
 8006a64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a68:	4629      	mov	r1, r5
 8006a6a:	024b      	lsls	r3, r1, #9
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a72:	4621      	mov	r1, r4
 8006a74:	024a      	lsls	r2, r1, #9
 8006a76:	4610      	mov	r0, r2
 8006a78:	4619      	mov	r1, r3
 8006a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006a8c:	f7f9 fc10 	bl	80002b0 <__aeabi_uldivmod>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4613      	mov	r3, r2
 8006a96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a9a:	e067      	b.n	8006b6c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a9c:	4b75      	ldr	r3, [pc, #468]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	099b      	lsrs	r3, r3, #6
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006aa8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006aba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006abe:	4622      	mov	r2, r4
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	f04f 0000 	mov.w	r0, #0
 8006ac6:	f04f 0100 	mov.w	r1, #0
 8006aca:	0159      	lsls	r1, r3, #5
 8006acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ad0:	0150      	lsls	r0, r2, #5
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	1a51      	subs	r1, r2, r1
 8006ada:	62b9      	str	r1, [r7, #40]	; 0x28
 8006adc:	4629      	mov	r1, r5
 8006ade:	eb63 0301 	sbc.w	r3, r3, r1
 8006ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006af0:	4649      	mov	r1, r9
 8006af2:	018b      	lsls	r3, r1, #6
 8006af4:	4641      	mov	r1, r8
 8006af6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006afa:	4641      	mov	r1, r8
 8006afc:	018a      	lsls	r2, r1, #6
 8006afe:	4641      	mov	r1, r8
 8006b00:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b04:	4649      	mov	r1, r9
 8006b06:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b16:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b1e:	4692      	mov	sl, r2
 8006b20:	469b      	mov	fp, r3
 8006b22:	4623      	mov	r3, r4
 8006b24:	eb1a 0303 	adds.w	r3, sl, r3
 8006b28:	623b      	str	r3, [r7, #32]
 8006b2a:	462b      	mov	r3, r5
 8006b2c:	eb4b 0303 	adc.w	r3, fp, r3
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006b3e:	4629      	mov	r1, r5
 8006b40:	028b      	lsls	r3, r1, #10
 8006b42:	4621      	mov	r1, r4
 8006b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b48:	4621      	mov	r1, r4
 8006b4a:	028a      	lsls	r2, r1, #10
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4619      	mov	r1, r3
 8006b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b54:	2200      	movs	r2, #0
 8006b56:	673b      	str	r3, [r7, #112]	; 0x70
 8006b58:	677a      	str	r2, [r7, #116]	; 0x74
 8006b5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006b5e:	f7f9 fba7 	bl	80002b0 <__aeabi_uldivmod>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4613      	mov	r3, r2
 8006b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b6c:	4b41      	ldr	r3, [pc, #260]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	0c1b      	lsrs	r3, r3, #16
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	3301      	adds	r3, #1
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006b8e:	e0eb      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b90:	4b38      	ldr	r3, [pc, #224]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b9c:	4b35      	ldr	r3, [pc, #212]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d06b      	beq.n	8006c80 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ba8:	4b32      	ldr	r3, [pc, #200]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	099b      	lsrs	r3, r3, #6
 8006bae:	2200      	movs	r2, #0
 8006bb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bba:	663b      	str	r3, [r7, #96]	; 0x60
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	667b      	str	r3, [r7, #100]	; 0x64
 8006bc0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	462b      	mov	r3, r5
 8006bc8:	f04f 0000 	mov.w	r0, #0
 8006bcc:	f04f 0100 	mov.w	r1, #0
 8006bd0:	0159      	lsls	r1, r3, #5
 8006bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bd6:	0150      	lsls	r0, r2, #5
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4621      	mov	r1, r4
 8006bde:	1a51      	subs	r1, r2, r1
 8006be0:	61b9      	str	r1, [r7, #24]
 8006be2:	4629      	mov	r1, r5
 8006be4:	eb63 0301 	sbc.w	r3, r3, r1
 8006be8:	61fb      	str	r3, [r7, #28]
 8006bea:	f04f 0200 	mov.w	r2, #0
 8006bee:	f04f 0300 	mov.w	r3, #0
 8006bf2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006bf6:	4659      	mov	r1, fp
 8006bf8:	018b      	lsls	r3, r1, #6
 8006bfa:	4651      	mov	r1, sl
 8006bfc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c00:	4651      	mov	r1, sl
 8006c02:	018a      	lsls	r2, r1, #6
 8006c04:	4651      	mov	r1, sl
 8006c06:	ebb2 0801 	subs.w	r8, r2, r1
 8006c0a:	4659      	mov	r1, fp
 8006c0c:	eb63 0901 	sbc.w	r9, r3, r1
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c24:	4690      	mov	r8, r2
 8006c26:	4699      	mov	r9, r3
 8006c28:	4623      	mov	r3, r4
 8006c2a:	eb18 0303 	adds.w	r3, r8, r3
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	462b      	mov	r3, r5
 8006c32:	eb49 0303 	adc.w	r3, r9, r3
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	f04f 0200 	mov.w	r2, #0
 8006c3c:	f04f 0300 	mov.w	r3, #0
 8006c40:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006c44:	4629      	mov	r1, r5
 8006c46:	024b      	lsls	r3, r1, #9
 8006c48:	4621      	mov	r1, r4
 8006c4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c4e:	4621      	mov	r1, r4
 8006c50:	024a      	lsls	r2, r1, #9
 8006c52:	4610      	mov	r0, r2
 8006c54:	4619      	mov	r1, r3
 8006c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c5e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006c60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c64:	f7f9 fb24 	bl	80002b0 <__aeabi_uldivmod>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c72:	e065      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x420>
 8006c74:	40023800 	.word	0x40023800
 8006c78:	00f42400 	.word	0x00f42400
 8006c7c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c80:	4b3d      	ldr	r3, [pc, #244]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x458>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	099b      	lsrs	r3, r3, #6
 8006c86:	2200      	movs	r2, #0
 8006c88:	4618      	mov	r0, r3
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c90:	653b      	str	r3, [r7, #80]	; 0x50
 8006c92:	2300      	movs	r3, #0
 8006c94:	657b      	str	r3, [r7, #84]	; 0x54
 8006c96:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006c9a:	4642      	mov	r2, r8
 8006c9c:	464b      	mov	r3, r9
 8006c9e:	f04f 0000 	mov.w	r0, #0
 8006ca2:	f04f 0100 	mov.w	r1, #0
 8006ca6:	0159      	lsls	r1, r3, #5
 8006ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cac:	0150      	lsls	r0, r2, #5
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4641      	mov	r1, r8
 8006cb4:	1a51      	subs	r1, r2, r1
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	4649      	mov	r1, r9
 8006cba:	eb63 0301 	sbc.w	r3, r3, r1
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006ccc:	4659      	mov	r1, fp
 8006cce:	018b      	lsls	r3, r1, #6
 8006cd0:	4651      	mov	r1, sl
 8006cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cd6:	4651      	mov	r1, sl
 8006cd8:	018a      	lsls	r2, r1, #6
 8006cda:	4651      	mov	r1, sl
 8006cdc:	1a54      	subs	r4, r2, r1
 8006cde:	4659      	mov	r1, fp
 8006ce0:	eb63 0501 	sbc.w	r5, r3, r1
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	00eb      	lsls	r3, r5, #3
 8006cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cf2:	00e2      	lsls	r2, r4, #3
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	461d      	mov	r5, r3
 8006cf8:	4643      	mov	r3, r8
 8006cfa:	18e3      	adds	r3, r4, r3
 8006cfc:	603b      	str	r3, [r7, #0]
 8006cfe:	464b      	mov	r3, r9
 8006d00:	eb45 0303 	adc.w	r3, r5, r3
 8006d04:	607b      	str	r3, [r7, #4]
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	f04f 0300 	mov.w	r3, #0
 8006d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d12:	4629      	mov	r1, r5
 8006d14:	028b      	lsls	r3, r1, #10
 8006d16:	4621      	mov	r1, r4
 8006d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	028a      	lsls	r2, r1, #10
 8006d20:	4610      	mov	r0, r2
 8006d22:	4619      	mov	r1, r3
 8006d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d28:	2200      	movs	r2, #0
 8006d2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d2c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006d2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d32:	f7f9 fabd 	bl	80002b0 <__aeabi_uldivmod>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006d40:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x458>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	0f1b      	lsrs	r3, r3, #28
 8006d46:	f003 0307 	and.w	r3, r3, #7
 8006d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006d5e:	e003      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d60:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x45c>)
 8006d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006d66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	37b8      	adds	r7, #184	; 0xb8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d76:	bf00      	nop
 8006d78:	40023800 	.word	0x40023800
 8006d7c:	00f42400 	.word	0x00f42400

08006d80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e28d      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 8083 	beq.w	8006ea6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006da0:	4b94      	ldr	r3, [pc, #592]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f003 030c 	and.w	r3, r3, #12
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d019      	beq.n	8006de0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006dac:	4b91      	ldr	r3, [pc, #580]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d106      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006db8:	4b8e      	ldr	r3, [pc, #568]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dc4:	d00c      	beq.n	8006de0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dc6:	4b8b      	ldr	r3, [pc, #556]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006dce:	2b0c      	cmp	r3, #12
 8006dd0:	d112      	bne.n	8006df8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dd2:	4b88      	ldr	r3, [pc, #544]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dde:	d10b      	bne.n	8006df8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006de0:	4b84      	ldr	r3, [pc, #528]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d05b      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x124>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d157      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e25a      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e00:	d106      	bne.n	8006e10 <HAL_RCC_OscConfig+0x90>
 8006e02:	4b7c      	ldr	r3, [pc, #496]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a7b      	ldr	r2, [pc, #492]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e0c:	6013      	str	r3, [r2, #0]
 8006e0e:	e01d      	b.n	8006e4c <HAL_RCC_OscConfig+0xcc>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e18:	d10c      	bne.n	8006e34 <HAL_RCC_OscConfig+0xb4>
 8006e1a:	4b76      	ldr	r3, [pc, #472]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a75      	ldr	r2, [pc, #468]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	4b73      	ldr	r3, [pc, #460]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a72      	ldr	r2, [pc, #456]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	e00b      	b.n	8006e4c <HAL_RCC_OscConfig+0xcc>
 8006e34:	4b6f      	ldr	r3, [pc, #444]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a6e      	ldr	r2, [pc, #440]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	4b6c      	ldr	r3, [pc, #432]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a6b      	ldr	r2, [pc, #428]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d013      	beq.n	8006e7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e54:	f7fc fde6 	bl	8003a24 <HAL_GetTick>
 8006e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e5c:	f7fc fde2 	bl	8003a24 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b64      	cmp	r3, #100	; 0x64
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e21f      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e6e:	4b61      	ldr	r3, [pc, #388]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0f0      	beq.n	8006e5c <HAL_RCC_OscConfig+0xdc>
 8006e7a:	e014      	b.n	8006ea6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7c:	f7fc fdd2 	bl	8003a24 <HAL_GetTick>
 8006e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e82:	e008      	b.n	8006e96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e84:	f7fc fdce 	bl	8003a24 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b64      	cmp	r3, #100	; 0x64
 8006e90:	d901      	bls.n	8006e96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e20b      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e96:	4b57      	ldr	r3, [pc, #348]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1f0      	bne.n	8006e84 <HAL_RCC_OscConfig+0x104>
 8006ea2:	e000      	b.n	8006ea6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d06f      	beq.n	8006f92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006eb2:	4b50      	ldr	r3, [pc, #320]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 030c 	and.w	r3, r3, #12
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d017      	beq.n	8006eee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006ebe:	4b4d      	ldr	r3, [pc, #308]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006ec6:	2b08      	cmp	r3, #8
 8006ec8:	d105      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006eca:	4b4a      	ldr	r3, [pc, #296]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ed6:	4b47      	ldr	r3, [pc, #284]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006ede:	2b0c      	cmp	r3, #12
 8006ee0:	d11c      	bne.n	8006f1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ee2:	4b44      	ldr	r3, [pc, #272]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d116      	bne.n	8006f1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eee:	4b41      	ldr	r3, [pc, #260]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d005      	beq.n	8006f06 <HAL_RCC_OscConfig+0x186>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d001      	beq.n	8006f06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e1d3      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f06:	4b3b      	ldr	r3, [pc, #236]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	4937      	ldr	r1, [pc, #220]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f1a:	e03a      	b.n	8006f92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d020      	beq.n	8006f66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f24:	4b34      	ldr	r3, [pc, #208]	; (8006ff8 <HAL_RCC_OscConfig+0x278>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2a:	f7fc fd7b 	bl	8003a24 <HAL_GetTick>
 8006f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f30:	e008      	b.n	8006f44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f32:	f7fc fd77 	bl	8003a24 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e1b4      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f44:	4b2b      	ldr	r3, [pc, #172]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0f0      	beq.n	8006f32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f50:	4b28      	ldr	r3, [pc, #160]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	4925      	ldr	r1, [pc, #148]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	600b      	str	r3, [r1, #0]
 8006f64:	e015      	b.n	8006f92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f66:	4b24      	ldr	r3, [pc, #144]	; (8006ff8 <HAL_RCC_OscConfig+0x278>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f6c:	f7fc fd5a 	bl	8003a24 <HAL_GetTick>
 8006f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f72:	e008      	b.n	8006f86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f74:	f7fc fd56 	bl	8003a24 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e193      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f86:	4b1b      	ldr	r3, [pc, #108]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1f0      	bne.n	8006f74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0308 	and.w	r3, r3, #8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d036      	beq.n	800700c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d016      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fa6:	4b15      	ldr	r3, [pc, #84]	; (8006ffc <HAL_RCC_OscConfig+0x27c>)
 8006fa8:	2201      	movs	r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fac:	f7fc fd3a 	bl	8003a24 <HAL_GetTick>
 8006fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fb4:	f7fc fd36 	bl	8003a24 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e173      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <HAL_RCC_OscConfig+0x274>)
 8006fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0f0      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x234>
 8006fd2:	e01b      	b.n	800700c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fd4:	4b09      	ldr	r3, [pc, #36]	; (8006ffc <HAL_RCC_OscConfig+0x27c>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fda:	f7fc fd23 	bl	8003a24 <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fe0:	e00e      	b.n	8007000 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fe2:	f7fc fd1f 	bl	8003a24 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d907      	bls.n	8007000 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e15c      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
 8006ff4:	40023800 	.word	0x40023800
 8006ff8:	42470000 	.word	0x42470000
 8006ffc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007000:	4b8a      	ldr	r3, [pc, #552]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 8007002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1ea      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 8097 	beq.w	8007148 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800701a:	2300      	movs	r3, #0
 800701c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800701e:	4b83      	ldr	r3, [pc, #524]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10f      	bne.n	800704a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800702a:	2300      	movs	r3, #0
 800702c:	60bb      	str	r3, [r7, #8]
 800702e:	4b7f      	ldr	r3, [pc, #508]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	4a7e      	ldr	r2, [pc, #504]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 8007034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007038:	6413      	str	r3, [r2, #64]	; 0x40
 800703a:	4b7c      	ldr	r3, [pc, #496]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007042:	60bb      	str	r3, [r7, #8]
 8007044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007046:	2301      	movs	r3, #1
 8007048:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800704a:	4b79      	ldr	r3, [pc, #484]	; (8007230 <HAL_RCC_OscConfig+0x4b0>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007052:	2b00      	cmp	r3, #0
 8007054:	d118      	bne.n	8007088 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007056:	4b76      	ldr	r3, [pc, #472]	; (8007230 <HAL_RCC_OscConfig+0x4b0>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a75      	ldr	r2, [pc, #468]	; (8007230 <HAL_RCC_OscConfig+0x4b0>)
 800705c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007062:	f7fc fcdf 	bl	8003a24 <HAL_GetTick>
 8007066:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007068:	e008      	b.n	800707c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800706a:	f7fc fcdb 	bl	8003a24 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d901      	bls.n	800707c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e118      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800707c:	4b6c      	ldr	r3, [pc, #432]	; (8007230 <HAL_RCC_OscConfig+0x4b0>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0f0      	beq.n	800706a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d106      	bne.n	800709e <HAL_RCC_OscConfig+0x31e>
 8007090:	4b66      	ldr	r3, [pc, #408]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 8007092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007094:	4a65      	ldr	r2, [pc, #404]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 8007096:	f043 0301 	orr.w	r3, r3, #1
 800709a:	6713      	str	r3, [r2, #112]	; 0x70
 800709c:	e01c      	b.n	80070d8 <HAL_RCC_OscConfig+0x358>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	2b05      	cmp	r3, #5
 80070a4:	d10c      	bne.n	80070c0 <HAL_RCC_OscConfig+0x340>
 80070a6:	4b61      	ldr	r3, [pc, #388]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 80070a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070aa:	4a60      	ldr	r2, [pc, #384]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 80070ac:	f043 0304 	orr.w	r3, r3, #4
 80070b0:	6713      	str	r3, [r2, #112]	; 0x70
 80070b2:	4b5e      	ldr	r3, [pc, #376]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 80070b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b6:	4a5d      	ldr	r2, [pc, #372]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 80070b8:	f043 0301 	orr.w	r3, r3, #1
 80070bc:	6713      	str	r3, [r2, #112]	; 0x70
 80070be:	e00b      	b.n	80070d8 <HAL_RCC_OscConfig+0x358>
 80070c0:	4b5a      	ldr	r3, [pc, #360]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 80070c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c4:	4a59      	ldr	r2, [pc, #356]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 80070c6:	f023 0301 	bic.w	r3, r3, #1
 80070ca:	6713      	str	r3, [r2, #112]	; 0x70
 80070cc:	4b57      	ldr	r3, [pc, #348]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 80070ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d0:	4a56      	ldr	r2, [pc, #344]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 80070d2:	f023 0304 	bic.w	r3, r3, #4
 80070d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d015      	beq.n	800710c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e0:	f7fc fca0 	bl	8003a24 <HAL_GetTick>
 80070e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070e6:	e00a      	b.n	80070fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070e8:	f7fc fc9c 	bl	8003a24 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e0d7      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070fe:	4b4b      	ldr	r3, [pc, #300]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 8007100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0ee      	beq.n	80070e8 <HAL_RCC_OscConfig+0x368>
 800710a:	e014      	b.n	8007136 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800710c:	f7fc fc8a 	bl	8003a24 <HAL_GetTick>
 8007110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007112:	e00a      	b.n	800712a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007114:	f7fc fc86 	bl	8003a24 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007122:	4293      	cmp	r3, r2
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e0c1      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800712a:	4b40      	ldr	r3, [pc, #256]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 800712c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1ee      	bne.n	8007114 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007136:	7dfb      	ldrb	r3, [r7, #23]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d105      	bne.n	8007148 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800713c:	4b3b      	ldr	r3, [pc, #236]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 800713e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007140:	4a3a      	ldr	r2, [pc, #232]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 8007142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007146:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 80ad 	beq.w	80072ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007152:	4b36      	ldr	r3, [pc, #216]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 030c 	and.w	r3, r3, #12
 800715a:	2b08      	cmp	r3, #8
 800715c:	d060      	beq.n	8007220 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	2b02      	cmp	r3, #2
 8007164:	d145      	bne.n	80071f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007166:	4b33      	ldr	r3, [pc, #204]	; (8007234 <HAL_RCC_OscConfig+0x4b4>)
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716c:	f7fc fc5a 	bl	8003a24 <HAL_GetTick>
 8007170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007172:	e008      	b.n	8007186 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007174:	f7fc fc56 	bl	8003a24 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	2b02      	cmp	r3, #2
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e093      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007186:	4b29      	ldr	r3, [pc, #164]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1f0      	bne.n	8007174 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	69da      	ldr	r2, [r3, #28]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	431a      	orrs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a0:	019b      	lsls	r3, r3, #6
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a8:	085b      	lsrs	r3, r3, #1
 80071aa:	3b01      	subs	r3, #1
 80071ac:	041b      	lsls	r3, r3, #16
 80071ae:	431a      	orrs	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	061b      	lsls	r3, r3, #24
 80071b6:	431a      	orrs	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071bc:	071b      	lsls	r3, r3, #28
 80071be:	491b      	ldr	r1, [pc, #108]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071c4:	4b1b      	ldr	r3, [pc, #108]	; (8007234 <HAL_RCC_OscConfig+0x4b4>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ca:	f7fc fc2b 	bl	8003a24 <HAL_GetTick>
 80071ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071d0:	e008      	b.n	80071e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071d2:	f7fc fc27 	bl	8003a24 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d901      	bls.n	80071e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e064      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071e4:	4b11      	ldr	r3, [pc, #68]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0f0      	beq.n	80071d2 <HAL_RCC_OscConfig+0x452>
 80071f0:	e05c      	b.n	80072ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f2:	4b10      	ldr	r3, [pc, #64]	; (8007234 <HAL_RCC_OscConfig+0x4b4>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f8:	f7fc fc14 	bl	8003a24 <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071fe:	e008      	b.n	8007212 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007200:	f7fc fc10 	bl	8003a24 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e04d      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007212:	4b06      	ldr	r3, [pc, #24]	; (800722c <HAL_RCC_OscConfig+0x4ac>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1f0      	bne.n	8007200 <HAL_RCC_OscConfig+0x480>
 800721e:	e045      	b.n	80072ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d107      	bne.n	8007238 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e040      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
 800722c:	40023800 	.word	0x40023800
 8007230:	40007000 	.word	0x40007000
 8007234:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007238:	4b1f      	ldr	r3, [pc, #124]	; (80072b8 <HAL_RCC_OscConfig+0x538>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d030      	beq.n	80072a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007250:	429a      	cmp	r2, r3
 8007252:	d129      	bne.n	80072a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800725e:	429a      	cmp	r2, r3
 8007260:	d122      	bne.n	80072a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007268:	4013      	ands	r3, r2
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800726e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007270:	4293      	cmp	r3, r2
 8007272:	d119      	bne.n	80072a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727e:	085b      	lsrs	r3, r3, #1
 8007280:	3b01      	subs	r3, #1
 8007282:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007284:	429a      	cmp	r2, r3
 8007286:	d10f      	bne.n	80072a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007292:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007294:	429a      	cmp	r2, r3
 8007296:	d107      	bne.n	80072a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d001      	beq.n	80072ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e000      	b.n	80072ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	40023800 	.word	0x40023800

080072bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e03f      	b.n	800734e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7fb fd2c 	bl	8002d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2224      	movs	r2, #36	; 0x24
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 ffcb 	bl	800829c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691a      	ldr	r2, [r3, #16]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	695a      	ldr	r2, [r3, #20]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2220      	movs	r2, #32
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2220      	movs	r2, #32
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b08a      	sub	sp, #40	; 0x28
 800735a:	af02      	add	r7, sp, #8
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	603b      	str	r3, [r7, #0]
 8007362:	4613      	mov	r3, r2
 8007364:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b20      	cmp	r3, #32
 8007374:	d17c      	bne.n	8007470 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <HAL_UART_Transmit+0x2c>
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e075      	b.n	8007472 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <HAL_UART_Transmit+0x3e>
 8007390:	2302      	movs	r3, #2
 8007392:	e06e      	b.n	8007472 <HAL_UART_Transmit+0x11c>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2221      	movs	r2, #33	; 0x21
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073aa:	f7fc fb3b 	bl	8003a24 <HAL_GetTick>
 80073ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	88fa      	ldrh	r2, [r7, #6]
 80073b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	88fa      	ldrh	r2, [r7, #6]
 80073ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c4:	d108      	bne.n	80073d8 <HAL_UART_Transmit+0x82>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d104      	bne.n	80073d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80073ce:	2300      	movs	r3, #0
 80073d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	61bb      	str	r3, [r7, #24]
 80073d6:	e003      	b.n	80073e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073dc:	2300      	movs	r3, #0
 80073de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80073e8:	e02a      	b.n	8007440 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2200      	movs	r2, #0
 80073f2:	2180      	movs	r1, #128	; 0x80
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 fc83 	bl	8007d00 <UART_WaitOnFlagUntilTimeout>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e036      	b.n	8007472 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10b      	bne.n	8007422 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007418:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	3302      	adds	r3, #2
 800741e:	61bb      	str	r3, [r7, #24]
 8007420:	e007      	b.n	8007432 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	781a      	ldrb	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	3301      	adds	r3, #1
 8007430:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007436:	b29b      	uxth	r3, r3
 8007438:	3b01      	subs	r3, #1
 800743a:	b29a      	uxth	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1cf      	bne.n	80073ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2200      	movs	r2, #0
 8007452:	2140      	movs	r1, #64	; 0x40
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 fc53 	bl	8007d00 <UART_WaitOnFlagUntilTimeout>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e006      	b.n	8007472 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2220      	movs	r2, #32
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	e000      	b.n	8007472 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007470:	2302      	movs	r3, #2
  }
}
 8007472:	4618      	mov	r0, r3
 8007474:	3720      	adds	r7, #32
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b084      	sub	sp, #16
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	4613      	mov	r3, r2
 8007486:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b20      	cmp	r3, #32
 8007492:	d11d      	bne.n	80074d0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <HAL_UART_Receive_DMA+0x26>
 800749a:	88fb      	ldrh	r3, [r7, #6]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e016      	b.n	80074d2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d101      	bne.n	80074b2 <HAL_UART_Receive_DMA+0x38>
 80074ae:	2302      	movs	r3, #2
 80074b0:	e00f      	b.n	80074d2 <HAL_UART_Receive_DMA+0x58>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80074c0:	88fb      	ldrh	r3, [r7, #6]
 80074c2:	461a      	mov	r2, r3
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 fc88 	bl	8007ddc <UART_Start_Receive_DMA>
 80074cc:	4603      	mov	r3, r0
 80074ce:	e000      	b.n	80074d2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80074d0:	2302      	movs	r3, #2
  }
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b08c      	sub	sp, #48	; 0x30
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	4613      	mov	r3, r2
 80074e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b20      	cmp	r3, #32
 80074f2:	d152      	bne.n	800759a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80074fa:	88fb      	ldrh	r3, [r7, #6]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e04b      	b.n	800759c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800750a:	2b01      	cmp	r3, #1
 800750c:	d101      	bne.n	8007512 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800750e:	2302      	movs	r3, #2
 8007510:	e044      	b.n	800759c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2201      	movs	r2, #1
 800751e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007520:	88fb      	ldrh	r3, [r7, #6]
 8007522:	461a      	mov	r2, r3
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 fc58 	bl	8007ddc <UART_Start_Receive_DMA>
 800752c:	4603      	mov	r3, r0
 800752e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007536:	2b00      	cmp	r3, #0
 8007538:	d12c      	bne.n	8007594 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753e:	2b01      	cmp	r3, #1
 8007540:	d125      	bne.n	800758e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007542:	2300      	movs	r3, #0
 8007544:	613b      	str	r3, [r7, #16]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	613b      	str	r3, [r7, #16]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	613b      	str	r3, [r7, #16]
 8007556:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	330c      	adds	r3, #12
 800755e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	617b      	str	r3, [r7, #20]
   return(result);
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f043 0310 	orr.w	r3, r3, #16
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007578:	627a      	str	r2, [r7, #36]	; 0x24
 800757a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6a39      	ldr	r1, [r7, #32]
 800757e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	61fb      	str	r3, [r7, #28]
   return(result);
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e5      	bne.n	8007558 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800758c:	e002      	b.n	8007594 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007594:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007598:	e000      	b.n	800759c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800759a:	2302      	movs	r3, #2
  }
}
 800759c:	4618      	mov	r0, r3
 800759e:	3730      	adds	r7, #48	; 0x30
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b0ba      	sub	sp, #232	; 0xe8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80075d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80075e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10f      	bne.n	800760a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ee:	f003 0320 	and.w	r3, r3, #32
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d009      	beq.n	800760a <HAL_UART_IRQHandler+0x66>
 80075f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fd8f 	bl	8008126 <UART_Receive_IT>
      return;
 8007608:	e256      	b.n	8007ab8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800760a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 80de 	beq.w	80077d0 <HAL_UART_IRQHandler+0x22c>
 8007614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d106      	bne.n	800762e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007624:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 80d1 	beq.w	80077d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800762e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00b      	beq.n	8007652 <HAL_UART_IRQHandler+0xae>
 800763a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800763e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007642:	2b00      	cmp	r3, #0
 8007644:	d005      	beq.n	8007652 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	f043 0201 	orr.w	r2, r3, #1
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007656:	f003 0304 	and.w	r3, r3, #4
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00b      	beq.n	8007676 <HAL_UART_IRQHandler+0xd2>
 800765e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d005      	beq.n	8007676 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766e:	f043 0202 	orr.w	r2, r3, #2
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00b      	beq.n	800769a <HAL_UART_IRQHandler+0xf6>
 8007682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d005      	beq.n	800769a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	f043 0204 	orr.w	r2, r3, #4
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800769a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800769e:	f003 0308 	and.w	r3, r3, #8
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d011      	beq.n	80076ca <HAL_UART_IRQHandler+0x126>
 80076a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076aa:	f003 0320 	and.w	r3, r3, #32
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d105      	bne.n	80076be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d005      	beq.n	80076ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	f043 0208 	orr.w	r2, r3, #8
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 81ed 	beq.w	8007aae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d8:	f003 0320 	and.w	r3, r3, #32
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d008      	beq.n	80076f2 <HAL_UART_IRQHandler+0x14e>
 80076e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fd1a 	bl	8008126 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fc:	2b40      	cmp	r3, #64	; 0x40
 80076fe:	bf0c      	ite	eq
 8007700:	2301      	moveq	r3, #1
 8007702:	2300      	movne	r3, #0
 8007704:	b2db      	uxtb	r3, r3
 8007706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f003 0308 	and.w	r3, r3, #8
 8007712:	2b00      	cmp	r3, #0
 8007714:	d103      	bne.n	800771e <HAL_UART_IRQHandler+0x17a>
 8007716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800771a:	2b00      	cmp	r3, #0
 800771c:	d04f      	beq.n	80077be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fc22 	bl	8007f68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772e:	2b40      	cmp	r3, #64	; 0x40
 8007730:	d141      	bne.n	80077b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3314      	adds	r3, #20
 8007738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800774c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3314      	adds	r3, #20
 800775a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800775e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800776a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800776e:	e841 2300 	strex	r3, r2, [r1]
 8007772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1d9      	bne.n	8007732 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007782:	2b00      	cmp	r3, #0
 8007784:	d013      	beq.n	80077ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	4a7d      	ldr	r2, [pc, #500]	; (8007980 <HAL_UART_IRQHandler+0x3dc>)
 800778c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007792:	4618      	mov	r0, r3
 8007794:	f7fc fbfe 	bl	8003f94 <HAL_DMA_Abort_IT>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d016      	beq.n	80077cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077a8:	4610      	mov	r0, r2
 80077aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ac:	e00e      	b.n	80077cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f9a4 	bl	8007afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b4:	e00a      	b.n	80077cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f9a0 	bl	8007afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077bc:	e006      	b.n	80077cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f99c 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80077ca:	e170      	b.n	8007aae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077cc:	bf00      	nop
    return;
 80077ce:	e16e      	b.n	8007aae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	f040 814a 	bne.w	8007a6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80077da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077de:	f003 0310 	and.w	r3, r3, #16
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 8143 	beq.w	8007a6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80077e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ec:	f003 0310 	and.w	r3, r3, #16
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 813c 	beq.w	8007a6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077f6:	2300      	movs	r3, #0
 80077f8:	60bb      	str	r3, [r7, #8]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60bb      	str	r3, [r7, #8]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	60bb      	str	r3, [r7, #8]
 800780a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007816:	2b40      	cmp	r3, #64	; 0x40
 8007818:	f040 80b4 	bne.w	8007984 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007828:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 8140 	beq.w	8007ab2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800783a:	429a      	cmp	r2, r3
 800783c:	f080 8139 	bcs.w	8007ab2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007846:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007852:	f000 8088 	beq.w	8007966 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	330c      	adds	r3, #12
 800785c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800786c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	330c      	adds	r3, #12
 800787e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007882:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800788e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800789a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1d9      	bne.n	8007856 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3314      	adds	r3, #20
 80078a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078ac:	e853 3f00 	ldrex	r3, [r3]
 80078b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078b4:	f023 0301 	bic.w	r3, r3, #1
 80078b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3314      	adds	r3, #20
 80078c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e1      	bne.n	80078a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3314      	adds	r3, #20
 80078e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3314      	adds	r3, #20
 80078fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007902:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007904:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007908:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e3      	bne.n	80078de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	330c      	adds	r3, #12
 800792a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007936:	f023 0310 	bic.w	r3, r3, #16
 800793a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	330c      	adds	r3, #12
 8007944:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007948:	65ba      	str	r2, [r7, #88]	; 0x58
 800794a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800794e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007950:	e841 2300 	strex	r3, r2, [r1]
 8007954:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1e3      	bne.n	8007924 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007960:	4618      	mov	r0, r3
 8007962:	f7fc faa7 	bl	8003eb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800796e:	b29b      	uxth	r3, r3
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	b29b      	uxth	r3, r3
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7f9 fcf0 	bl	800135c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800797c:	e099      	b.n	8007ab2 <HAL_UART_IRQHandler+0x50e>
 800797e:	bf00      	nop
 8007980:	0800802f 	.word	0x0800802f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800798c:	b29b      	uxth	r3, r3
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007998:	b29b      	uxth	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 808b 	beq.w	8007ab6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80079a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 8086 	beq.w	8007ab6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	330c      	adds	r3, #12
 80079b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b4:	e853 3f00 	ldrex	r3, [r3]
 80079b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	330c      	adds	r3, #12
 80079ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80079ce:	647a      	str	r2, [r7, #68]	; 0x44
 80079d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079d6:	e841 2300 	strex	r3, r2, [r1]
 80079da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1e3      	bne.n	80079aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3314      	adds	r3, #20
 80079e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	623b      	str	r3, [r7, #32]
   return(result);
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	f023 0301 	bic.w	r3, r3, #1
 80079f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3314      	adds	r3, #20
 8007a02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a06:	633a      	str	r2, [r7, #48]	; 0x30
 8007a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e3      	bne.n	80079e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	330c      	adds	r3, #12
 8007a2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0310 	bic.w	r3, r3, #16
 8007a3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	330c      	adds	r3, #12
 8007a48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a4c:	61fa      	str	r2, [r7, #28]
 8007a4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	69b9      	ldr	r1, [r7, #24]
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	617b      	str	r3, [r7, #20]
   return(result);
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e3      	bne.n	8007a28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7f9 fc78 	bl	800135c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a6c:	e023      	b.n	8007ab6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d009      	beq.n	8007a8e <HAL_UART_IRQHandler+0x4ea>
 8007a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fae5 	bl	8008056 <UART_Transmit_IT>
    return;
 8007a8c:	e014      	b.n	8007ab8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00e      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x514>
 8007a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d008      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fb25 	bl	80080f6 <UART_EndTransmit_IT>
    return;
 8007aac:	e004      	b.n	8007ab8 <HAL_UART_IRQHandler+0x514>
    return;
 8007aae:	bf00      	nop
 8007ab0:	e002      	b.n	8007ab8 <HAL_UART_IRQHandler+0x514>
      return;
 8007ab2:	bf00      	nop
 8007ab4:	e000      	b.n	8007ab8 <HAL_UART_IRQHandler+0x514>
      return;
 8007ab6:	bf00      	nop
  }
}
 8007ab8:	37e8      	adds	r7, #232	; 0xe8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop

08007ac0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b09c      	sub	sp, #112	; 0x70
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d172      	bne.n	8007c12 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b2e:	2200      	movs	r2, #0
 8007b30:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	330c      	adds	r3, #12
 8007b38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	330c      	adds	r3, #12
 8007b50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b52:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b54:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b5a:	e841 2300 	strex	r3, r2, [r1]
 8007b5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1e5      	bne.n	8007b32 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3314      	adds	r3, #20
 8007b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b78:	f023 0301 	bic.w	r3, r3, #1
 8007b7c:	667b      	str	r3, [r7, #100]	; 0x64
 8007b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3314      	adds	r3, #20
 8007b84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b86:	647a      	str	r2, [r7, #68]	; 0x44
 8007b88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e5      	bne.n	8007b66 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3314      	adds	r3, #20
 8007ba0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8007bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3314      	adds	r3, #20
 8007bb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bba:	633a      	str	r2, [r7, #48]	; 0x30
 8007bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e5      	bne.n	8007b9a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d119      	bne.n	8007c12 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	330c      	adds	r3, #12
 8007be4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f023 0310 	bic.w	r3, r3, #16
 8007bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	330c      	adds	r3, #12
 8007bfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bfe:	61fa      	str	r2, [r7, #28]
 8007c00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	69b9      	ldr	r1, [r7, #24]
 8007c04:	69fa      	ldr	r2, [r7, #28]
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e5      	bne.n	8007bde <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d106      	bne.n	8007c28 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c22:	f7f9 fb9b 	bl	800135c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c26:	e002      	b.n	8007c2e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007c28:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c2a:	f7ff ff53 	bl	8007ad4 <HAL_UART_RxCpltCallback>
}
 8007c2e:	bf00      	nop
 8007c30:	3770      	adds	r7, #112	; 0x70
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d108      	bne.n	8007c5e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c50:	085b      	lsrs	r3, r3, #1
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	4619      	mov	r1, r3
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7f9 fb80 	bl	800135c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c5c:	e002      	b.n	8007c64 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f7ff ff42 	bl	8007ae8 <HAL_UART_RxHalfCpltCallback>
}
 8007c64:	bf00      	nop
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c88:	2b80      	cmp	r3, #128	; 0x80
 8007c8a:	bf0c      	ite	eq
 8007c8c:	2301      	moveq	r3, #1
 8007c8e:	2300      	movne	r3, #0
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b21      	cmp	r3, #33	; 0x21
 8007c9e:	d108      	bne.n	8007cb2 <UART_DMAError+0x46>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d005      	beq.n	8007cb2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007cac:	68b8      	ldr	r0, [r7, #8]
 8007cae:	f000 f933 	bl	8007f18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cbc:	2b40      	cmp	r3, #64	; 0x40
 8007cbe:	bf0c      	ite	eq
 8007cc0:	2301      	moveq	r3, #1
 8007cc2:	2300      	movne	r3, #0
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b22      	cmp	r3, #34	; 0x22
 8007cd2:	d108      	bne.n	8007ce6 <UART_DMAError+0x7a>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d005      	beq.n	8007ce6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007ce0:	68b8      	ldr	r0, [r7, #8]
 8007ce2:	f000 f941 	bl	8007f68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	f043 0210 	orr.w	r2, r3, #16
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cf2:	68b8      	ldr	r0, [r7, #8]
 8007cf4:	f7ff ff02 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cf8:	bf00      	nop
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b090      	sub	sp, #64	; 0x40
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	603b      	str	r3, [r7, #0]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d10:	e050      	b.n	8007db4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d18:	d04c      	beq.n	8007db4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d007      	beq.n	8007d30 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d20:	f7fb fe80 	bl	8003a24 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d241      	bcs.n	8007db4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	330c      	adds	r3, #12
 8007d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	e853 3f00 	ldrex	r3, [r3]
 8007d3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	330c      	adds	r3, #12
 8007d4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d50:	637a      	str	r2, [r7, #52]	; 0x34
 8007d52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d58:	e841 2300 	strex	r3, r2, [r1]
 8007d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e5      	bne.n	8007d30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3314      	adds	r3, #20
 8007d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	e853 3f00 	ldrex	r3, [r3]
 8007d72:	613b      	str	r3, [r7, #16]
   return(result);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	f023 0301 	bic.w	r3, r3, #1
 8007d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3314      	adds	r3, #20
 8007d82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d84:	623a      	str	r2, [r7, #32]
 8007d86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d88:	69f9      	ldr	r1, [r7, #28]
 8007d8a:	6a3a      	ldr	r2, [r7, #32]
 8007d8c:	e841 2300 	strex	r3, r2, [r1]
 8007d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1e5      	bne.n	8007d64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2220      	movs	r2, #32
 8007da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e00f      	b.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	bf0c      	ite	eq
 8007dc4:	2301      	moveq	r3, #1
 8007dc6:	2300      	movne	r3, #0
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	461a      	mov	r2, r3
 8007dcc:	79fb      	ldrb	r3, [r7, #7]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d09f      	beq.n	8007d12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3740      	adds	r7, #64	; 0x40
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b098      	sub	sp, #96	; 0x60
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	4613      	mov	r3, r2
 8007de8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	88fa      	ldrh	r2, [r7, #6]
 8007df4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2222      	movs	r2, #34	; 0x22
 8007e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e08:	4a40      	ldr	r2, [pc, #256]	; (8007f0c <UART_Start_Receive_DMA+0x130>)
 8007e0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e10:	4a3f      	ldr	r2, [pc, #252]	; (8007f10 <UART_Start_Receive_DMA+0x134>)
 8007e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e18:	4a3e      	ldr	r2, [pc, #248]	; (8007f14 <UART_Start_Receive_DMA+0x138>)
 8007e1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e20:	2200      	movs	r2, #0
 8007e22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007e24:	f107 0308 	add.w	r3, r7, #8
 8007e28:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3304      	adds	r3, #4
 8007e34:	4619      	mov	r1, r3
 8007e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	88fb      	ldrh	r3, [r7, #6]
 8007e3c:	f7fb ffe2 	bl	8003e04 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007e40:	2300      	movs	r3, #0
 8007e42:	613b      	str	r3, [r7, #16]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	613b      	str	r3, [r7, #16]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	613b      	str	r3, [r7, #16]
 8007e54:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d019      	beq.n	8007e9a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	330c      	adds	r3, #12
 8007e6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	330c      	adds	r3, #12
 8007e84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e86:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007e88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e5      	bne.n	8007e66 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3314      	adds	r3, #20
 8007ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eac:	f043 0301 	orr.w	r3, r3, #1
 8007eb0:	657b      	str	r3, [r7, #84]	; 0x54
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3314      	adds	r3, #20
 8007eb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007eba:	63ba      	str	r2, [r7, #56]	; 0x38
 8007ebc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e5      	bne.n	8007e9a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3314      	adds	r3, #20
 8007ed4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	617b      	str	r3, [r7, #20]
   return(result);
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ee4:	653b      	str	r3, [r7, #80]	; 0x50
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3314      	adds	r3, #20
 8007eec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007eee:	627a      	str	r2, [r7, #36]	; 0x24
 8007ef0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	6a39      	ldr	r1, [r7, #32]
 8007ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e5      	bne.n	8007ece <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3760      	adds	r7, #96	; 0x60
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	08007b11 	.word	0x08007b11
 8007f10:	08007c37 	.word	0x08007c37
 8007f14:	08007c6d 	.word	0x08007c6d

08007f18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b089      	sub	sp, #36	; 0x24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	330c      	adds	r3, #12
 8007f26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f36:	61fb      	str	r3, [r7, #28]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	330c      	adds	r3, #12
 8007f3e:	69fa      	ldr	r2, [r7, #28]
 8007f40:	61ba      	str	r2, [r7, #24]
 8007f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	6979      	ldr	r1, [r7, #20]
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e5      	bne.n	8007f20 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2220      	movs	r2, #32
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007f5c:	bf00      	nop
 8007f5e:	3724      	adds	r7, #36	; 0x24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b095      	sub	sp, #84	; 0x54
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	330c      	adds	r3, #12
 8007f76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	330c      	adds	r3, #12
 8007f8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f90:	643a      	str	r2, [r7, #64]	; 0x40
 8007f92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e5      	bne.n	8007f70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3314      	adds	r3, #20
 8007faa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f023 0301 	bic.w	r3, r3, #1
 8007fba:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3314      	adds	r3, #20
 8007fc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e5      	bne.n	8007fa4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d119      	bne.n	8008014 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	330c      	adds	r3, #12
 8007fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	e853 3f00 	ldrex	r3, [r3]
 8007fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f023 0310 	bic.w	r3, r3, #16
 8007ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	330c      	adds	r3, #12
 8007ffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008000:	61ba      	str	r2, [r7, #24]
 8008002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008004:	6979      	ldr	r1, [r7, #20]
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	e841 2300 	strex	r3, r2, [r1]
 800800c:	613b      	str	r3, [r7, #16]
   return(result);
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e5      	bne.n	8007fe0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2220      	movs	r2, #32
 8008018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008022:	bf00      	nop
 8008024:	3754      	adds	r7, #84	; 0x54
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f7ff fd57 	bl	8007afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800804e:	bf00      	nop
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008056:	b480      	push	{r7}
 8008058:	b085      	sub	sp, #20
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b21      	cmp	r3, #33	; 0x21
 8008068:	d13e      	bne.n	80080e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008072:	d114      	bne.n	800809e <UART_Transmit_IT+0x48>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d110      	bne.n	800809e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008090:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	1c9a      	adds	r2, r3, #2
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	621a      	str	r2, [r3, #32]
 800809c:	e008      	b.n	80080b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	1c59      	adds	r1, r3, #1
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6211      	str	r1, [r2, #32]
 80080a8:	781a      	ldrb	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	3b01      	subs	r3, #1
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	4619      	mov	r1, r3
 80080be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10f      	bne.n	80080e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68da      	ldr	r2, [r3, #12]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	e000      	b.n	80080ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080e8:	2302      	movs	r3, #2
  }
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800810c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2220      	movs	r2, #32
 8008112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fcd2 	bl	8007ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b08c      	sub	sp, #48	; 0x30
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b22      	cmp	r3, #34	; 0x22
 8008138:	f040 80ab 	bne.w	8008292 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008144:	d117      	bne.n	8008176 <UART_Receive_IT+0x50>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d113      	bne.n	8008176 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800814e:	2300      	movs	r3, #0
 8008150:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008156:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	b29b      	uxth	r3, r3
 8008160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008164:	b29a      	uxth	r2, r3
 8008166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008168:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816e:	1c9a      	adds	r2, r3, #2
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	629a      	str	r2, [r3, #40]	; 0x28
 8008174:	e026      	b.n	80081c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800817c:	2300      	movs	r3, #0
 800817e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008188:	d007      	beq.n	800819a <UART_Receive_IT+0x74>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10a      	bne.n	80081a8 <UART_Receive_IT+0x82>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d106      	bne.n	80081a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a4:	701a      	strb	r2, [r3, #0]
 80081a6:	e008      	b.n	80081ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	3b01      	subs	r3, #1
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	4619      	mov	r1, r3
 80081d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d15a      	bne.n	800828e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68da      	ldr	r2, [r3, #12]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 0220 	bic.w	r2, r2, #32
 80081e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	695a      	ldr	r2, [r3, #20]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f022 0201 	bic.w	r2, r2, #1
 8008206:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2220      	movs	r2, #32
 800820c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008214:	2b01      	cmp	r3, #1
 8008216:	d135      	bne.n	8008284 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	330c      	adds	r3, #12
 8008224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	613b      	str	r3, [r7, #16]
   return(result);
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f023 0310 	bic.w	r3, r3, #16
 8008234:	627b      	str	r3, [r7, #36]	; 0x24
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	330c      	adds	r3, #12
 800823c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823e:	623a      	str	r2, [r7, #32]
 8008240:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	69f9      	ldr	r1, [r7, #28]
 8008244:	6a3a      	ldr	r2, [r7, #32]
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	61bb      	str	r3, [r7, #24]
   return(result);
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e5      	bne.n	800821e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0310 	and.w	r3, r3, #16
 800825c:	2b10      	cmp	r3, #16
 800825e:	d10a      	bne.n	8008276 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	60fb      	str	r3, [r7, #12]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7f9 f86d 	bl	800135c <HAL_UARTEx_RxEventCallback>
 8008282:	e002      	b.n	800828a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7ff fc25 	bl	8007ad4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	e002      	b.n	8008294 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	e000      	b.n	8008294 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008292:	2302      	movs	r3, #2
  }
}
 8008294:	4618      	mov	r0, r3
 8008296:	3730      	adds	r7, #48	; 0x30
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800829c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082a0:	b0c0      	sub	sp, #256	; 0x100
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b8:	68d9      	ldr	r1, [r3, #12]
 80082ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	ea40 0301 	orr.w	r3, r0, r1
 80082c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	431a      	orrs	r2, r3
 80082d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	431a      	orrs	r2, r3
 80082dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80082e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80082f4:	f021 010c 	bic.w	r1, r1, #12
 80082f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008302:	430b      	orrs	r3, r1
 8008304:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008316:	6999      	ldr	r1, [r3, #24]
 8008318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	ea40 0301 	orr.w	r3, r0, r1
 8008322:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	4b8f      	ldr	r3, [pc, #572]	; (8008568 <UART_SetConfig+0x2cc>)
 800832c:	429a      	cmp	r2, r3
 800832e:	d005      	beq.n	800833c <UART_SetConfig+0xa0>
 8008330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	4b8d      	ldr	r3, [pc, #564]	; (800856c <UART_SetConfig+0x2d0>)
 8008338:	429a      	cmp	r2, r3
 800833a:	d104      	bne.n	8008346 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800833c:	f7fe fadc 	bl	80068f8 <HAL_RCC_GetPCLK2Freq>
 8008340:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008344:	e003      	b.n	800834e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008346:	f7fe fac3 	bl	80068d0 <HAL_RCC_GetPCLK1Freq>
 800834a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800834e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008358:	f040 810c 	bne.w	8008574 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800835c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008360:	2200      	movs	r2, #0
 8008362:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008366:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800836a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800836e:	4622      	mov	r2, r4
 8008370:	462b      	mov	r3, r5
 8008372:	1891      	adds	r1, r2, r2
 8008374:	65b9      	str	r1, [r7, #88]	; 0x58
 8008376:	415b      	adcs	r3, r3
 8008378:	65fb      	str	r3, [r7, #92]	; 0x5c
 800837a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800837e:	4621      	mov	r1, r4
 8008380:	eb12 0801 	adds.w	r8, r2, r1
 8008384:	4629      	mov	r1, r5
 8008386:	eb43 0901 	adc.w	r9, r3, r1
 800838a:	f04f 0200 	mov.w	r2, #0
 800838e:	f04f 0300 	mov.w	r3, #0
 8008392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800839a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800839e:	4690      	mov	r8, r2
 80083a0:	4699      	mov	r9, r3
 80083a2:	4623      	mov	r3, r4
 80083a4:	eb18 0303 	adds.w	r3, r8, r3
 80083a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083ac:	462b      	mov	r3, r5
 80083ae:	eb49 0303 	adc.w	r3, r9, r3
 80083b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80083c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80083ca:	460b      	mov	r3, r1
 80083cc:	18db      	adds	r3, r3, r3
 80083ce:	653b      	str	r3, [r7, #80]	; 0x50
 80083d0:	4613      	mov	r3, r2
 80083d2:	eb42 0303 	adc.w	r3, r2, r3
 80083d6:	657b      	str	r3, [r7, #84]	; 0x54
 80083d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80083dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80083e0:	f7f7 ff66 	bl	80002b0 <__aeabi_uldivmod>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	4b61      	ldr	r3, [pc, #388]	; (8008570 <UART_SetConfig+0x2d4>)
 80083ea:	fba3 2302 	umull	r2, r3, r3, r2
 80083ee:	095b      	lsrs	r3, r3, #5
 80083f0:	011c      	lsls	r4, r3, #4
 80083f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008400:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008404:	4642      	mov	r2, r8
 8008406:	464b      	mov	r3, r9
 8008408:	1891      	adds	r1, r2, r2
 800840a:	64b9      	str	r1, [r7, #72]	; 0x48
 800840c:	415b      	adcs	r3, r3
 800840e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008410:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008414:	4641      	mov	r1, r8
 8008416:	eb12 0a01 	adds.w	sl, r2, r1
 800841a:	4649      	mov	r1, r9
 800841c:	eb43 0b01 	adc.w	fp, r3, r1
 8008420:	f04f 0200 	mov.w	r2, #0
 8008424:	f04f 0300 	mov.w	r3, #0
 8008428:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800842c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008430:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008434:	4692      	mov	sl, r2
 8008436:	469b      	mov	fp, r3
 8008438:	4643      	mov	r3, r8
 800843a:	eb1a 0303 	adds.w	r3, sl, r3
 800843e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008442:	464b      	mov	r3, r9
 8008444:	eb4b 0303 	adc.w	r3, fp, r3
 8008448:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800844c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008458:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800845c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008460:	460b      	mov	r3, r1
 8008462:	18db      	adds	r3, r3, r3
 8008464:	643b      	str	r3, [r7, #64]	; 0x40
 8008466:	4613      	mov	r3, r2
 8008468:	eb42 0303 	adc.w	r3, r2, r3
 800846c:	647b      	str	r3, [r7, #68]	; 0x44
 800846e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008472:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008476:	f7f7 ff1b 	bl	80002b0 <__aeabi_uldivmod>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	4611      	mov	r1, r2
 8008480:	4b3b      	ldr	r3, [pc, #236]	; (8008570 <UART_SetConfig+0x2d4>)
 8008482:	fba3 2301 	umull	r2, r3, r3, r1
 8008486:	095b      	lsrs	r3, r3, #5
 8008488:	2264      	movs	r2, #100	; 0x64
 800848a:	fb02 f303 	mul.w	r3, r2, r3
 800848e:	1acb      	subs	r3, r1, r3
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008496:	4b36      	ldr	r3, [pc, #216]	; (8008570 <UART_SetConfig+0x2d4>)
 8008498:	fba3 2302 	umull	r2, r3, r3, r2
 800849c:	095b      	lsrs	r3, r3, #5
 800849e:	005b      	lsls	r3, r3, #1
 80084a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084a4:	441c      	add	r4, r3
 80084a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80084b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80084b8:	4642      	mov	r2, r8
 80084ba:	464b      	mov	r3, r9
 80084bc:	1891      	adds	r1, r2, r2
 80084be:	63b9      	str	r1, [r7, #56]	; 0x38
 80084c0:	415b      	adcs	r3, r3
 80084c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80084c8:	4641      	mov	r1, r8
 80084ca:	1851      	adds	r1, r2, r1
 80084cc:	6339      	str	r1, [r7, #48]	; 0x30
 80084ce:	4649      	mov	r1, r9
 80084d0:	414b      	adcs	r3, r1
 80084d2:	637b      	str	r3, [r7, #52]	; 0x34
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	f04f 0300 	mov.w	r3, #0
 80084dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80084e0:	4659      	mov	r1, fp
 80084e2:	00cb      	lsls	r3, r1, #3
 80084e4:	4651      	mov	r1, sl
 80084e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084ea:	4651      	mov	r1, sl
 80084ec:	00ca      	lsls	r2, r1, #3
 80084ee:	4610      	mov	r0, r2
 80084f0:	4619      	mov	r1, r3
 80084f2:	4603      	mov	r3, r0
 80084f4:	4642      	mov	r2, r8
 80084f6:	189b      	adds	r3, r3, r2
 80084f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084fc:	464b      	mov	r3, r9
 80084fe:	460a      	mov	r2, r1
 8008500:	eb42 0303 	adc.w	r3, r2, r3
 8008504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008514:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008518:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800851c:	460b      	mov	r3, r1
 800851e:	18db      	adds	r3, r3, r3
 8008520:	62bb      	str	r3, [r7, #40]	; 0x28
 8008522:	4613      	mov	r3, r2
 8008524:	eb42 0303 	adc.w	r3, r2, r3
 8008528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800852a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800852e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008532:	f7f7 febd 	bl	80002b0 <__aeabi_uldivmod>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	4b0d      	ldr	r3, [pc, #52]	; (8008570 <UART_SetConfig+0x2d4>)
 800853c:	fba3 1302 	umull	r1, r3, r3, r2
 8008540:	095b      	lsrs	r3, r3, #5
 8008542:	2164      	movs	r1, #100	; 0x64
 8008544:	fb01 f303 	mul.w	r3, r1, r3
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	3332      	adds	r3, #50	; 0x32
 800854e:	4a08      	ldr	r2, [pc, #32]	; (8008570 <UART_SetConfig+0x2d4>)
 8008550:	fba2 2303 	umull	r2, r3, r2, r3
 8008554:	095b      	lsrs	r3, r3, #5
 8008556:	f003 0207 	and.w	r2, r3, #7
 800855a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4422      	add	r2, r4
 8008562:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008564:	e105      	b.n	8008772 <UART_SetConfig+0x4d6>
 8008566:	bf00      	nop
 8008568:	40011000 	.word	0x40011000
 800856c:	40011400 	.word	0x40011400
 8008570:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008578:	2200      	movs	r2, #0
 800857a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800857e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008582:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008586:	4642      	mov	r2, r8
 8008588:	464b      	mov	r3, r9
 800858a:	1891      	adds	r1, r2, r2
 800858c:	6239      	str	r1, [r7, #32]
 800858e:	415b      	adcs	r3, r3
 8008590:	627b      	str	r3, [r7, #36]	; 0x24
 8008592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008596:	4641      	mov	r1, r8
 8008598:	1854      	adds	r4, r2, r1
 800859a:	4649      	mov	r1, r9
 800859c:	eb43 0501 	adc.w	r5, r3, r1
 80085a0:	f04f 0200 	mov.w	r2, #0
 80085a4:	f04f 0300 	mov.w	r3, #0
 80085a8:	00eb      	lsls	r3, r5, #3
 80085aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085ae:	00e2      	lsls	r2, r4, #3
 80085b0:	4614      	mov	r4, r2
 80085b2:	461d      	mov	r5, r3
 80085b4:	4643      	mov	r3, r8
 80085b6:	18e3      	adds	r3, r4, r3
 80085b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085bc:	464b      	mov	r3, r9
 80085be:	eb45 0303 	adc.w	r3, r5, r3
 80085c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80085c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80085d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085d6:	f04f 0200 	mov.w	r2, #0
 80085da:	f04f 0300 	mov.w	r3, #0
 80085de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80085e2:	4629      	mov	r1, r5
 80085e4:	008b      	lsls	r3, r1, #2
 80085e6:	4621      	mov	r1, r4
 80085e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085ec:	4621      	mov	r1, r4
 80085ee:	008a      	lsls	r2, r1, #2
 80085f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80085f4:	f7f7 fe5c 	bl	80002b0 <__aeabi_uldivmod>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4b60      	ldr	r3, [pc, #384]	; (8008780 <UART_SetConfig+0x4e4>)
 80085fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008602:	095b      	lsrs	r3, r3, #5
 8008604:	011c      	lsls	r4, r3, #4
 8008606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800860a:	2200      	movs	r2, #0
 800860c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008610:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008614:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008618:	4642      	mov	r2, r8
 800861a:	464b      	mov	r3, r9
 800861c:	1891      	adds	r1, r2, r2
 800861e:	61b9      	str	r1, [r7, #24]
 8008620:	415b      	adcs	r3, r3
 8008622:	61fb      	str	r3, [r7, #28]
 8008624:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008628:	4641      	mov	r1, r8
 800862a:	1851      	adds	r1, r2, r1
 800862c:	6139      	str	r1, [r7, #16]
 800862e:	4649      	mov	r1, r9
 8008630:	414b      	adcs	r3, r1
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	f04f 0200 	mov.w	r2, #0
 8008638:	f04f 0300 	mov.w	r3, #0
 800863c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008640:	4659      	mov	r1, fp
 8008642:	00cb      	lsls	r3, r1, #3
 8008644:	4651      	mov	r1, sl
 8008646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800864a:	4651      	mov	r1, sl
 800864c:	00ca      	lsls	r2, r1, #3
 800864e:	4610      	mov	r0, r2
 8008650:	4619      	mov	r1, r3
 8008652:	4603      	mov	r3, r0
 8008654:	4642      	mov	r2, r8
 8008656:	189b      	adds	r3, r3, r2
 8008658:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800865c:	464b      	mov	r3, r9
 800865e:	460a      	mov	r2, r1
 8008660:	eb42 0303 	adc.w	r3, r2, r3
 8008664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	67bb      	str	r3, [r7, #120]	; 0x78
 8008672:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008674:	f04f 0200 	mov.w	r2, #0
 8008678:	f04f 0300 	mov.w	r3, #0
 800867c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008680:	4649      	mov	r1, r9
 8008682:	008b      	lsls	r3, r1, #2
 8008684:	4641      	mov	r1, r8
 8008686:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800868a:	4641      	mov	r1, r8
 800868c:	008a      	lsls	r2, r1, #2
 800868e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008692:	f7f7 fe0d 	bl	80002b0 <__aeabi_uldivmod>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	4b39      	ldr	r3, [pc, #228]	; (8008780 <UART_SetConfig+0x4e4>)
 800869c:	fba3 1302 	umull	r1, r3, r3, r2
 80086a0:	095b      	lsrs	r3, r3, #5
 80086a2:	2164      	movs	r1, #100	; 0x64
 80086a4:	fb01 f303 	mul.w	r3, r1, r3
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	011b      	lsls	r3, r3, #4
 80086ac:	3332      	adds	r3, #50	; 0x32
 80086ae:	4a34      	ldr	r2, [pc, #208]	; (8008780 <UART_SetConfig+0x4e4>)
 80086b0:	fba2 2303 	umull	r2, r3, r2, r3
 80086b4:	095b      	lsrs	r3, r3, #5
 80086b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086ba:	441c      	add	r4, r3
 80086bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086c0:	2200      	movs	r2, #0
 80086c2:	673b      	str	r3, [r7, #112]	; 0x70
 80086c4:	677a      	str	r2, [r7, #116]	; 0x74
 80086c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80086ca:	4642      	mov	r2, r8
 80086cc:	464b      	mov	r3, r9
 80086ce:	1891      	adds	r1, r2, r2
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	415b      	adcs	r3, r3
 80086d4:	60fb      	str	r3, [r7, #12]
 80086d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086da:	4641      	mov	r1, r8
 80086dc:	1851      	adds	r1, r2, r1
 80086de:	6039      	str	r1, [r7, #0]
 80086e0:	4649      	mov	r1, r9
 80086e2:	414b      	adcs	r3, r1
 80086e4:	607b      	str	r3, [r7, #4]
 80086e6:	f04f 0200 	mov.w	r2, #0
 80086ea:	f04f 0300 	mov.w	r3, #0
 80086ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80086f2:	4659      	mov	r1, fp
 80086f4:	00cb      	lsls	r3, r1, #3
 80086f6:	4651      	mov	r1, sl
 80086f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086fc:	4651      	mov	r1, sl
 80086fe:	00ca      	lsls	r2, r1, #3
 8008700:	4610      	mov	r0, r2
 8008702:	4619      	mov	r1, r3
 8008704:	4603      	mov	r3, r0
 8008706:	4642      	mov	r2, r8
 8008708:	189b      	adds	r3, r3, r2
 800870a:	66bb      	str	r3, [r7, #104]	; 0x68
 800870c:	464b      	mov	r3, r9
 800870e:	460a      	mov	r2, r1
 8008710:	eb42 0303 	adc.w	r3, r2, r3
 8008714:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	663b      	str	r3, [r7, #96]	; 0x60
 8008720:	667a      	str	r2, [r7, #100]	; 0x64
 8008722:	f04f 0200 	mov.w	r2, #0
 8008726:	f04f 0300 	mov.w	r3, #0
 800872a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800872e:	4649      	mov	r1, r9
 8008730:	008b      	lsls	r3, r1, #2
 8008732:	4641      	mov	r1, r8
 8008734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008738:	4641      	mov	r1, r8
 800873a:	008a      	lsls	r2, r1, #2
 800873c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008740:	f7f7 fdb6 	bl	80002b0 <__aeabi_uldivmod>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4b0d      	ldr	r3, [pc, #52]	; (8008780 <UART_SetConfig+0x4e4>)
 800874a:	fba3 1302 	umull	r1, r3, r3, r2
 800874e:	095b      	lsrs	r3, r3, #5
 8008750:	2164      	movs	r1, #100	; 0x64
 8008752:	fb01 f303 	mul.w	r3, r1, r3
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	011b      	lsls	r3, r3, #4
 800875a:	3332      	adds	r3, #50	; 0x32
 800875c:	4a08      	ldr	r2, [pc, #32]	; (8008780 <UART_SetConfig+0x4e4>)
 800875e:	fba2 2303 	umull	r2, r3, r2, r3
 8008762:	095b      	lsrs	r3, r3, #5
 8008764:	f003 020f 	and.w	r2, r3, #15
 8008768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4422      	add	r2, r4
 8008770:	609a      	str	r2, [r3, #8]
}
 8008772:	bf00      	nop
 8008774:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008778:	46bd      	mov	sp, r7
 800877a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800877e:	bf00      	nop
 8008780:	51eb851f 	.word	0x51eb851f

08008784 <__errno>:
 8008784:	4b01      	ldr	r3, [pc, #4]	; (800878c <__errno+0x8>)
 8008786:	6818      	ldr	r0, [r3, #0]
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	2000009c 	.word	0x2000009c

08008790 <__libc_init_array>:
 8008790:	b570      	push	{r4, r5, r6, lr}
 8008792:	4d0d      	ldr	r5, [pc, #52]	; (80087c8 <__libc_init_array+0x38>)
 8008794:	4c0d      	ldr	r4, [pc, #52]	; (80087cc <__libc_init_array+0x3c>)
 8008796:	1b64      	subs	r4, r4, r5
 8008798:	10a4      	asrs	r4, r4, #2
 800879a:	2600      	movs	r6, #0
 800879c:	42a6      	cmp	r6, r4
 800879e:	d109      	bne.n	80087b4 <__libc_init_array+0x24>
 80087a0:	4d0b      	ldr	r5, [pc, #44]	; (80087d0 <__libc_init_array+0x40>)
 80087a2:	4c0c      	ldr	r4, [pc, #48]	; (80087d4 <__libc_init_array+0x44>)
 80087a4:	f001 f842 	bl	800982c <_init>
 80087a8:	1b64      	subs	r4, r4, r5
 80087aa:	10a4      	asrs	r4, r4, #2
 80087ac:	2600      	movs	r6, #0
 80087ae:	42a6      	cmp	r6, r4
 80087b0:	d105      	bne.n	80087be <__libc_init_array+0x2e>
 80087b2:	bd70      	pop	{r4, r5, r6, pc}
 80087b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b8:	4798      	blx	r3
 80087ba:	3601      	adds	r6, #1
 80087bc:	e7ee      	b.n	800879c <__libc_init_array+0xc>
 80087be:	f855 3b04 	ldr.w	r3, [r5], #4
 80087c2:	4798      	blx	r3
 80087c4:	3601      	adds	r6, #1
 80087c6:	e7f2      	b.n	80087ae <__libc_init_array+0x1e>
 80087c8:	08009bc0 	.word	0x08009bc0
 80087cc:	08009bc0 	.word	0x08009bc0
 80087d0:	08009bc0 	.word	0x08009bc0
 80087d4:	08009bc4 	.word	0x08009bc4

080087d8 <memcmp>:
 80087d8:	b510      	push	{r4, lr}
 80087da:	3901      	subs	r1, #1
 80087dc:	4402      	add	r2, r0
 80087de:	4290      	cmp	r0, r2
 80087e0:	d101      	bne.n	80087e6 <memcmp+0xe>
 80087e2:	2000      	movs	r0, #0
 80087e4:	e005      	b.n	80087f2 <memcmp+0x1a>
 80087e6:	7803      	ldrb	r3, [r0, #0]
 80087e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80087ec:	42a3      	cmp	r3, r4
 80087ee:	d001      	beq.n	80087f4 <memcmp+0x1c>
 80087f0:	1b18      	subs	r0, r3, r4
 80087f2:	bd10      	pop	{r4, pc}
 80087f4:	3001      	adds	r0, #1
 80087f6:	e7f2      	b.n	80087de <memcmp+0x6>

080087f8 <memcpy>:
 80087f8:	440a      	add	r2, r1
 80087fa:	4291      	cmp	r1, r2
 80087fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008800:	d100      	bne.n	8008804 <memcpy+0xc>
 8008802:	4770      	bx	lr
 8008804:	b510      	push	{r4, lr}
 8008806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800880a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800880e:	4291      	cmp	r1, r2
 8008810:	d1f9      	bne.n	8008806 <memcpy+0xe>
 8008812:	bd10      	pop	{r4, pc}

08008814 <memset>:
 8008814:	4402      	add	r2, r0
 8008816:	4603      	mov	r3, r0
 8008818:	4293      	cmp	r3, r2
 800881a:	d100      	bne.n	800881e <memset+0xa>
 800881c:	4770      	bx	lr
 800881e:	f803 1b01 	strb.w	r1, [r3], #1
 8008822:	e7f9      	b.n	8008818 <memset+0x4>

08008824 <iprintf>:
 8008824:	b40f      	push	{r0, r1, r2, r3}
 8008826:	4b0a      	ldr	r3, [pc, #40]	; (8008850 <iprintf+0x2c>)
 8008828:	b513      	push	{r0, r1, r4, lr}
 800882a:	681c      	ldr	r4, [r3, #0]
 800882c:	b124      	cbz	r4, 8008838 <iprintf+0x14>
 800882e:	69a3      	ldr	r3, [r4, #24]
 8008830:	b913      	cbnz	r3, 8008838 <iprintf+0x14>
 8008832:	4620      	mov	r0, r4
 8008834:	f000 fa5e 	bl	8008cf4 <__sinit>
 8008838:	ab05      	add	r3, sp, #20
 800883a:	9a04      	ldr	r2, [sp, #16]
 800883c:	68a1      	ldr	r1, [r4, #8]
 800883e:	9301      	str	r3, [sp, #4]
 8008840:	4620      	mov	r0, r4
 8008842:	f000 fc67 	bl	8009114 <_vfiprintf_r>
 8008846:	b002      	add	sp, #8
 8008848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800884c:	b004      	add	sp, #16
 800884e:	4770      	bx	lr
 8008850:	2000009c 	.word	0x2000009c

08008854 <_puts_r>:
 8008854:	b570      	push	{r4, r5, r6, lr}
 8008856:	460e      	mov	r6, r1
 8008858:	4605      	mov	r5, r0
 800885a:	b118      	cbz	r0, 8008864 <_puts_r+0x10>
 800885c:	6983      	ldr	r3, [r0, #24]
 800885e:	b90b      	cbnz	r3, 8008864 <_puts_r+0x10>
 8008860:	f000 fa48 	bl	8008cf4 <__sinit>
 8008864:	69ab      	ldr	r3, [r5, #24]
 8008866:	68ac      	ldr	r4, [r5, #8]
 8008868:	b913      	cbnz	r3, 8008870 <_puts_r+0x1c>
 800886a:	4628      	mov	r0, r5
 800886c:	f000 fa42 	bl	8008cf4 <__sinit>
 8008870:	4b2c      	ldr	r3, [pc, #176]	; (8008924 <_puts_r+0xd0>)
 8008872:	429c      	cmp	r4, r3
 8008874:	d120      	bne.n	80088b8 <_puts_r+0x64>
 8008876:	686c      	ldr	r4, [r5, #4]
 8008878:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800887a:	07db      	lsls	r3, r3, #31
 800887c:	d405      	bmi.n	800888a <_puts_r+0x36>
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	0598      	lsls	r0, r3, #22
 8008882:	d402      	bmi.n	800888a <_puts_r+0x36>
 8008884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008886:	f000 fad3 	bl	8008e30 <__retarget_lock_acquire_recursive>
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	0719      	lsls	r1, r3, #28
 800888e:	d51d      	bpl.n	80088cc <_puts_r+0x78>
 8008890:	6923      	ldr	r3, [r4, #16]
 8008892:	b1db      	cbz	r3, 80088cc <_puts_r+0x78>
 8008894:	3e01      	subs	r6, #1
 8008896:	68a3      	ldr	r3, [r4, #8]
 8008898:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800889c:	3b01      	subs	r3, #1
 800889e:	60a3      	str	r3, [r4, #8]
 80088a0:	bb39      	cbnz	r1, 80088f2 <_puts_r+0x9e>
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	da38      	bge.n	8008918 <_puts_r+0xc4>
 80088a6:	4622      	mov	r2, r4
 80088a8:	210a      	movs	r1, #10
 80088aa:	4628      	mov	r0, r5
 80088ac:	f000 f848 	bl	8008940 <__swbuf_r>
 80088b0:	3001      	adds	r0, #1
 80088b2:	d011      	beq.n	80088d8 <_puts_r+0x84>
 80088b4:	250a      	movs	r5, #10
 80088b6:	e011      	b.n	80088dc <_puts_r+0x88>
 80088b8:	4b1b      	ldr	r3, [pc, #108]	; (8008928 <_puts_r+0xd4>)
 80088ba:	429c      	cmp	r4, r3
 80088bc:	d101      	bne.n	80088c2 <_puts_r+0x6e>
 80088be:	68ac      	ldr	r4, [r5, #8]
 80088c0:	e7da      	b.n	8008878 <_puts_r+0x24>
 80088c2:	4b1a      	ldr	r3, [pc, #104]	; (800892c <_puts_r+0xd8>)
 80088c4:	429c      	cmp	r4, r3
 80088c6:	bf08      	it	eq
 80088c8:	68ec      	ldreq	r4, [r5, #12]
 80088ca:	e7d5      	b.n	8008878 <_puts_r+0x24>
 80088cc:	4621      	mov	r1, r4
 80088ce:	4628      	mov	r0, r5
 80088d0:	f000 f888 	bl	80089e4 <__swsetup_r>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d0dd      	beq.n	8008894 <_puts_r+0x40>
 80088d8:	f04f 35ff 	mov.w	r5, #4294967295
 80088dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088de:	07da      	lsls	r2, r3, #31
 80088e0:	d405      	bmi.n	80088ee <_puts_r+0x9a>
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	059b      	lsls	r3, r3, #22
 80088e6:	d402      	bmi.n	80088ee <_puts_r+0x9a>
 80088e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ea:	f000 faa2 	bl	8008e32 <__retarget_lock_release_recursive>
 80088ee:	4628      	mov	r0, r5
 80088f0:	bd70      	pop	{r4, r5, r6, pc}
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	da04      	bge.n	8008900 <_puts_r+0xac>
 80088f6:	69a2      	ldr	r2, [r4, #24]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	dc06      	bgt.n	800890a <_puts_r+0xb6>
 80088fc:	290a      	cmp	r1, #10
 80088fe:	d004      	beq.n	800890a <_puts_r+0xb6>
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	1c5a      	adds	r2, r3, #1
 8008904:	6022      	str	r2, [r4, #0]
 8008906:	7019      	strb	r1, [r3, #0]
 8008908:	e7c5      	b.n	8008896 <_puts_r+0x42>
 800890a:	4622      	mov	r2, r4
 800890c:	4628      	mov	r0, r5
 800890e:	f000 f817 	bl	8008940 <__swbuf_r>
 8008912:	3001      	adds	r0, #1
 8008914:	d1bf      	bne.n	8008896 <_puts_r+0x42>
 8008916:	e7df      	b.n	80088d8 <_puts_r+0x84>
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	250a      	movs	r5, #10
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	6022      	str	r2, [r4, #0]
 8008920:	701d      	strb	r5, [r3, #0]
 8008922:	e7db      	b.n	80088dc <_puts_r+0x88>
 8008924:	08009b44 	.word	0x08009b44
 8008928:	08009b64 	.word	0x08009b64
 800892c:	08009b24 	.word	0x08009b24

08008930 <puts>:
 8008930:	4b02      	ldr	r3, [pc, #8]	; (800893c <puts+0xc>)
 8008932:	4601      	mov	r1, r0
 8008934:	6818      	ldr	r0, [r3, #0]
 8008936:	f7ff bf8d 	b.w	8008854 <_puts_r>
 800893a:	bf00      	nop
 800893c:	2000009c 	.word	0x2000009c

08008940 <__swbuf_r>:
 8008940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008942:	460e      	mov	r6, r1
 8008944:	4614      	mov	r4, r2
 8008946:	4605      	mov	r5, r0
 8008948:	b118      	cbz	r0, 8008952 <__swbuf_r+0x12>
 800894a:	6983      	ldr	r3, [r0, #24]
 800894c:	b90b      	cbnz	r3, 8008952 <__swbuf_r+0x12>
 800894e:	f000 f9d1 	bl	8008cf4 <__sinit>
 8008952:	4b21      	ldr	r3, [pc, #132]	; (80089d8 <__swbuf_r+0x98>)
 8008954:	429c      	cmp	r4, r3
 8008956:	d12b      	bne.n	80089b0 <__swbuf_r+0x70>
 8008958:	686c      	ldr	r4, [r5, #4]
 800895a:	69a3      	ldr	r3, [r4, #24]
 800895c:	60a3      	str	r3, [r4, #8]
 800895e:	89a3      	ldrh	r3, [r4, #12]
 8008960:	071a      	lsls	r2, r3, #28
 8008962:	d52f      	bpl.n	80089c4 <__swbuf_r+0x84>
 8008964:	6923      	ldr	r3, [r4, #16]
 8008966:	b36b      	cbz	r3, 80089c4 <__swbuf_r+0x84>
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	6820      	ldr	r0, [r4, #0]
 800896c:	1ac0      	subs	r0, r0, r3
 800896e:	6963      	ldr	r3, [r4, #20]
 8008970:	b2f6      	uxtb	r6, r6
 8008972:	4283      	cmp	r3, r0
 8008974:	4637      	mov	r7, r6
 8008976:	dc04      	bgt.n	8008982 <__swbuf_r+0x42>
 8008978:	4621      	mov	r1, r4
 800897a:	4628      	mov	r0, r5
 800897c:	f000 f926 	bl	8008bcc <_fflush_r>
 8008980:	bb30      	cbnz	r0, 80089d0 <__swbuf_r+0x90>
 8008982:	68a3      	ldr	r3, [r4, #8]
 8008984:	3b01      	subs	r3, #1
 8008986:	60a3      	str	r3, [r4, #8]
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	6022      	str	r2, [r4, #0]
 800898e:	701e      	strb	r6, [r3, #0]
 8008990:	6963      	ldr	r3, [r4, #20]
 8008992:	3001      	adds	r0, #1
 8008994:	4283      	cmp	r3, r0
 8008996:	d004      	beq.n	80089a2 <__swbuf_r+0x62>
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	07db      	lsls	r3, r3, #31
 800899c:	d506      	bpl.n	80089ac <__swbuf_r+0x6c>
 800899e:	2e0a      	cmp	r6, #10
 80089a0:	d104      	bne.n	80089ac <__swbuf_r+0x6c>
 80089a2:	4621      	mov	r1, r4
 80089a4:	4628      	mov	r0, r5
 80089a6:	f000 f911 	bl	8008bcc <_fflush_r>
 80089aa:	b988      	cbnz	r0, 80089d0 <__swbuf_r+0x90>
 80089ac:	4638      	mov	r0, r7
 80089ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089b0:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <__swbuf_r+0x9c>)
 80089b2:	429c      	cmp	r4, r3
 80089b4:	d101      	bne.n	80089ba <__swbuf_r+0x7a>
 80089b6:	68ac      	ldr	r4, [r5, #8]
 80089b8:	e7cf      	b.n	800895a <__swbuf_r+0x1a>
 80089ba:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <__swbuf_r+0xa0>)
 80089bc:	429c      	cmp	r4, r3
 80089be:	bf08      	it	eq
 80089c0:	68ec      	ldreq	r4, [r5, #12]
 80089c2:	e7ca      	b.n	800895a <__swbuf_r+0x1a>
 80089c4:	4621      	mov	r1, r4
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 f80c 	bl	80089e4 <__swsetup_r>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d0cb      	beq.n	8008968 <__swbuf_r+0x28>
 80089d0:	f04f 37ff 	mov.w	r7, #4294967295
 80089d4:	e7ea      	b.n	80089ac <__swbuf_r+0x6c>
 80089d6:	bf00      	nop
 80089d8:	08009b44 	.word	0x08009b44
 80089dc:	08009b64 	.word	0x08009b64
 80089e0:	08009b24 	.word	0x08009b24

080089e4 <__swsetup_r>:
 80089e4:	4b32      	ldr	r3, [pc, #200]	; (8008ab0 <__swsetup_r+0xcc>)
 80089e6:	b570      	push	{r4, r5, r6, lr}
 80089e8:	681d      	ldr	r5, [r3, #0]
 80089ea:	4606      	mov	r6, r0
 80089ec:	460c      	mov	r4, r1
 80089ee:	b125      	cbz	r5, 80089fa <__swsetup_r+0x16>
 80089f0:	69ab      	ldr	r3, [r5, #24]
 80089f2:	b913      	cbnz	r3, 80089fa <__swsetup_r+0x16>
 80089f4:	4628      	mov	r0, r5
 80089f6:	f000 f97d 	bl	8008cf4 <__sinit>
 80089fa:	4b2e      	ldr	r3, [pc, #184]	; (8008ab4 <__swsetup_r+0xd0>)
 80089fc:	429c      	cmp	r4, r3
 80089fe:	d10f      	bne.n	8008a20 <__swsetup_r+0x3c>
 8008a00:	686c      	ldr	r4, [r5, #4]
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a08:	0719      	lsls	r1, r3, #28
 8008a0a:	d42c      	bmi.n	8008a66 <__swsetup_r+0x82>
 8008a0c:	06dd      	lsls	r5, r3, #27
 8008a0e:	d411      	bmi.n	8008a34 <__swsetup_r+0x50>
 8008a10:	2309      	movs	r3, #9
 8008a12:	6033      	str	r3, [r6, #0]
 8008a14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a18:	81a3      	strh	r3, [r4, #12]
 8008a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1e:	e03e      	b.n	8008a9e <__swsetup_r+0xba>
 8008a20:	4b25      	ldr	r3, [pc, #148]	; (8008ab8 <__swsetup_r+0xd4>)
 8008a22:	429c      	cmp	r4, r3
 8008a24:	d101      	bne.n	8008a2a <__swsetup_r+0x46>
 8008a26:	68ac      	ldr	r4, [r5, #8]
 8008a28:	e7eb      	b.n	8008a02 <__swsetup_r+0x1e>
 8008a2a:	4b24      	ldr	r3, [pc, #144]	; (8008abc <__swsetup_r+0xd8>)
 8008a2c:	429c      	cmp	r4, r3
 8008a2e:	bf08      	it	eq
 8008a30:	68ec      	ldreq	r4, [r5, #12]
 8008a32:	e7e6      	b.n	8008a02 <__swsetup_r+0x1e>
 8008a34:	0758      	lsls	r0, r3, #29
 8008a36:	d512      	bpl.n	8008a5e <__swsetup_r+0x7a>
 8008a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a3a:	b141      	cbz	r1, 8008a4e <__swsetup_r+0x6a>
 8008a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a40:	4299      	cmp	r1, r3
 8008a42:	d002      	beq.n	8008a4a <__swsetup_r+0x66>
 8008a44:	4630      	mov	r0, r6
 8008a46:	f000 fa5b 	bl	8008f00 <_free_r>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	6363      	str	r3, [r4, #52]	; 0x34
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a54:	81a3      	strh	r3, [r4, #12]
 8008a56:	2300      	movs	r3, #0
 8008a58:	6063      	str	r3, [r4, #4]
 8008a5a:	6923      	ldr	r3, [r4, #16]
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	89a3      	ldrh	r3, [r4, #12]
 8008a60:	f043 0308 	orr.w	r3, r3, #8
 8008a64:	81a3      	strh	r3, [r4, #12]
 8008a66:	6923      	ldr	r3, [r4, #16]
 8008a68:	b94b      	cbnz	r3, 8008a7e <__swsetup_r+0x9a>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a74:	d003      	beq.n	8008a7e <__swsetup_r+0x9a>
 8008a76:	4621      	mov	r1, r4
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f000 fa01 	bl	8008e80 <__smakebuf_r>
 8008a7e:	89a0      	ldrh	r0, [r4, #12]
 8008a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a84:	f010 0301 	ands.w	r3, r0, #1
 8008a88:	d00a      	beq.n	8008aa0 <__swsetup_r+0xbc>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	60a3      	str	r3, [r4, #8]
 8008a8e:	6963      	ldr	r3, [r4, #20]
 8008a90:	425b      	negs	r3, r3
 8008a92:	61a3      	str	r3, [r4, #24]
 8008a94:	6923      	ldr	r3, [r4, #16]
 8008a96:	b943      	cbnz	r3, 8008aaa <__swsetup_r+0xc6>
 8008a98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a9c:	d1ba      	bne.n	8008a14 <__swsetup_r+0x30>
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}
 8008aa0:	0781      	lsls	r1, r0, #30
 8008aa2:	bf58      	it	pl
 8008aa4:	6963      	ldrpl	r3, [r4, #20]
 8008aa6:	60a3      	str	r3, [r4, #8]
 8008aa8:	e7f4      	b.n	8008a94 <__swsetup_r+0xb0>
 8008aaa:	2000      	movs	r0, #0
 8008aac:	e7f7      	b.n	8008a9e <__swsetup_r+0xba>
 8008aae:	bf00      	nop
 8008ab0:	2000009c 	.word	0x2000009c
 8008ab4:	08009b44 	.word	0x08009b44
 8008ab8:	08009b64 	.word	0x08009b64
 8008abc:	08009b24 	.word	0x08009b24

08008ac0 <__sflush_r>:
 8008ac0:	898a      	ldrh	r2, [r1, #12]
 8008ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	0710      	lsls	r0, r2, #28
 8008aca:	460c      	mov	r4, r1
 8008acc:	d458      	bmi.n	8008b80 <__sflush_r+0xc0>
 8008ace:	684b      	ldr	r3, [r1, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	dc05      	bgt.n	8008ae0 <__sflush_r+0x20>
 8008ad4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	dc02      	bgt.n	8008ae0 <__sflush_r+0x20>
 8008ada:	2000      	movs	r0, #0
 8008adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ae2:	2e00      	cmp	r6, #0
 8008ae4:	d0f9      	beq.n	8008ada <__sflush_r+0x1a>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008aec:	682f      	ldr	r7, [r5, #0]
 8008aee:	602b      	str	r3, [r5, #0]
 8008af0:	d032      	beq.n	8008b58 <__sflush_r+0x98>
 8008af2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	075a      	lsls	r2, r3, #29
 8008af8:	d505      	bpl.n	8008b06 <__sflush_r+0x46>
 8008afa:	6863      	ldr	r3, [r4, #4]
 8008afc:	1ac0      	subs	r0, r0, r3
 8008afe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b00:	b10b      	cbz	r3, 8008b06 <__sflush_r+0x46>
 8008b02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b04:	1ac0      	subs	r0, r0, r3
 8008b06:	2300      	movs	r3, #0
 8008b08:	4602      	mov	r2, r0
 8008b0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b0c:	6a21      	ldr	r1, [r4, #32]
 8008b0e:	4628      	mov	r0, r5
 8008b10:	47b0      	blx	r6
 8008b12:	1c43      	adds	r3, r0, #1
 8008b14:	89a3      	ldrh	r3, [r4, #12]
 8008b16:	d106      	bne.n	8008b26 <__sflush_r+0x66>
 8008b18:	6829      	ldr	r1, [r5, #0]
 8008b1a:	291d      	cmp	r1, #29
 8008b1c:	d82c      	bhi.n	8008b78 <__sflush_r+0xb8>
 8008b1e:	4a2a      	ldr	r2, [pc, #168]	; (8008bc8 <__sflush_r+0x108>)
 8008b20:	40ca      	lsrs	r2, r1
 8008b22:	07d6      	lsls	r6, r2, #31
 8008b24:	d528      	bpl.n	8008b78 <__sflush_r+0xb8>
 8008b26:	2200      	movs	r2, #0
 8008b28:	6062      	str	r2, [r4, #4]
 8008b2a:	04d9      	lsls	r1, r3, #19
 8008b2c:	6922      	ldr	r2, [r4, #16]
 8008b2e:	6022      	str	r2, [r4, #0]
 8008b30:	d504      	bpl.n	8008b3c <__sflush_r+0x7c>
 8008b32:	1c42      	adds	r2, r0, #1
 8008b34:	d101      	bne.n	8008b3a <__sflush_r+0x7a>
 8008b36:	682b      	ldr	r3, [r5, #0]
 8008b38:	b903      	cbnz	r3, 8008b3c <__sflush_r+0x7c>
 8008b3a:	6560      	str	r0, [r4, #84]	; 0x54
 8008b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b3e:	602f      	str	r7, [r5, #0]
 8008b40:	2900      	cmp	r1, #0
 8008b42:	d0ca      	beq.n	8008ada <__sflush_r+0x1a>
 8008b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b48:	4299      	cmp	r1, r3
 8008b4a:	d002      	beq.n	8008b52 <__sflush_r+0x92>
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	f000 f9d7 	bl	8008f00 <_free_r>
 8008b52:	2000      	movs	r0, #0
 8008b54:	6360      	str	r0, [r4, #52]	; 0x34
 8008b56:	e7c1      	b.n	8008adc <__sflush_r+0x1c>
 8008b58:	6a21      	ldr	r1, [r4, #32]
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	47b0      	blx	r6
 8008b60:	1c41      	adds	r1, r0, #1
 8008b62:	d1c7      	bne.n	8008af4 <__sflush_r+0x34>
 8008b64:	682b      	ldr	r3, [r5, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d0c4      	beq.n	8008af4 <__sflush_r+0x34>
 8008b6a:	2b1d      	cmp	r3, #29
 8008b6c:	d001      	beq.n	8008b72 <__sflush_r+0xb2>
 8008b6e:	2b16      	cmp	r3, #22
 8008b70:	d101      	bne.n	8008b76 <__sflush_r+0xb6>
 8008b72:	602f      	str	r7, [r5, #0]
 8008b74:	e7b1      	b.n	8008ada <__sflush_r+0x1a>
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b7c:	81a3      	strh	r3, [r4, #12]
 8008b7e:	e7ad      	b.n	8008adc <__sflush_r+0x1c>
 8008b80:	690f      	ldr	r7, [r1, #16]
 8008b82:	2f00      	cmp	r7, #0
 8008b84:	d0a9      	beq.n	8008ada <__sflush_r+0x1a>
 8008b86:	0793      	lsls	r3, r2, #30
 8008b88:	680e      	ldr	r6, [r1, #0]
 8008b8a:	bf08      	it	eq
 8008b8c:	694b      	ldreq	r3, [r1, #20]
 8008b8e:	600f      	str	r7, [r1, #0]
 8008b90:	bf18      	it	ne
 8008b92:	2300      	movne	r3, #0
 8008b94:	eba6 0807 	sub.w	r8, r6, r7
 8008b98:	608b      	str	r3, [r1, #8]
 8008b9a:	f1b8 0f00 	cmp.w	r8, #0
 8008b9e:	dd9c      	ble.n	8008ada <__sflush_r+0x1a>
 8008ba0:	6a21      	ldr	r1, [r4, #32]
 8008ba2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ba4:	4643      	mov	r3, r8
 8008ba6:	463a      	mov	r2, r7
 8008ba8:	4628      	mov	r0, r5
 8008baa:	47b0      	blx	r6
 8008bac:	2800      	cmp	r0, #0
 8008bae:	dc06      	bgt.n	8008bbe <__sflush_r+0xfe>
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bb6:	81a3      	strh	r3, [r4, #12]
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbc:	e78e      	b.n	8008adc <__sflush_r+0x1c>
 8008bbe:	4407      	add	r7, r0
 8008bc0:	eba8 0800 	sub.w	r8, r8, r0
 8008bc4:	e7e9      	b.n	8008b9a <__sflush_r+0xda>
 8008bc6:	bf00      	nop
 8008bc8:	20400001 	.word	0x20400001

08008bcc <_fflush_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	690b      	ldr	r3, [r1, #16]
 8008bd0:	4605      	mov	r5, r0
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	b913      	cbnz	r3, 8008bdc <_fflush_r+0x10>
 8008bd6:	2500      	movs	r5, #0
 8008bd8:	4628      	mov	r0, r5
 8008bda:	bd38      	pop	{r3, r4, r5, pc}
 8008bdc:	b118      	cbz	r0, 8008be6 <_fflush_r+0x1a>
 8008bde:	6983      	ldr	r3, [r0, #24]
 8008be0:	b90b      	cbnz	r3, 8008be6 <_fflush_r+0x1a>
 8008be2:	f000 f887 	bl	8008cf4 <__sinit>
 8008be6:	4b14      	ldr	r3, [pc, #80]	; (8008c38 <_fflush_r+0x6c>)
 8008be8:	429c      	cmp	r4, r3
 8008bea:	d11b      	bne.n	8008c24 <_fflush_r+0x58>
 8008bec:	686c      	ldr	r4, [r5, #4]
 8008bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0ef      	beq.n	8008bd6 <_fflush_r+0xa>
 8008bf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bf8:	07d0      	lsls	r0, r2, #31
 8008bfa:	d404      	bmi.n	8008c06 <_fflush_r+0x3a>
 8008bfc:	0599      	lsls	r1, r3, #22
 8008bfe:	d402      	bmi.n	8008c06 <_fflush_r+0x3a>
 8008c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c02:	f000 f915 	bl	8008e30 <__retarget_lock_acquire_recursive>
 8008c06:	4628      	mov	r0, r5
 8008c08:	4621      	mov	r1, r4
 8008c0a:	f7ff ff59 	bl	8008ac0 <__sflush_r>
 8008c0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c10:	07da      	lsls	r2, r3, #31
 8008c12:	4605      	mov	r5, r0
 8008c14:	d4e0      	bmi.n	8008bd8 <_fflush_r+0xc>
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	059b      	lsls	r3, r3, #22
 8008c1a:	d4dd      	bmi.n	8008bd8 <_fflush_r+0xc>
 8008c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c1e:	f000 f908 	bl	8008e32 <__retarget_lock_release_recursive>
 8008c22:	e7d9      	b.n	8008bd8 <_fflush_r+0xc>
 8008c24:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <_fflush_r+0x70>)
 8008c26:	429c      	cmp	r4, r3
 8008c28:	d101      	bne.n	8008c2e <_fflush_r+0x62>
 8008c2a:	68ac      	ldr	r4, [r5, #8]
 8008c2c:	e7df      	b.n	8008bee <_fflush_r+0x22>
 8008c2e:	4b04      	ldr	r3, [pc, #16]	; (8008c40 <_fflush_r+0x74>)
 8008c30:	429c      	cmp	r4, r3
 8008c32:	bf08      	it	eq
 8008c34:	68ec      	ldreq	r4, [r5, #12]
 8008c36:	e7da      	b.n	8008bee <_fflush_r+0x22>
 8008c38:	08009b44 	.word	0x08009b44
 8008c3c:	08009b64 	.word	0x08009b64
 8008c40:	08009b24 	.word	0x08009b24

08008c44 <std>:
 8008c44:	2300      	movs	r3, #0
 8008c46:	b510      	push	{r4, lr}
 8008c48:	4604      	mov	r4, r0
 8008c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8008c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c52:	6083      	str	r3, [r0, #8]
 8008c54:	8181      	strh	r1, [r0, #12]
 8008c56:	6643      	str	r3, [r0, #100]	; 0x64
 8008c58:	81c2      	strh	r2, [r0, #14]
 8008c5a:	6183      	str	r3, [r0, #24]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	2208      	movs	r2, #8
 8008c60:	305c      	adds	r0, #92	; 0x5c
 8008c62:	f7ff fdd7 	bl	8008814 <memset>
 8008c66:	4b05      	ldr	r3, [pc, #20]	; (8008c7c <std+0x38>)
 8008c68:	6263      	str	r3, [r4, #36]	; 0x24
 8008c6a:	4b05      	ldr	r3, [pc, #20]	; (8008c80 <std+0x3c>)
 8008c6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c6e:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <std+0x40>)
 8008c70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c72:	4b05      	ldr	r3, [pc, #20]	; (8008c88 <std+0x44>)
 8008c74:	6224      	str	r4, [r4, #32]
 8008c76:	6323      	str	r3, [r4, #48]	; 0x30
 8008c78:	bd10      	pop	{r4, pc}
 8008c7a:	bf00      	nop
 8008c7c:	080096bd 	.word	0x080096bd
 8008c80:	080096df 	.word	0x080096df
 8008c84:	08009717 	.word	0x08009717
 8008c88:	0800973b 	.word	0x0800973b

08008c8c <_cleanup_r>:
 8008c8c:	4901      	ldr	r1, [pc, #4]	; (8008c94 <_cleanup_r+0x8>)
 8008c8e:	f000 b8af 	b.w	8008df0 <_fwalk_reent>
 8008c92:	bf00      	nop
 8008c94:	08008bcd 	.word	0x08008bcd

08008c98 <__sfmoreglue>:
 8008c98:	b570      	push	{r4, r5, r6, lr}
 8008c9a:	2268      	movs	r2, #104	; 0x68
 8008c9c:	1e4d      	subs	r5, r1, #1
 8008c9e:	4355      	muls	r5, r2
 8008ca0:	460e      	mov	r6, r1
 8008ca2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ca6:	f000 f997 	bl	8008fd8 <_malloc_r>
 8008caa:	4604      	mov	r4, r0
 8008cac:	b140      	cbz	r0, 8008cc0 <__sfmoreglue+0x28>
 8008cae:	2100      	movs	r1, #0
 8008cb0:	e9c0 1600 	strd	r1, r6, [r0]
 8008cb4:	300c      	adds	r0, #12
 8008cb6:	60a0      	str	r0, [r4, #8]
 8008cb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cbc:	f7ff fdaa 	bl	8008814 <memset>
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}

08008cc4 <__sfp_lock_acquire>:
 8008cc4:	4801      	ldr	r0, [pc, #4]	; (8008ccc <__sfp_lock_acquire+0x8>)
 8008cc6:	f000 b8b3 	b.w	8008e30 <__retarget_lock_acquire_recursive>
 8008cca:	bf00      	nop
 8008ccc:	200007dd 	.word	0x200007dd

08008cd0 <__sfp_lock_release>:
 8008cd0:	4801      	ldr	r0, [pc, #4]	; (8008cd8 <__sfp_lock_release+0x8>)
 8008cd2:	f000 b8ae 	b.w	8008e32 <__retarget_lock_release_recursive>
 8008cd6:	bf00      	nop
 8008cd8:	200007dd 	.word	0x200007dd

08008cdc <__sinit_lock_acquire>:
 8008cdc:	4801      	ldr	r0, [pc, #4]	; (8008ce4 <__sinit_lock_acquire+0x8>)
 8008cde:	f000 b8a7 	b.w	8008e30 <__retarget_lock_acquire_recursive>
 8008ce2:	bf00      	nop
 8008ce4:	200007de 	.word	0x200007de

08008ce8 <__sinit_lock_release>:
 8008ce8:	4801      	ldr	r0, [pc, #4]	; (8008cf0 <__sinit_lock_release+0x8>)
 8008cea:	f000 b8a2 	b.w	8008e32 <__retarget_lock_release_recursive>
 8008cee:	bf00      	nop
 8008cf0:	200007de 	.word	0x200007de

08008cf4 <__sinit>:
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	f7ff fff0 	bl	8008cdc <__sinit_lock_acquire>
 8008cfc:	69a3      	ldr	r3, [r4, #24]
 8008cfe:	b11b      	cbz	r3, 8008d08 <__sinit+0x14>
 8008d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d04:	f7ff bff0 	b.w	8008ce8 <__sinit_lock_release>
 8008d08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d0c:	6523      	str	r3, [r4, #80]	; 0x50
 8008d0e:	4b13      	ldr	r3, [pc, #76]	; (8008d5c <__sinit+0x68>)
 8008d10:	4a13      	ldr	r2, [pc, #76]	; (8008d60 <__sinit+0x6c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	bf04      	itt	eq
 8008d1a:	2301      	moveq	r3, #1
 8008d1c:	61a3      	streq	r3, [r4, #24]
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f000 f820 	bl	8008d64 <__sfp>
 8008d24:	6060      	str	r0, [r4, #4]
 8008d26:	4620      	mov	r0, r4
 8008d28:	f000 f81c 	bl	8008d64 <__sfp>
 8008d2c:	60a0      	str	r0, [r4, #8]
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f000 f818 	bl	8008d64 <__sfp>
 8008d34:	2200      	movs	r2, #0
 8008d36:	60e0      	str	r0, [r4, #12]
 8008d38:	2104      	movs	r1, #4
 8008d3a:	6860      	ldr	r0, [r4, #4]
 8008d3c:	f7ff ff82 	bl	8008c44 <std>
 8008d40:	68a0      	ldr	r0, [r4, #8]
 8008d42:	2201      	movs	r2, #1
 8008d44:	2109      	movs	r1, #9
 8008d46:	f7ff ff7d 	bl	8008c44 <std>
 8008d4a:	68e0      	ldr	r0, [r4, #12]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	2112      	movs	r1, #18
 8008d50:	f7ff ff78 	bl	8008c44 <std>
 8008d54:	2301      	movs	r3, #1
 8008d56:	61a3      	str	r3, [r4, #24]
 8008d58:	e7d2      	b.n	8008d00 <__sinit+0xc>
 8008d5a:	bf00      	nop
 8008d5c:	08009b20 	.word	0x08009b20
 8008d60:	08008c8d 	.word	0x08008c8d

08008d64 <__sfp>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	4607      	mov	r7, r0
 8008d68:	f7ff ffac 	bl	8008cc4 <__sfp_lock_acquire>
 8008d6c:	4b1e      	ldr	r3, [pc, #120]	; (8008de8 <__sfp+0x84>)
 8008d6e:	681e      	ldr	r6, [r3, #0]
 8008d70:	69b3      	ldr	r3, [r6, #24]
 8008d72:	b913      	cbnz	r3, 8008d7a <__sfp+0x16>
 8008d74:	4630      	mov	r0, r6
 8008d76:	f7ff ffbd 	bl	8008cf4 <__sinit>
 8008d7a:	3648      	adds	r6, #72	; 0x48
 8008d7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	d503      	bpl.n	8008d8c <__sfp+0x28>
 8008d84:	6833      	ldr	r3, [r6, #0]
 8008d86:	b30b      	cbz	r3, 8008dcc <__sfp+0x68>
 8008d88:	6836      	ldr	r6, [r6, #0]
 8008d8a:	e7f7      	b.n	8008d7c <__sfp+0x18>
 8008d8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d90:	b9d5      	cbnz	r5, 8008dc8 <__sfp+0x64>
 8008d92:	4b16      	ldr	r3, [pc, #88]	; (8008dec <__sfp+0x88>)
 8008d94:	60e3      	str	r3, [r4, #12]
 8008d96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d9a:	6665      	str	r5, [r4, #100]	; 0x64
 8008d9c:	f000 f847 	bl	8008e2e <__retarget_lock_init_recursive>
 8008da0:	f7ff ff96 	bl	8008cd0 <__sfp_lock_release>
 8008da4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008da8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008dac:	6025      	str	r5, [r4, #0]
 8008dae:	61a5      	str	r5, [r4, #24]
 8008db0:	2208      	movs	r2, #8
 8008db2:	4629      	mov	r1, r5
 8008db4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008db8:	f7ff fd2c 	bl	8008814 <memset>
 8008dbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008dc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc8:	3468      	adds	r4, #104	; 0x68
 8008dca:	e7d9      	b.n	8008d80 <__sfp+0x1c>
 8008dcc:	2104      	movs	r1, #4
 8008dce:	4638      	mov	r0, r7
 8008dd0:	f7ff ff62 	bl	8008c98 <__sfmoreglue>
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	6030      	str	r0, [r6, #0]
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d1d5      	bne.n	8008d88 <__sfp+0x24>
 8008ddc:	f7ff ff78 	bl	8008cd0 <__sfp_lock_release>
 8008de0:	230c      	movs	r3, #12
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	e7ee      	b.n	8008dc4 <__sfp+0x60>
 8008de6:	bf00      	nop
 8008de8:	08009b20 	.word	0x08009b20
 8008dec:	ffff0001 	.word	0xffff0001

08008df0 <_fwalk_reent>:
 8008df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008df4:	4606      	mov	r6, r0
 8008df6:	4688      	mov	r8, r1
 8008df8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dfc:	2700      	movs	r7, #0
 8008dfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e02:	f1b9 0901 	subs.w	r9, r9, #1
 8008e06:	d505      	bpl.n	8008e14 <_fwalk_reent+0x24>
 8008e08:	6824      	ldr	r4, [r4, #0]
 8008e0a:	2c00      	cmp	r4, #0
 8008e0c:	d1f7      	bne.n	8008dfe <_fwalk_reent+0xe>
 8008e0e:	4638      	mov	r0, r7
 8008e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e14:	89ab      	ldrh	r3, [r5, #12]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d907      	bls.n	8008e2a <_fwalk_reent+0x3a>
 8008e1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	d003      	beq.n	8008e2a <_fwalk_reent+0x3a>
 8008e22:	4629      	mov	r1, r5
 8008e24:	4630      	mov	r0, r6
 8008e26:	47c0      	blx	r8
 8008e28:	4307      	orrs	r7, r0
 8008e2a:	3568      	adds	r5, #104	; 0x68
 8008e2c:	e7e9      	b.n	8008e02 <_fwalk_reent+0x12>

08008e2e <__retarget_lock_init_recursive>:
 8008e2e:	4770      	bx	lr

08008e30 <__retarget_lock_acquire_recursive>:
 8008e30:	4770      	bx	lr

08008e32 <__retarget_lock_release_recursive>:
 8008e32:	4770      	bx	lr

08008e34 <__swhatbuf_r>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	460e      	mov	r6, r1
 8008e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3c:	2900      	cmp	r1, #0
 8008e3e:	b096      	sub	sp, #88	; 0x58
 8008e40:	4614      	mov	r4, r2
 8008e42:	461d      	mov	r5, r3
 8008e44:	da08      	bge.n	8008e58 <__swhatbuf_r+0x24>
 8008e46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	602a      	str	r2, [r5, #0]
 8008e4e:	061a      	lsls	r2, r3, #24
 8008e50:	d410      	bmi.n	8008e74 <__swhatbuf_r+0x40>
 8008e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e56:	e00e      	b.n	8008e76 <__swhatbuf_r+0x42>
 8008e58:	466a      	mov	r2, sp
 8008e5a:	f000 fc95 	bl	8009788 <_fstat_r>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	dbf1      	blt.n	8008e46 <__swhatbuf_r+0x12>
 8008e62:	9a01      	ldr	r2, [sp, #4]
 8008e64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e6c:	425a      	negs	r2, r3
 8008e6e:	415a      	adcs	r2, r3
 8008e70:	602a      	str	r2, [r5, #0]
 8008e72:	e7ee      	b.n	8008e52 <__swhatbuf_r+0x1e>
 8008e74:	2340      	movs	r3, #64	; 0x40
 8008e76:	2000      	movs	r0, #0
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	b016      	add	sp, #88	; 0x58
 8008e7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008e80 <__smakebuf_r>:
 8008e80:	898b      	ldrh	r3, [r1, #12]
 8008e82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e84:	079d      	lsls	r5, r3, #30
 8008e86:	4606      	mov	r6, r0
 8008e88:	460c      	mov	r4, r1
 8008e8a:	d507      	bpl.n	8008e9c <__smakebuf_r+0x1c>
 8008e8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	6123      	str	r3, [r4, #16]
 8008e94:	2301      	movs	r3, #1
 8008e96:	6163      	str	r3, [r4, #20]
 8008e98:	b002      	add	sp, #8
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	ab01      	add	r3, sp, #4
 8008e9e:	466a      	mov	r2, sp
 8008ea0:	f7ff ffc8 	bl	8008e34 <__swhatbuf_r>
 8008ea4:	9900      	ldr	r1, [sp, #0]
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f000 f895 	bl	8008fd8 <_malloc_r>
 8008eae:	b948      	cbnz	r0, 8008ec4 <__smakebuf_r+0x44>
 8008eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb4:	059a      	lsls	r2, r3, #22
 8008eb6:	d4ef      	bmi.n	8008e98 <__smakebuf_r+0x18>
 8008eb8:	f023 0303 	bic.w	r3, r3, #3
 8008ebc:	f043 0302 	orr.w	r3, r3, #2
 8008ec0:	81a3      	strh	r3, [r4, #12]
 8008ec2:	e7e3      	b.n	8008e8c <__smakebuf_r+0xc>
 8008ec4:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <__smakebuf_r+0x7c>)
 8008ec6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	6020      	str	r0, [r4, #0]
 8008ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed0:	81a3      	strh	r3, [r4, #12]
 8008ed2:	9b00      	ldr	r3, [sp, #0]
 8008ed4:	6163      	str	r3, [r4, #20]
 8008ed6:	9b01      	ldr	r3, [sp, #4]
 8008ed8:	6120      	str	r0, [r4, #16]
 8008eda:	b15b      	cbz	r3, 8008ef4 <__smakebuf_r+0x74>
 8008edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f000 fc63 	bl	80097ac <_isatty_r>
 8008ee6:	b128      	cbz	r0, 8008ef4 <__smakebuf_r+0x74>
 8008ee8:	89a3      	ldrh	r3, [r4, #12]
 8008eea:	f023 0303 	bic.w	r3, r3, #3
 8008eee:	f043 0301 	orr.w	r3, r3, #1
 8008ef2:	81a3      	strh	r3, [r4, #12]
 8008ef4:	89a0      	ldrh	r0, [r4, #12]
 8008ef6:	4305      	orrs	r5, r0
 8008ef8:	81a5      	strh	r5, [r4, #12]
 8008efa:	e7cd      	b.n	8008e98 <__smakebuf_r+0x18>
 8008efc:	08008c8d 	.word	0x08008c8d

08008f00 <_free_r>:
 8008f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f02:	2900      	cmp	r1, #0
 8008f04:	d044      	beq.n	8008f90 <_free_r+0x90>
 8008f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f0a:	9001      	str	r0, [sp, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f1a1 0404 	sub.w	r4, r1, #4
 8008f12:	bfb8      	it	lt
 8008f14:	18e4      	addlt	r4, r4, r3
 8008f16:	f000 fc6b 	bl	80097f0 <__malloc_lock>
 8008f1a:	4a1e      	ldr	r2, [pc, #120]	; (8008f94 <_free_r+0x94>)
 8008f1c:	9801      	ldr	r0, [sp, #4]
 8008f1e:	6813      	ldr	r3, [r2, #0]
 8008f20:	b933      	cbnz	r3, 8008f30 <_free_r+0x30>
 8008f22:	6063      	str	r3, [r4, #4]
 8008f24:	6014      	str	r4, [r2, #0]
 8008f26:	b003      	add	sp, #12
 8008f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f2c:	f000 bc66 	b.w	80097fc <__malloc_unlock>
 8008f30:	42a3      	cmp	r3, r4
 8008f32:	d908      	bls.n	8008f46 <_free_r+0x46>
 8008f34:	6825      	ldr	r5, [r4, #0]
 8008f36:	1961      	adds	r1, r4, r5
 8008f38:	428b      	cmp	r3, r1
 8008f3a:	bf01      	itttt	eq
 8008f3c:	6819      	ldreq	r1, [r3, #0]
 8008f3e:	685b      	ldreq	r3, [r3, #4]
 8008f40:	1949      	addeq	r1, r1, r5
 8008f42:	6021      	streq	r1, [r4, #0]
 8008f44:	e7ed      	b.n	8008f22 <_free_r+0x22>
 8008f46:	461a      	mov	r2, r3
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	b10b      	cbz	r3, 8008f50 <_free_r+0x50>
 8008f4c:	42a3      	cmp	r3, r4
 8008f4e:	d9fa      	bls.n	8008f46 <_free_r+0x46>
 8008f50:	6811      	ldr	r1, [r2, #0]
 8008f52:	1855      	adds	r5, r2, r1
 8008f54:	42a5      	cmp	r5, r4
 8008f56:	d10b      	bne.n	8008f70 <_free_r+0x70>
 8008f58:	6824      	ldr	r4, [r4, #0]
 8008f5a:	4421      	add	r1, r4
 8008f5c:	1854      	adds	r4, r2, r1
 8008f5e:	42a3      	cmp	r3, r4
 8008f60:	6011      	str	r1, [r2, #0]
 8008f62:	d1e0      	bne.n	8008f26 <_free_r+0x26>
 8008f64:	681c      	ldr	r4, [r3, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	6053      	str	r3, [r2, #4]
 8008f6a:	4421      	add	r1, r4
 8008f6c:	6011      	str	r1, [r2, #0]
 8008f6e:	e7da      	b.n	8008f26 <_free_r+0x26>
 8008f70:	d902      	bls.n	8008f78 <_free_r+0x78>
 8008f72:	230c      	movs	r3, #12
 8008f74:	6003      	str	r3, [r0, #0]
 8008f76:	e7d6      	b.n	8008f26 <_free_r+0x26>
 8008f78:	6825      	ldr	r5, [r4, #0]
 8008f7a:	1961      	adds	r1, r4, r5
 8008f7c:	428b      	cmp	r3, r1
 8008f7e:	bf04      	itt	eq
 8008f80:	6819      	ldreq	r1, [r3, #0]
 8008f82:	685b      	ldreq	r3, [r3, #4]
 8008f84:	6063      	str	r3, [r4, #4]
 8008f86:	bf04      	itt	eq
 8008f88:	1949      	addeq	r1, r1, r5
 8008f8a:	6021      	streq	r1, [r4, #0]
 8008f8c:	6054      	str	r4, [r2, #4]
 8008f8e:	e7ca      	b.n	8008f26 <_free_r+0x26>
 8008f90:	b003      	add	sp, #12
 8008f92:	bd30      	pop	{r4, r5, pc}
 8008f94:	200007e0 	.word	0x200007e0

08008f98 <sbrk_aligned>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	4e0e      	ldr	r6, [pc, #56]	; (8008fd4 <sbrk_aligned+0x3c>)
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	6831      	ldr	r1, [r6, #0]
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	b911      	cbnz	r1, 8008faa <sbrk_aligned+0x12>
 8008fa4:	f000 fb7a 	bl	800969c <_sbrk_r>
 8008fa8:	6030      	str	r0, [r6, #0]
 8008faa:	4621      	mov	r1, r4
 8008fac:	4628      	mov	r0, r5
 8008fae:	f000 fb75 	bl	800969c <_sbrk_r>
 8008fb2:	1c43      	adds	r3, r0, #1
 8008fb4:	d00a      	beq.n	8008fcc <sbrk_aligned+0x34>
 8008fb6:	1cc4      	adds	r4, r0, #3
 8008fb8:	f024 0403 	bic.w	r4, r4, #3
 8008fbc:	42a0      	cmp	r0, r4
 8008fbe:	d007      	beq.n	8008fd0 <sbrk_aligned+0x38>
 8008fc0:	1a21      	subs	r1, r4, r0
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 fb6a 	bl	800969c <_sbrk_r>
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d101      	bne.n	8008fd0 <sbrk_aligned+0x38>
 8008fcc:	f04f 34ff 	mov.w	r4, #4294967295
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	bd70      	pop	{r4, r5, r6, pc}
 8008fd4:	200007e4 	.word	0x200007e4

08008fd8 <_malloc_r>:
 8008fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fdc:	1ccd      	adds	r5, r1, #3
 8008fde:	f025 0503 	bic.w	r5, r5, #3
 8008fe2:	3508      	adds	r5, #8
 8008fe4:	2d0c      	cmp	r5, #12
 8008fe6:	bf38      	it	cc
 8008fe8:	250c      	movcc	r5, #12
 8008fea:	2d00      	cmp	r5, #0
 8008fec:	4607      	mov	r7, r0
 8008fee:	db01      	blt.n	8008ff4 <_malloc_r+0x1c>
 8008ff0:	42a9      	cmp	r1, r5
 8008ff2:	d905      	bls.n	8009000 <_malloc_r+0x28>
 8008ff4:	230c      	movs	r3, #12
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	2600      	movs	r6, #0
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009000:	4e2e      	ldr	r6, [pc, #184]	; (80090bc <_malloc_r+0xe4>)
 8009002:	f000 fbf5 	bl	80097f0 <__malloc_lock>
 8009006:	6833      	ldr	r3, [r6, #0]
 8009008:	461c      	mov	r4, r3
 800900a:	bb34      	cbnz	r4, 800905a <_malloc_r+0x82>
 800900c:	4629      	mov	r1, r5
 800900e:	4638      	mov	r0, r7
 8009010:	f7ff ffc2 	bl	8008f98 <sbrk_aligned>
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	4604      	mov	r4, r0
 8009018:	d14d      	bne.n	80090b6 <_malloc_r+0xde>
 800901a:	6834      	ldr	r4, [r6, #0]
 800901c:	4626      	mov	r6, r4
 800901e:	2e00      	cmp	r6, #0
 8009020:	d140      	bne.n	80090a4 <_malloc_r+0xcc>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	4631      	mov	r1, r6
 8009026:	4638      	mov	r0, r7
 8009028:	eb04 0803 	add.w	r8, r4, r3
 800902c:	f000 fb36 	bl	800969c <_sbrk_r>
 8009030:	4580      	cmp	r8, r0
 8009032:	d13a      	bne.n	80090aa <_malloc_r+0xd2>
 8009034:	6821      	ldr	r1, [r4, #0]
 8009036:	3503      	adds	r5, #3
 8009038:	1a6d      	subs	r5, r5, r1
 800903a:	f025 0503 	bic.w	r5, r5, #3
 800903e:	3508      	adds	r5, #8
 8009040:	2d0c      	cmp	r5, #12
 8009042:	bf38      	it	cc
 8009044:	250c      	movcc	r5, #12
 8009046:	4629      	mov	r1, r5
 8009048:	4638      	mov	r0, r7
 800904a:	f7ff ffa5 	bl	8008f98 <sbrk_aligned>
 800904e:	3001      	adds	r0, #1
 8009050:	d02b      	beq.n	80090aa <_malloc_r+0xd2>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	442b      	add	r3, r5
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	e00e      	b.n	8009078 <_malloc_r+0xa0>
 800905a:	6822      	ldr	r2, [r4, #0]
 800905c:	1b52      	subs	r2, r2, r5
 800905e:	d41e      	bmi.n	800909e <_malloc_r+0xc6>
 8009060:	2a0b      	cmp	r2, #11
 8009062:	d916      	bls.n	8009092 <_malloc_r+0xba>
 8009064:	1961      	adds	r1, r4, r5
 8009066:	42a3      	cmp	r3, r4
 8009068:	6025      	str	r5, [r4, #0]
 800906a:	bf18      	it	ne
 800906c:	6059      	strne	r1, [r3, #4]
 800906e:	6863      	ldr	r3, [r4, #4]
 8009070:	bf08      	it	eq
 8009072:	6031      	streq	r1, [r6, #0]
 8009074:	5162      	str	r2, [r4, r5]
 8009076:	604b      	str	r3, [r1, #4]
 8009078:	4638      	mov	r0, r7
 800907a:	f104 060b 	add.w	r6, r4, #11
 800907e:	f000 fbbd 	bl	80097fc <__malloc_unlock>
 8009082:	f026 0607 	bic.w	r6, r6, #7
 8009086:	1d23      	adds	r3, r4, #4
 8009088:	1af2      	subs	r2, r6, r3
 800908a:	d0b6      	beq.n	8008ffa <_malloc_r+0x22>
 800908c:	1b9b      	subs	r3, r3, r6
 800908e:	50a3      	str	r3, [r4, r2]
 8009090:	e7b3      	b.n	8008ffa <_malloc_r+0x22>
 8009092:	6862      	ldr	r2, [r4, #4]
 8009094:	42a3      	cmp	r3, r4
 8009096:	bf0c      	ite	eq
 8009098:	6032      	streq	r2, [r6, #0]
 800909a:	605a      	strne	r2, [r3, #4]
 800909c:	e7ec      	b.n	8009078 <_malloc_r+0xa0>
 800909e:	4623      	mov	r3, r4
 80090a0:	6864      	ldr	r4, [r4, #4]
 80090a2:	e7b2      	b.n	800900a <_malloc_r+0x32>
 80090a4:	4634      	mov	r4, r6
 80090a6:	6876      	ldr	r6, [r6, #4]
 80090a8:	e7b9      	b.n	800901e <_malloc_r+0x46>
 80090aa:	230c      	movs	r3, #12
 80090ac:	603b      	str	r3, [r7, #0]
 80090ae:	4638      	mov	r0, r7
 80090b0:	f000 fba4 	bl	80097fc <__malloc_unlock>
 80090b4:	e7a1      	b.n	8008ffa <_malloc_r+0x22>
 80090b6:	6025      	str	r5, [r4, #0]
 80090b8:	e7de      	b.n	8009078 <_malloc_r+0xa0>
 80090ba:	bf00      	nop
 80090bc:	200007e0 	.word	0x200007e0

080090c0 <__sfputc_r>:
 80090c0:	6893      	ldr	r3, [r2, #8]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	b410      	push	{r4}
 80090c8:	6093      	str	r3, [r2, #8]
 80090ca:	da08      	bge.n	80090de <__sfputc_r+0x1e>
 80090cc:	6994      	ldr	r4, [r2, #24]
 80090ce:	42a3      	cmp	r3, r4
 80090d0:	db01      	blt.n	80090d6 <__sfputc_r+0x16>
 80090d2:	290a      	cmp	r1, #10
 80090d4:	d103      	bne.n	80090de <__sfputc_r+0x1e>
 80090d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090da:	f7ff bc31 	b.w	8008940 <__swbuf_r>
 80090de:	6813      	ldr	r3, [r2, #0]
 80090e0:	1c58      	adds	r0, r3, #1
 80090e2:	6010      	str	r0, [r2, #0]
 80090e4:	7019      	strb	r1, [r3, #0]
 80090e6:	4608      	mov	r0, r1
 80090e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <__sfputs_r>:
 80090ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f0:	4606      	mov	r6, r0
 80090f2:	460f      	mov	r7, r1
 80090f4:	4614      	mov	r4, r2
 80090f6:	18d5      	adds	r5, r2, r3
 80090f8:	42ac      	cmp	r4, r5
 80090fa:	d101      	bne.n	8009100 <__sfputs_r+0x12>
 80090fc:	2000      	movs	r0, #0
 80090fe:	e007      	b.n	8009110 <__sfputs_r+0x22>
 8009100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009104:	463a      	mov	r2, r7
 8009106:	4630      	mov	r0, r6
 8009108:	f7ff ffda 	bl	80090c0 <__sfputc_r>
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	d1f3      	bne.n	80090f8 <__sfputs_r+0xa>
 8009110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009114 <_vfiprintf_r>:
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	460d      	mov	r5, r1
 800911a:	b09d      	sub	sp, #116	; 0x74
 800911c:	4614      	mov	r4, r2
 800911e:	4698      	mov	r8, r3
 8009120:	4606      	mov	r6, r0
 8009122:	b118      	cbz	r0, 800912c <_vfiprintf_r+0x18>
 8009124:	6983      	ldr	r3, [r0, #24]
 8009126:	b90b      	cbnz	r3, 800912c <_vfiprintf_r+0x18>
 8009128:	f7ff fde4 	bl	8008cf4 <__sinit>
 800912c:	4b89      	ldr	r3, [pc, #548]	; (8009354 <_vfiprintf_r+0x240>)
 800912e:	429d      	cmp	r5, r3
 8009130:	d11b      	bne.n	800916a <_vfiprintf_r+0x56>
 8009132:	6875      	ldr	r5, [r6, #4]
 8009134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009136:	07d9      	lsls	r1, r3, #31
 8009138:	d405      	bmi.n	8009146 <_vfiprintf_r+0x32>
 800913a:	89ab      	ldrh	r3, [r5, #12]
 800913c:	059a      	lsls	r2, r3, #22
 800913e:	d402      	bmi.n	8009146 <_vfiprintf_r+0x32>
 8009140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009142:	f7ff fe75 	bl	8008e30 <__retarget_lock_acquire_recursive>
 8009146:	89ab      	ldrh	r3, [r5, #12]
 8009148:	071b      	lsls	r3, r3, #28
 800914a:	d501      	bpl.n	8009150 <_vfiprintf_r+0x3c>
 800914c:	692b      	ldr	r3, [r5, #16]
 800914e:	b9eb      	cbnz	r3, 800918c <_vfiprintf_r+0x78>
 8009150:	4629      	mov	r1, r5
 8009152:	4630      	mov	r0, r6
 8009154:	f7ff fc46 	bl	80089e4 <__swsetup_r>
 8009158:	b1c0      	cbz	r0, 800918c <_vfiprintf_r+0x78>
 800915a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800915c:	07dc      	lsls	r4, r3, #31
 800915e:	d50e      	bpl.n	800917e <_vfiprintf_r+0x6a>
 8009160:	f04f 30ff 	mov.w	r0, #4294967295
 8009164:	b01d      	add	sp, #116	; 0x74
 8009166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916a:	4b7b      	ldr	r3, [pc, #492]	; (8009358 <_vfiprintf_r+0x244>)
 800916c:	429d      	cmp	r5, r3
 800916e:	d101      	bne.n	8009174 <_vfiprintf_r+0x60>
 8009170:	68b5      	ldr	r5, [r6, #8]
 8009172:	e7df      	b.n	8009134 <_vfiprintf_r+0x20>
 8009174:	4b79      	ldr	r3, [pc, #484]	; (800935c <_vfiprintf_r+0x248>)
 8009176:	429d      	cmp	r5, r3
 8009178:	bf08      	it	eq
 800917a:	68f5      	ldreq	r5, [r6, #12]
 800917c:	e7da      	b.n	8009134 <_vfiprintf_r+0x20>
 800917e:	89ab      	ldrh	r3, [r5, #12]
 8009180:	0598      	lsls	r0, r3, #22
 8009182:	d4ed      	bmi.n	8009160 <_vfiprintf_r+0x4c>
 8009184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009186:	f7ff fe54 	bl	8008e32 <__retarget_lock_release_recursive>
 800918a:	e7e9      	b.n	8009160 <_vfiprintf_r+0x4c>
 800918c:	2300      	movs	r3, #0
 800918e:	9309      	str	r3, [sp, #36]	; 0x24
 8009190:	2320      	movs	r3, #32
 8009192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009196:	f8cd 800c 	str.w	r8, [sp, #12]
 800919a:	2330      	movs	r3, #48	; 0x30
 800919c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009360 <_vfiprintf_r+0x24c>
 80091a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091a4:	f04f 0901 	mov.w	r9, #1
 80091a8:	4623      	mov	r3, r4
 80091aa:	469a      	mov	sl, r3
 80091ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091b0:	b10a      	cbz	r2, 80091b6 <_vfiprintf_r+0xa2>
 80091b2:	2a25      	cmp	r2, #37	; 0x25
 80091b4:	d1f9      	bne.n	80091aa <_vfiprintf_r+0x96>
 80091b6:	ebba 0b04 	subs.w	fp, sl, r4
 80091ba:	d00b      	beq.n	80091d4 <_vfiprintf_r+0xc0>
 80091bc:	465b      	mov	r3, fp
 80091be:	4622      	mov	r2, r4
 80091c0:	4629      	mov	r1, r5
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7ff ff93 	bl	80090ee <__sfputs_r>
 80091c8:	3001      	adds	r0, #1
 80091ca:	f000 80aa 	beq.w	8009322 <_vfiprintf_r+0x20e>
 80091ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d0:	445a      	add	r2, fp
 80091d2:	9209      	str	r2, [sp, #36]	; 0x24
 80091d4:	f89a 3000 	ldrb.w	r3, [sl]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 80a2 	beq.w	8009322 <_vfiprintf_r+0x20e>
 80091de:	2300      	movs	r3, #0
 80091e0:	f04f 32ff 	mov.w	r2, #4294967295
 80091e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091e8:	f10a 0a01 	add.w	sl, sl, #1
 80091ec:	9304      	str	r3, [sp, #16]
 80091ee:	9307      	str	r3, [sp, #28]
 80091f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091f4:	931a      	str	r3, [sp, #104]	; 0x68
 80091f6:	4654      	mov	r4, sl
 80091f8:	2205      	movs	r2, #5
 80091fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091fe:	4858      	ldr	r0, [pc, #352]	; (8009360 <_vfiprintf_r+0x24c>)
 8009200:	f7f7 f806 	bl	8000210 <memchr>
 8009204:	9a04      	ldr	r2, [sp, #16]
 8009206:	b9d8      	cbnz	r0, 8009240 <_vfiprintf_r+0x12c>
 8009208:	06d1      	lsls	r1, r2, #27
 800920a:	bf44      	itt	mi
 800920c:	2320      	movmi	r3, #32
 800920e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009212:	0713      	lsls	r3, r2, #28
 8009214:	bf44      	itt	mi
 8009216:	232b      	movmi	r3, #43	; 0x2b
 8009218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800921c:	f89a 3000 	ldrb.w	r3, [sl]
 8009220:	2b2a      	cmp	r3, #42	; 0x2a
 8009222:	d015      	beq.n	8009250 <_vfiprintf_r+0x13c>
 8009224:	9a07      	ldr	r2, [sp, #28]
 8009226:	4654      	mov	r4, sl
 8009228:	2000      	movs	r0, #0
 800922a:	f04f 0c0a 	mov.w	ip, #10
 800922e:	4621      	mov	r1, r4
 8009230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009234:	3b30      	subs	r3, #48	; 0x30
 8009236:	2b09      	cmp	r3, #9
 8009238:	d94e      	bls.n	80092d8 <_vfiprintf_r+0x1c4>
 800923a:	b1b0      	cbz	r0, 800926a <_vfiprintf_r+0x156>
 800923c:	9207      	str	r2, [sp, #28]
 800923e:	e014      	b.n	800926a <_vfiprintf_r+0x156>
 8009240:	eba0 0308 	sub.w	r3, r0, r8
 8009244:	fa09 f303 	lsl.w	r3, r9, r3
 8009248:	4313      	orrs	r3, r2
 800924a:	9304      	str	r3, [sp, #16]
 800924c:	46a2      	mov	sl, r4
 800924e:	e7d2      	b.n	80091f6 <_vfiprintf_r+0xe2>
 8009250:	9b03      	ldr	r3, [sp, #12]
 8009252:	1d19      	adds	r1, r3, #4
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	9103      	str	r1, [sp, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	bfbb      	ittet	lt
 800925c:	425b      	neglt	r3, r3
 800925e:	f042 0202 	orrlt.w	r2, r2, #2
 8009262:	9307      	strge	r3, [sp, #28]
 8009264:	9307      	strlt	r3, [sp, #28]
 8009266:	bfb8      	it	lt
 8009268:	9204      	strlt	r2, [sp, #16]
 800926a:	7823      	ldrb	r3, [r4, #0]
 800926c:	2b2e      	cmp	r3, #46	; 0x2e
 800926e:	d10c      	bne.n	800928a <_vfiprintf_r+0x176>
 8009270:	7863      	ldrb	r3, [r4, #1]
 8009272:	2b2a      	cmp	r3, #42	; 0x2a
 8009274:	d135      	bne.n	80092e2 <_vfiprintf_r+0x1ce>
 8009276:	9b03      	ldr	r3, [sp, #12]
 8009278:	1d1a      	adds	r2, r3, #4
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	9203      	str	r2, [sp, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	bfb8      	it	lt
 8009282:	f04f 33ff 	movlt.w	r3, #4294967295
 8009286:	3402      	adds	r4, #2
 8009288:	9305      	str	r3, [sp, #20]
 800928a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009370 <_vfiprintf_r+0x25c>
 800928e:	7821      	ldrb	r1, [r4, #0]
 8009290:	2203      	movs	r2, #3
 8009292:	4650      	mov	r0, sl
 8009294:	f7f6 ffbc 	bl	8000210 <memchr>
 8009298:	b140      	cbz	r0, 80092ac <_vfiprintf_r+0x198>
 800929a:	2340      	movs	r3, #64	; 0x40
 800929c:	eba0 000a 	sub.w	r0, r0, sl
 80092a0:	fa03 f000 	lsl.w	r0, r3, r0
 80092a4:	9b04      	ldr	r3, [sp, #16]
 80092a6:	4303      	orrs	r3, r0
 80092a8:	3401      	adds	r4, #1
 80092aa:	9304      	str	r3, [sp, #16]
 80092ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b0:	482c      	ldr	r0, [pc, #176]	; (8009364 <_vfiprintf_r+0x250>)
 80092b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092b6:	2206      	movs	r2, #6
 80092b8:	f7f6 ffaa 	bl	8000210 <memchr>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d03f      	beq.n	8009340 <_vfiprintf_r+0x22c>
 80092c0:	4b29      	ldr	r3, [pc, #164]	; (8009368 <_vfiprintf_r+0x254>)
 80092c2:	bb1b      	cbnz	r3, 800930c <_vfiprintf_r+0x1f8>
 80092c4:	9b03      	ldr	r3, [sp, #12]
 80092c6:	3307      	adds	r3, #7
 80092c8:	f023 0307 	bic.w	r3, r3, #7
 80092cc:	3308      	adds	r3, #8
 80092ce:	9303      	str	r3, [sp, #12]
 80092d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d2:	443b      	add	r3, r7
 80092d4:	9309      	str	r3, [sp, #36]	; 0x24
 80092d6:	e767      	b.n	80091a8 <_vfiprintf_r+0x94>
 80092d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092dc:	460c      	mov	r4, r1
 80092de:	2001      	movs	r0, #1
 80092e0:	e7a5      	b.n	800922e <_vfiprintf_r+0x11a>
 80092e2:	2300      	movs	r3, #0
 80092e4:	3401      	adds	r4, #1
 80092e6:	9305      	str	r3, [sp, #20]
 80092e8:	4619      	mov	r1, r3
 80092ea:	f04f 0c0a 	mov.w	ip, #10
 80092ee:	4620      	mov	r0, r4
 80092f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092f4:	3a30      	subs	r2, #48	; 0x30
 80092f6:	2a09      	cmp	r2, #9
 80092f8:	d903      	bls.n	8009302 <_vfiprintf_r+0x1ee>
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0c5      	beq.n	800928a <_vfiprintf_r+0x176>
 80092fe:	9105      	str	r1, [sp, #20]
 8009300:	e7c3      	b.n	800928a <_vfiprintf_r+0x176>
 8009302:	fb0c 2101 	mla	r1, ip, r1, r2
 8009306:	4604      	mov	r4, r0
 8009308:	2301      	movs	r3, #1
 800930a:	e7f0      	b.n	80092ee <_vfiprintf_r+0x1da>
 800930c:	ab03      	add	r3, sp, #12
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	462a      	mov	r2, r5
 8009312:	4b16      	ldr	r3, [pc, #88]	; (800936c <_vfiprintf_r+0x258>)
 8009314:	a904      	add	r1, sp, #16
 8009316:	4630      	mov	r0, r6
 8009318:	f3af 8000 	nop.w
 800931c:	4607      	mov	r7, r0
 800931e:	1c78      	adds	r0, r7, #1
 8009320:	d1d6      	bne.n	80092d0 <_vfiprintf_r+0x1bc>
 8009322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009324:	07d9      	lsls	r1, r3, #31
 8009326:	d405      	bmi.n	8009334 <_vfiprintf_r+0x220>
 8009328:	89ab      	ldrh	r3, [r5, #12]
 800932a:	059a      	lsls	r2, r3, #22
 800932c:	d402      	bmi.n	8009334 <_vfiprintf_r+0x220>
 800932e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009330:	f7ff fd7f 	bl	8008e32 <__retarget_lock_release_recursive>
 8009334:	89ab      	ldrh	r3, [r5, #12]
 8009336:	065b      	lsls	r3, r3, #25
 8009338:	f53f af12 	bmi.w	8009160 <_vfiprintf_r+0x4c>
 800933c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800933e:	e711      	b.n	8009164 <_vfiprintf_r+0x50>
 8009340:	ab03      	add	r3, sp, #12
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	462a      	mov	r2, r5
 8009346:	4b09      	ldr	r3, [pc, #36]	; (800936c <_vfiprintf_r+0x258>)
 8009348:	a904      	add	r1, sp, #16
 800934a:	4630      	mov	r0, r6
 800934c:	f000 f880 	bl	8009450 <_printf_i>
 8009350:	e7e4      	b.n	800931c <_vfiprintf_r+0x208>
 8009352:	bf00      	nop
 8009354:	08009b44 	.word	0x08009b44
 8009358:	08009b64 	.word	0x08009b64
 800935c:	08009b24 	.word	0x08009b24
 8009360:	08009b84 	.word	0x08009b84
 8009364:	08009b8e 	.word	0x08009b8e
 8009368:	00000000 	.word	0x00000000
 800936c:	080090ef 	.word	0x080090ef
 8009370:	08009b8a 	.word	0x08009b8a

08009374 <_printf_common>:
 8009374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009378:	4616      	mov	r6, r2
 800937a:	4699      	mov	r9, r3
 800937c:	688a      	ldr	r2, [r1, #8]
 800937e:	690b      	ldr	r3, [r1, #16]
 8009380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009384:	4293      	cmp	r3, r2
 8009386:	bfb8      	it	lt
 8009388:	4613      	movlt	r3, r2
 800938a:	6033      	str	r3, [r6, #0]
 800938c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009390:	4607      	mov	r7, r0
 8009392:	460c      	mov	r4, r1
 8009394:	b10a      	cbz	r2, 800939a <_printf_common+0x26>
 8009396:	3301      	adds	r3, #1
 8009398:	6033      	str	r3, [r6, #0]
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	0699      	lsls	r1, r3, #26
 800939e:	bf42      	ittt	mi
 80093a0:	6833      	ldrmi	r3, [r6, #0]
 80093a2:	3302      	addmi	r3, #2
 80093a4:	6033      	strmi	r3, [r6, #0]
 80093a6:	6825      	ldr	r5, [r4, #0]
 80093a8:	f015 0506 	ands.w	r5, r5, #6
 80093ac:	d106      	bne.n	80093bc <_printf_common+0x48>
 80093ae:	f104 0a19 	add.w	sl, r4, #25
 80093b2:	68e3      	ldr	r3, [r4, #12]
 80093b4:	6832      	ldr	r2, [r6, #0]
 80093b6:	1a9b      	subs	r3, r3, r2
 80093b8:	42ab      	cmp	r3, r5
 80093ba:	dc26      	bgt.n	800940a <_printf_common+0x96>
 80093bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093c0:	1e13      	subs	r3, r2, #0
 80093c2:	6822      	ldr	r2, [r4, #0]
 80093c4:	bf18      	it	ne
 80093c6:	2301      	movne	r3, #1
 80093c8:	0692      	lsls	r2, r2, #26
 80093ca:	d42b      	bmi.n	8009424 <_printf_common+0xb0>
 80093cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093d0:	4649      	mov	r1, r9
 80093d2:	4638      	mov	r0, r7
 80093d4:	47c0      	blx	r8
 80093d6:	3001      	adds	r0, #1
 80093d8:	d01e      	beq.n	8009418 <_printf_common+0xa4>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	68e5      	ldr	r5, [r4, #12]
 80093de:	6832      	ldr	r2, [r6, #0]
 80093e0:	f003 0306 	and.w	r3, r3, #6
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	bf08      	it	eq
 80093e8:	1aad      	subeq	r5, r5, r2
 80093ea:	68a3      	ldr	r3, [r4, #8]
 80093ec:	6922      	ldr	r2, [r4, #16]
 80093ee:	bf0c      	ite	eq
 80093f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093f4:	2500      	movne	r5, #0
 80093f6:	4293      	cmp	r3, r2
 80093f8:	bfc4      	itt	gt
 80093fa:	1a9b      	subgt	r3, r3, r2
 80093fc:	18ed      	addgt	r5, r5, r3
 80093fe:	2600      	movs	r6, #0
 8009400:	341a      	adds	r4, #26
 8009402:	42b5      	cmp	r5, r6
 8009404:	d11a      	bne.n	800943c <_printf_common+0xc8>
 8009406:	2000      	movs	r0, #0
 8009408:	e008      	b.n	800941c <_printf_common+0xa8>
 800940a:	2301      	movs	r3, #1
 800940c:	4652      	mov	r2, sl
 800940e:	4649      	mov	r1, r9
 8009410:	4638      	mov	r0, r7
 8009412:	47c0      	blx	r8
 8009414:	3001      	adds	r0, #1
 8009416:	d103      	bne.n	8009420 <_printf_common+0xac>
 8009418:	f04f 30ff 	mov.w	r0, #4294967295
 800941c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009420:	3501      	adds	r5, #1
 8009422:	e7c6      	b.n	80093b2 <_printf_common+0x3e>
 8009424:	18e1      	adds	r1, r4, r3
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	2030      	movs	r0, #48	; 0x30
 800942a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800942e:	4422      	add	r2, r4
 8009430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009438:	3302      	adds	r3, #2
 800943a:	e7c7      	b.n	80093cc <_printf_common+0x58>
 800943c:	2301      	movs	r3, #1
 800943e:	4622      	mov	r2, r4
 8009440:	4649      	mov	r1, r9
 8009442:	4638      	mov	r0, r7
 8009444:	47c0      	blx	r8
 8009446:	3001      	adds	r0, #1
 8009448:	d0e6      	beq.n	8009418 <_printf_common+0xa4>
 800944a:	3601      	adds	r6, #1
 800944c:	e7d9      	b.n	8009402 <_printf_common+0x8e>
	...

08009450 <_printf_i>:
 8009450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009454:	7e0f      	ldrb	r7, [r1, #24]
 8009456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009458:	2f78      	cmp	r7, #120	; 0x78
 800945a:	4691      	mov	r9, r2
 800945c:	4680      	mov	r8, r0
 800945e:	460c      	mov	r4, r1
 8009460:	469a      	mov	sl, r3
 8009462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009466:	d807      	bhi.n	8009478 <_printf_i+0x28>
 8009468:	2f62      	cmp	r7, #98	; 0x62
 800946a:	d80a      	bhi.n	8009482 <_printf_i+0x32>
 800946c:	2f00      	cmp	r7, #0
 800946e:	f000 80d8 	beq.w	8009622 <_printf_i+0x1d2>
 8009472:	2f58      	cmp	r7, #88	; 0x58
 8009474:	f000 80a3 	beq.w	80095be <_printf_i+0x16e>
 8009478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800947c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009480:	e03a      	b.n	80094f8 <_printf_i+0xa8>
 8009482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009486:	2b15      	cmp	r3, #21
 8009488:	d8f6      	bhi.n	8009478 <_printf_i+0x28>
 800948a:	a101      	add	r1, pc, #4	; (adr r1, 8009490 <_printf_i+0x40>)
 800948c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009490:	080094e9 	.word	0x080094e9
 8009494:	080094fd 	.word	0x080094fd
 8009498:	08009479 	.word	0x08009479
 800949c:	08009479 	.word	0x08009479
 80094a0:	08009479 	.word	0x08009479
 80094a4:	08009479 	.word	0x08009479
 80094a8:	080094fd 	.word	0x080094fd
 80094ac:	08009479 	.word	0x08009479
 80094b0:	08009479 	.word	0x08009479
 80094b4:	08009479 	.word	0x08009479
 80094b8:	08009479 	.word	0x08009479
 80094bc:	08009609 	.word	0x08009609
 80094c0:	0800952d 	.word	0x0800952d
 80094c4:	080095eb 	.word	0x080095eb
 80094c8:	08009479 	.word	0x08009479
 80094cc:	08009479 	.word	0x08009479
 80094d0:	0800962b 	.word	0x0800962b
 80094d4:	08009479 	.word	0x08009479
 80094d8:	0800952d 	.word	0x0800952d
 80094dc:	08009479 	.word	0x08009479
 80094e0:	08009479 	.word	0x08009479
 80094e4:	080095f3 	.word	0x080095f3
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	1d1a      	adds	r2, r3, #4
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	602a      	str	r2, [r5, #0]
 80094f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094f8:	2301      	movs	r3, #1
 80094fa:	e0a3      	b.n	8009644 <_printf_i+0x1f4>
 80094fc:	6820      	ldr	r0, [r4, #0]
 80094fe:	6829      	ldr	r1, [r5, #0]
 8009500:	0606      	lsls	r6, r0, #24
 8009502:	f101 0304 	add.w	r3, r1, #4
 8009506:	d50a      	bpl.n	800951e <_printf_i+0xce>
 8009508:	680e      	ldr	r6, [r1, #0]
 800950a:	602b      	str	r3, [r5, #0]
 800950c:	2e00      	cmp	r6, #0
 800950e:	da03      	bge.n	8009518 <_printf_i+0xc8>
 8009510:	232d      	movs	r3, #45	; 0x2d
 8009512:	4276      	negs	r6, r6
 8009514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009518:	485e      	ldr	r0, [pc, #376]	; (8009694 <_printf_i+0x244>)
 800951a:	230a      	movs	r3, #10
 800951c:	e019      	b.n	8009552 <_printf_i+0x102>
 800951e:	680e      	ldr	r6, [r1, #0]
 8009520:	602b      	str	r3, [r5, #0]
 8009522:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009526:	bf18      	it	ne
 8009528:	b236      	sxthne	r6, r6
 800952a:	e7ef      	b.n	800950c <_printf_i+0xbc>
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	6820      	ldr	r0, [r4, #0]
 8009530:	1d19      	adds	r1, r3, #4
 8009532:	6029      	str	r1, [r5, #0]
 8009534:	0601      	lsls	r1, r0, #24
 8009536:	d501      	bpl.n	800953c <_printf_i+0xec>
 8009538:	681e      	ldr	r6, [r3, #0]
 800953a:	e002      	b.n	8009542 <_printf_i+0xf2>
 800953c:	0646      	lsls	r6, r0, #25
 800953e:	d5fb      	bpl.n	8009538 <_printf_i+0xe8>
 8009540:	881e      	ldrh	r6, [r3, #0]
 8009542:	4854      	ldr	r0, [pc, #336]	; (8009694 <_printf_i+0x244>)
 8009544:	2f6f      	cmp	r7, #111	; 0x6f
 8009546:	bf0c      	ite	eq
 8009548:	2308      	moveq	r3, #8
 800954a:	230a      	movne	r3, #10
 800954c:	2100      	movs	r1, #0
 800954e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009552:	6865      	ldr	r5, [r4, #4]
 8009554:	60a5      	str	r5, [r4, #8]
 8009556:	2d00      	cmp	r5, #0
 8009558:	bfa2      	ittt	ge
 800955a:	6821      	ldrge	r1, [r4, #0]
 800955c:	f021 0104 	bicge.w	r1, r1, #4
 8009560:	6021      	strge	r1, [r4, #0]
 8009562:	b90e      	cbnz	r6, 8009568 <_printf_i+0x118>
 8009564:	2d00      	cmp	r5, #0
 8009566:	d04d      	beq.n	8009604 <_printf_i+0x1b4>
 8009568:	4615      	mov	r5, r2
 800956a:	fbb6 f1f3 	udiv	r1, r6, r3
 800956e:	fb03 6711 	mls	r7, r3, r1, r6
 8009572:	5dc7      	ldrb	r7, [r0, r7]
 8009574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009578:	4637      	mov	r7, r6
 800957a:	42bb      	cmp	r3, r7
 800957c:	460e      	mov	r6, r1
 800957e:	d9f4      	bls.n	800956a <_printf_i+0x11a>
 8009580:	2b08      	cmp	r3, #8
 8009582:	d10b      	bne.n	800959c <_printf_i+0x14c>
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	07de      	lsls	r6, r3, #31
 8009588:	d508      	bpl.n	800959c <_printf_i+0x14c>
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	6861      	ldr	r1, [r4, #4]
 800958e:	4299      	cmp	r1, r3
 8009590:	bfde      	ittt	le
 8009592:	2330      	movle	r3, #48	; 0x30
 8009594:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009598:	f105 35ff 	addle.w	r5, r5, #4294967295
 800959c:	1b52      	subs	r2, r2, r5
 800959e:	6122      	str	r2, [r4, #16]
 80095a0:	f8cd a000 	str.w	sl, [sp]
 80095a4:	464b      	mov	r3, r9
 80095a6:	aa03      	add	r2, sp, #12
 80095a8:	4621      	mov	r1, r4
 80095aa:	4640      	mov	r0, r8
 80095ac:	f7ff fee2 	bl	8009374 <_printf_common>
 80095b0:	3001      	adds	r0, #1
 80095b2:	d14c      	bne.n	800964e <_printf_i+0x1fe>
 80095b4:	f04f 30ff 	mov.w	r0, #4294967295
 80095b8:	b004      	add	sp, #16
 80095ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095be:	4835      	ldr	r0, [pc, #212]	; (8009694 <_printf_i+0x244>)
 80095c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80095c4:	6829      	ldr	r1, [r5, #0]
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80095cc:	6029      	str	r1, [r5, #0]
 80095ce:	061d      	lsls	r5, r3, #24
 80095d0:	d514      	bpl.n	80095fc <_printf_i+0x1ac>
 80095d2:	07df      	lsls	r7, r3, #31
 80095d4:	bf44      	itt	mi
 80095d6:	f043 0320 	orrmi.w	r3, r3, #32
 80095da:	6023      	strmi	r3, [r4, #0]
 80095dc:	b91e      	cbnz	r6, 80095e6 <_printf_i+0x196>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	f023 0320 	bic.w	r3, r3, #32
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	2310      	movs	r3, #16
 80095e8:	e7b0      	b.n	800954c <_printf_i+0xfc>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	f043 0320 	orr.w	r3, r3, #32
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	2378      	movs	r3, #120	; 0x78
 80095f4:	4828      	ldr	r0, [pc, #160]	; (8009698 <_printf_i+0x248>)
 80095f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095fa:	e7e3      	b.n	80095c4 <_printf_i+0x174>
 80095fc:	0659      	lsls	r1, r3, #25
 80095fe:	bf48      	it	mi
 8009600:	b2b6      	uxthmi	r6, r6
 8009602:	e7e6      	b.n	80095d2 <_printf_i+0x182>
 8009604:	4615      	mov	r5, r2
 8009606:	e7bb      	b.n	8009580 <_printf_i+0x130>
 8009608:	682b      	ldr	r3, [r5, #0]
 800960a:	6826      	ldr	r6, [r4, #0]
 800960c:	6961      	ldr	r1, [r4, #20]
 800960e:	1d18      	adds	r0, r3, #4
 8009610:	6028      	str	r0, [r5, #0]
 8009612:	0635      	lsls	r5, r6, #24
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	d501      	bpl.n	800961c <_printf_i+0x1cc>
 8009618:	6019      	str	r1, [r3, #0]
 800961a:	e002      	b.n	8009622 <_printf_i+0x1d2>
 800961c:	0670      	lsls	r0, r6, #25
 800961e:	d5fb      	bpl.n	8009618 <_printf_i+0x1c8>
 8009620:	8019      	strh	r1, [r3, #0]
 8009622:	2300      	movs	r3, #0
 8009624:	6123      	str	r3, [r4, #16]
 8009626:	4615      	mov	r5, r2
 8009628:	e7ba      	b.n	80095a0 <_printf_i+0x150>
 800962a:	682b      	ldr	r3, [r5, #0]
 800962c:	1d1a      	adds	r2, r3, #4
 800962e:	602a      	str	r2, [r5, #0]
 8009630:	681d      	ldr	r5, [r3, #0]
 8009632:	6862      	ldr	r2, [r4, #4]
 8009634:	2100      	movs	r1, #0
 8009636:	4628      	mov	r0, r5
 8009638:	f7f6 fdea 	bl	8000210 <memchr>
 800963c:	b108      	cbz	r0, 8009642 <_printf_i+0x1f2>
 800963e:	1b40      	subs	r0, r0, r5
 8009640:	6060      	str	r0, [r4, #4]
 8009642:	6863      	ldr	r3, [r4, #4]
 8009644:	6123      	str	r3, [r4, #16]
 8009646:	2300      	movs	r3, #0
 8009648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800964c:	e7a8      	b.n	80095a0 <_printf_i+0x150>
 800964e:	6923      	ldr	r3, [r4, #16]
 8009650:	462a      	mov	r2, r5
 8009652:	4649      	mov	r1, r9
 8009654:	4640      	mov	r0, r8
 8009656:	47d0      	blx	sl
 8009658:	3001      	adds	r0, #1
 800965a:	d0ab      	beq.n	80095b4 <_printf_i+0x164>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	079b      	lsls	r3, r3, #30
 8009660:	d413      	bmi.n	800968a <_printf_i+0x23a>
 8009662:	68e0      	ldr	r0, [r4, #12]
 8009664:	9b03      	ldr	r3, [sp, #12]
 8009666:	4298      	cmp	r0, r3
 8009668:	bfb8      	it	lt
 800966a:	4618      	movlt	r0, r3
 800966c:	e7a4      	b.n	80095b8 <_printf_i+0x168>
 800966e:	2301      	movs	r3, #1
 8009670:	4632      	mov	r2, r6
 8009672:	4649      	mov	r1, r9
 8009674:	4640      	mov	r0, r8
 8009676:	47d0      	blx	sl
 8009678:	3001      	adds	r0, #1
 800967a:	d09b      	beq.n	80095b4 <_printf_i+0x164>
 800967c:	3501      	adds	r5, #1
 800967e:	68e3      	ldr	r3, [r4, #12]
 8009680:	9903      	ldr	r1, [sp, #12]
 8009682:	1a5b      	subs	r3, r3, r1
 8009684:	42ab      	cmp	r3, r5
 8009686:	dcf2      	bgt.n	800966e <_printf_i+0x21e>
 8009688:	e7eb      	b.n	8009662 <_printf_i+0x212>
 800968a:	2500      	movs	r5, #0
 800968c:	f104 0619 	add.w	r6, r4, #25
 8009690:	e7f5      	b.n	800967e <_printf_i+0x22e>
 8009692:	bf00      	nop
 8009694:	08009b95 	.word	0x08009b95
 8009698:	08009ba6 	.word	0x08009ba6

0800969c <_sbrk_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4d06      	ldr	r5, [pc, #24]	; (80096b8 <_sbrk_r+0x1c>)
 80096a0:	2300      	movs	r3, #0
 80096a2:	4604      	mov	r4, r0
 80096a4:	4608      	mov	r0, r1
 80096a6:	602b      	str	r3, [r5, #0]
 80096a8:	f7f9 fcf2 	bl	8003090 <_sbrk>
 80096ac:	1c43      	adds	r3, r0, #1
 80096ae:	d102      	bne.n	80096b6 <_sbrk_r+0x1a>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	b103      	cbz	r3, 80096b6 <_sbrk_r+0x1a>
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	200007e8 	.word	0x200007e8

080096bc <__sread>:
 80096bc:	b510      	push	{r4, lr}
 80096be:	460c      	mov	r4, r1
 80096c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c4:	f000 f8a0 	bl	8009808 <_read_r>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	bfab      	itete	ge
 80096cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096ce:	89a3      	ldrhlt	r3, [r4, #12]
 80096d0:	181b      	addge	r3, r3, r0
 80096d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096d6:	bfac      	ite	ge
 80096d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80096da:	81a3      	strhlt	r3, [r4, #12]
 80096dc:	bd10      	pop	{r4, pc}

080096de <__swrite>:
 80096de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e2:	461f      	mov	r7, r3
 80096e4:	898b      	ldrh	r3, [r1, #12]
 80096e6:	05db      	lsls	r3, r3, #23
 80096e8:	4605      	mov	r5, r0
 80096ea:	460c      	mov	r4, r1
 80096ec:	4616      	mov	r6, r2
 80096ee:	d505      	bpl.n	80096fc <__swrite+0x1e>
 80096f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f4:	2302      	movs	r3, #2
 80096f6:	2200      	movs	r2, #0
 80096f8:	f000 f868 	bl	80097cc <_lseek_r>
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	4632      	mov	r2, r6
 800970a:	463b      	mov	r3, r7
 800970c:	4628      	mov	r0, r5
 800970e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009712:	f000 b817 	b.w	8009744 <_write_r>

08009716 <__sseek>:
 8009716:	b510      	push	{r4, lr}
 8009718:	460c      	mov	r4, r1
 800971a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800971e:	f000 f855 	bl	80097cc <_lseek_r>
 8009722:	1c43      	adds	r3, r0, #1
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	bf15      	itete	ne
 8009728:	6560      	strne	r0, [r4, #84]	; 0x54
 800972a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800972e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009732:	81a3      	strheq	r3, [r4, #12]
 8009734:	bf18      	it	ne
 8009736:	81a3      	strhne	r3, [r4, #12]
 8009738:	bd10      	pop	{r4, pc}

0800973a <__sclose>:
 800973a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800973e:	f000 b813 	b.w	8009768 <_close_r>
	...

08009744 <_write_r>:
 8009744:	b538      	push	{r3, r4, r5, lr}
 8009746:	4d07      	ldr	r5, [pc, #28]	; (8009764 <_write_r+0x20>)
 8009748:	4604      	mov	r4, r0
 800974a:	4608      	mov	r0, r1
 800974c:	4611      	mov	r1, r2
 800974e:	2200      	movs	r2, #0
 8009750:	602a      	str	r2, [r5, #0]
 8009752:	461a      	mov	r2, r3
 8009754:	f7f9 fc4b 	bl	8002fee <_write>
 8009758:	1c43      	adds	r3, r0, #1
 800975a:	d102      	bne.n	8009762 <_write_r+0x1e>
 800975c:	682b      	ldr	r3, [r5, #0]
 800975e:	b103      	cbz	r3, 8009762 <_write_r+0x1e>
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	bd38      	pop	{r3, r4, r5, pc}
 8009764:	200007e8 	.word	0x200007e8

08009768 <_close_r>:
 8009768:	b538      	push	{r3, r4, r5, lr}
 800976a:	4d06      	ldr	r5, [pc, #24]	; (8009784 <_close_r+0x1c>)
 800976c:	2300      	movs	r3, #0
 800976e:	4604      	mov	r4, r0
 8009770:	4608      	mov	r0, r1
 8009772:	602b      	str	r3, [r5, #0]
 8009774:	f7f9 fc57 	bl	8003026 <_close>
 8009778:	1c43      	adds	r3, r0, #1
 800977a:	d102      	bne.n	8009782 <_close_r+0x1a>
 800977c:	682b      	ldr	r3, [r5, #0]
 800977e:	b103      	cbz	r3, 8009782 <_close_r+0x1a>
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	bd38      	pop	{r3, r4, r5, pc}
 8009784:	200007e8 	.word	0x200007e8

08009788 <_fstat_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4d07      	ldr	r5, [pc, #28]	; (80097a8 <_fstat_r+0x20>)
 800978c:	2300      	movs	r3, #0
 800978e:	4604      	mov	r4, r0
 8009790:	4608      	mov	r0, r1
 8009792:	4611      	mov	r1, r2
 8009794:	602b      	str	r3, [r5, #0]
 8009796:	f7f9 fc52 	bl	800303e <_fstat>
 800979a:	1c43      	adds	r3, r0, #1
 800979c:	d102      	bne.n	80097a4 <_fstat_r+0x1c>
 800979e:	682b      	ldr	r3, [r5, #0]
 80097a0:	b103      	cbz	r3, 80097a4 <_fstat_r+0x1c>
 80097a2:	6023      	str	r3, [r4, #0]
 80097a4:	bd38      	pop	{r3, r4, r5, pc}
 80097a6:	bf00      	nop
 80097a8:	200007e8 	.word	0x200007e8

080097ac <_isatty_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4d06      	ldr	r5, [pc, #24]	; (80097c8 <_isatty_r+0x1c>)
 80097b0:	2300      	movs	r3, #0
 80097b2:	4604      	mov	r4, r0
 80097b4:	4608      	mov	r0, r1
 80097b6:	602b      	str	r3, [r5, #0]
 80097b8:	f7f9 fc51 	bl	800305e <_isatty>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	d102      	bne.n	80097c6 <_isatty_r+0x1a>
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	b103      	cbz	r3, 80097c6 <_isatty_r+0x1a>
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	bd38      	pop	{r3, r4, r5, pc}
 80097c8:	200007e8 	.word	0x200007e8

080097cc <_lseek_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	4d07      	ldr	r5, [pc, #28]	; (80097ec <_lseek_r+0x20>)
 80097d0:	4604      	mov	r4, r0
 80097d2:	4608      	mov	r0, r1
 80097d4:	4611      	mov	r1, r2
 80097d6:	2200      	movs	r2, #0
 80097d8:	602a      	str	r2, [r5, #0]
 80097da:	461a      	mov	r2, r3
 80097dc:	f7f9 fc4a 	bl	8003074 <_lseek>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d102      	bne.n	80097ea <_lseek_r+0x1e>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	b103      	cbz	r3, 80097ea <_lseek_r+0x1e>
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	200007e8 	.word	0x200007e8

080097f0 <__malloc_lock>:
 80097f0:	4801      	ldr	r0, [pc, #4]	; (80097f8 <__malloc_lock+0x8>)
 80097f2:	f7ff bb1d 	b.w	8008e30 <__retarget_lock_acquire_recursive>
 80097f6:	bf00      	nop
 80097f8:	200007dc 	.word	0x200007dc

080097fc <__malloc_unlock>:
 80097fc:	4801      	ldr	r0, [pc, #4]	; (8009804 <__malloc_unlock+0x8>)
 80097fe:	f7ff bb18 	b.w	8008e32 <__retarget_lock_release_recursive>
 8009802:	bf00      	nop
 8009804:	200007dc 	.word	0x200007dc

08009808 <_read_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4d07      	ldr	r5, [pc, #28]	; (8009828 <_read_r+0x20>)
 800980c:	4604      	mov	r4, r0
 800980e:	4608      	mov	r0, r1
 8009810:	4611      	mov	r1, r2
 8009812:	2200      	movs	r2, #0
 8009814:	602a      	str	r2, [r5, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	f7f9 fbcc 	bl	8002fb4 <_read>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	d102      	bne.n	8009826 <_read_r+0x1e>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	b103      	cbz	r3, 8009826 <_read_r+0x1e>
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	200007e8 	.word	0x200007e8

0800982c <_init>:
 800982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982e:	bf00      	nop
 8009830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009832:	bc08      	pop	{r3}
 8009834:	469e      	mov	lr, r3
 8009836:	4770      	bx	lr

08009838 <_fini>:
 8009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983a:	bf00      	nop
 800983c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800983e:	bc08      	pop	{r3}
 8009840:	469e      	mov	lr, r3
 8009842:	4770      	bx	lr
